{"0": {
    "doc": "User Stories and Conditions of Satisfaction",
    "title": "User Stories and Conditions of Satisfaction",
    "content": "Introduction . This activity will give you practice with using user stories to solicit and document user requirements, refining them into conditions of satisfaction, and assigning priorities. Before you start, be sure to review the tutorial User Stories and Conditions of Satisfaction on the course website. Scenario . Imagine that the State of Massachusetts is your client and you are the lead of a development team. You have already walked your client through the material in the tutorial, and together you have developed the following user story: . | As a resident of the State of Massachusetts, I would like to obtain my mail-in ballot so that I can cast my vote by mail. | . Requirements for this activity . | Write down at least 3 questions that you should ask the client before beginning to write conditions of satisfaction for this user story. | Write at least 3 conditions of satisfaction with appropriate priority | Then write 3 bad examples of conditions of satisfaction, and briefly say why they are bad. | . When you are done, submit your work as required by your instructor. This may vary from section to section. ",
    "url": "/CS4530-Fall-2023/Activities/Module01%20Activity/",
    
    "relUrl": "/Activities/Module01%20Activity/"
  },"1": {
    "doc": "Test-Driven Development",
    "title": "Test-Driven Development",
    "content": "This activity is intended to supplement the CS4530 lecture on test-driven development. Steps . | Download and unpack the starter Code | Write down the testable behaviors for the satisfaction condition: “Add a new grade for an existing student” | Identify at least two exceptional conditions or design decisions associated with these testable behaviors | Write Jest tests for your testable behaviors | Implement a method addGrade that passes your tests. | . When you are done, submit your work as required by your instructor. This may vary from section to section. ",
    "url": "/CS4530-Fall-2023/Activities/Module02%20Activity/",
    
    "relUrl": "/Activities/Module02%20Activity/"
  },"2": {
    "doc": "Traffic Light Activity Handout",
    "title": "Overview",
    "content": "In this activity, you will do a simple example to help you recognize failure of the five code-level design principles . Step 0: Getting started . Start by downloading the (Starter Code). Run npm install to download the dependencies for this project, and then open it in your IDE of choice. Run npm run test to run the tests of the existing code (or run the script in VSC). You will see that the tests pass. The Problem . Your team is writing a simulator for a traffic light in a large city. Whitley, an intern in your group, has written the code in TrafficLight.ts, and the tests in TrafficLight.test.ts . Your team leader, Adrian, has asked you to critique Whitley’s code based on the Five Code-Level Design Principles. Adrian says that he has already received some feedback from the client, who complained that not all traffic lights change every 20 seconds (indeed, the times for red, yellow, and green may all be different, and may be different at different intersections.) . Part 1: Critique Whitley’s code. In a text file, list several ways in which Whitley’s code violates the 5 Principles. Part 2: Improve Whitley’s code . Write a new file, called betterTrafficLight.ts, which solves the problem raised by the customer, while adhering better to the 5 Principles. Test your code by changing TrafficLight.test.ts to import from betterTrafficLight.ts . Part 3: Critique your own code . Now look at your own code. Based on your experience with traffic lights, list 3 assumptions that your code makes about the behavior of traffic lights in a large city. In what ways is the client likely to be unhappy with the assumptions you made? (Stretch goal: how could you redesign your code to make it more flexible?) . Submit your work . Instructions for submitting this activity will appear in Canvas. ",
    "url": "/CS4530-Fall-2023/Activities/Module03%20Activity/#overview",
    
    "relUrl": "/Activities/Module03%20Activity/#overview"
  },"3": {
    "doc": "Traffic Light Activity Handout",
    "title": "Traffic Light Activity Handout",
    "content": " ",
    "url": "/CS4530-Fall-2023/Activities/Module03%20Activity/",
    
    "relUrl": "/Activities/Module03%20Activity/"
  },"4": {
    "doc": "Weather Station Observer Pattern Activity Handout",
    "title": "Weather Station Observer Pattern Activity Handout",
    "content": "This project will give you practice in coding using the observer design pattern. Start by downloading the starter code. To run it on your computer, run npm install to fetch the dependencies for the project, and then run npm run demo, which should produce the output like the following: . Current conditions: 80F degrees and 65% humidity Avg/max/min temperature = 80/80/0 Heat Index: 82.95535063710001 Forecast: Improving weather on the way! Current conditions: 82F degrees and 70% humidity Avg/max/min temperature = 81/82/0 Heat Index: 86.90123306385205 Forecast: Watch out for cooler, rainy weather Current conditions: 78F degrees and 90% humidity Avg/max/min temperature = 80/82/0 Heat Index: 83.64967139559604 Forecast: More of the same . There is a lot to be improved from this design. Modify this code so that it uses the observer pattern, with each of the various display classes as the observers, and the WeatherData as the subject object. A high-level sketch of this design is: . | Create a WeatherDataObserver interface, which defines your update method | In WeatherData, create an observers array in WeatherData along with methods to register and de-register observers. Add code to notify the observers of updates when the weather data updates. | Modify each of CurrentConditionsDisplay, ForecastDisplay, HeatIndexDisplay and StatisticsDisplay to be implementors of the new observer interface. These display classes should display their information whenever the weather data is updated. | Modify WeatherStation, so that it creates the XXXDisplays, and subscribes them to the WeatherData | Update WeatherData.measurementsChanged to notify its observers of the update | Compare the output of your new program to the output you got by running the original version. Are the lines printed in the same order? Why or why not? | Can you modify the code so that the various XXXDisplay classes are all implementations of the same interface? Why might or might not this be a good idea? | . When you are done, run npm run zip to create a zip archive with your code. This activity is based on the running example in Chapter 2 of “Head First Design Patterns, 2nd Edition” by Robson and Freeman. ",
    "url": "/CS4530-Fall-2023/Activities/Module04%20Activity/",
    
    "relUrl": "/Activities/Module04%20Activity/"
  },"5": {
    "doc": "Async Activity",
    "title": "Simple Activity using async/await",
    "content": "Learning Objectives for this activity: . | Practice applying asynchronous programming concepts: promises, async/await | Experiment with applying different ordering constraints in asynchronous code | . ",
    "url": "/CS4530-Fall-2023/Activities/Module05%20Activity/#simple-activity-using-asyncawait",
    
    "relUrl": "/Activities/Module05%20Activity/#simple-activity-using-asyncawait"
  },"6": {
    "doc": "Async Activity",
    "title": "Overview",
    "content": "In this activity, you will experiment with asynchronous programming constructs in TypeScript. Before you get started . Be sure to review the code examples discussed during the lecture. You can find the source code linked at the module page. Getting started . Download starter Code Run npm install to download the dependencies for this project, and then open it in your IDE of choice. Run npm run client to run the client as-is, the output should be something like: . Creating a student Import grades completed, and returned: [ { \"student\": { \"studentID\": 17, \"studentName\": \"test student\" }, \"grades\": [ { \"course\": \"demo course\", \"grade\": 100 } ] } ] . Stringing together many async calls: bulk importing grades . Your task is to write a new, async function, importGrades, which takes in input of the type ImportTranscript[]. importGrades should create a student record for each ImportTranscript, and then post the grades for each of those students. After posting the grades, it should fetch the transcripts for each student and return an array of transcripts. You should implement importGrades in the file examples.ts - note that there is already a function stub there. As you get started, examine the transcript server client in client.ts, and take note of the API calls that are available to you. Here is the type definition for ImportTranscript and its dependencies: . type ImportTranscript = { studentName: string; grades: CourseGrade[]; }; type CourseGrade = { course: Course, grade: number }; type Course = string; . Example input: . [ { studentName: \"Avery\", grades: [{course: \"Software Engineering\", grade: 100}, {course: \"Chemistry\", grade: 70}], }, { studentName: \"Ripley\", grades: [{course: \"Underwater Basket Weaving\", grade: 100}, {course: \"Kayaking\", grade: 90} ] } ] . Implement this three ways: . | Insert a student, insert each of their grades (in order), then insert the next student, then their grades, etc. until all students are inserted, then fetch transcripts | Insert a student, then insert each of their grades (in order), then fetch their transcript. Do this set of operations asynchronously (concurrently) for all students | Insert a student, then insert each of their grades asynchronously (concurrently). After all students have all of their grades submitted, fetch all fo the transcripts asynchronously (concurrently) | . ",
    "url": "/CS4530-Fall-2023/Activities/Module05%20Activity/#overview",
    
    "relUrl": "/Activities/Module05%20Activity/#overview"
  },"7": {
    "doc": "Async Activity",
    "title": "Async Activity",
    "content": " ",
    "url": "/CS4530-Fall-2023/Activities/Module05%20Activity/",
    
    "relUrl": "/Activities/Module05%20Activity/"
  },"8": {
    "doc": "React",
    "title": "React Activity - Todo Tracker",
    "content": "This activity is designed to give you practice with React. You will enhance the ToDo app that was discussed in lecture. Steps . To get started, download the starter Code. Run the command npm install, and then npm run dev. The development server should start, and If you open your browser it will start running the app in app/page.tsx If your browser does not open up in the todo app, modify app/page.tsx to point to ./Apps/ToDoApp . In the ToDoApp, make the following three enhancements: . | Currently the “priority” field will accept any value. Modify it so that the priority must be a number. (Hint: NumberInput is your friend) | Add a button that will sort the todo items by priority, lowest number first | Add an entry field that will take a number and delete all the todo items with priorities greater than that number. (We are assuming that priority 1 means the thing that has to be done first.) | . When you are done, submit your work as required by your instructor. This may vary from section to section. ",
    "url": "/CS4530-Fall-2023/Activities/Module07%20React%20Activity/#react-activity---todo-tracker",
    
    "relUrl": "/Activities/Module07%20React%20Activity/#react-activity---todo-tracker"
  },"9": {
    "doc": "React",
    "title": "React",
    "content": " ",
    "url": "/CS4530-Fall-2023/Activities/Module07%20React%20Activity/",
    
    "relUrl": "/Activities/Module07%20React%20Activity/"
  },"10": {
    "doc": "Working with REST / OpenAPI",
    "title": "REST Transcript Activity",
    "content": "In this activity, you will use TSOA to build a REST client for our transcript database. As usual, download the starter code and run npm install. Then, run npm start to generate the OpenAPI specification, server boilerplate, and start the development server. This command will automatically reload the server as you change files in this project. To stop the server, press control-C in the terminal. Once you see the message “Listening on 8081”, you can access this URL in your browser: http://localhost:8081/docs/#/transcript . You should now see a “Swagger” transcript-server-openapi documentation page, with a few API endpoints defined. Expand the “GET /transcripts” endpoint, click “Try it out”, and then “Execute”. Now, the field “Response Body” should have text in it like: . [ { \"student\": { \"studentID\": 1, \"studentName\": \"avery\" }, \"grades\": [ { \"course\": \"DemoClass\", \"grade\": 100 }, { \"course\": \"DemoClass2\", \"grade\": 100 } ] }, . This demonstrates that this endpoint of your REST API is functional. In the rest of the activity, you will implement the remainder of the routes. Details are in the README page of the starter code. ",
    "url": "/CS4530-Fall-2023/Activities/Module10%20REST%20Activity/#rest-transcript-activity",
    
    "relUrl": "/Activities/Module10%20REST%20Activity/#rest-transcript-activity"
  },"11": {
    "doc": "Working with REST / OpenAPI",
    "title": "Working with REST / OpenAPI",
    "content": " ",
    "url": "/CS4530-Fall-2023/Activities/Module10%20REST%20Activity/",
    
    "relUrl": "/Activities/Module10%20REST%20Activity/"
  },"12": {
    "doc": "Test Adequacy",
    "title": "Test Adequacy Activity",
    "content": "We will gain experience improving test suites using two adequacy criteria: line coverage and mutation coverage. The instructions reference line numbers in transcriptManager.ts. Do not change that file while you are following along, or else you may find that the line referenced do not match what you see. As usual, download the starter code and run npm install. Then, follow the instructions given in the README.md file . ",
    "url": "/CS4530-Fall-2023/Activities/Module11%20Activity/#test-adequacy-activity",
    
    "relUrl": "/Activities/Module11%20Activity/#test-adequacy-activity"
  },"13": {
    "doc": "Test Adequacy",
    "title": "Test Adequacy",
    "content": " ",
    "url": "/CS4530-Fall-2023/Activities/Module11%20Activity/",
    
    "relUrl": "/Activities/Module11%20Activity/"
  },"14": {
    "doc": "CI/CD for Covey.Town",
    "title": "Continuous Development Pipelines for Covey.Town",
    "content": "In this activity, you will configure a continuous development pipeline using GitHub Actions and Render.com. Our pipeline will use GitHub Actions to build and test your Covey.Town fork, and use Render.com to deploy the application. Only one member of each team needs to do these steps - the resulting deployment will be shared by the whole team. ",
    "url": "/CS4530-Fall-2023/activities/continuous-development#continuous-development-pipelines-for-coveytown",
    
    "relUrl": "/activities/continuous-development#continuous-development-pipelines-for-coveytown"
  },"15": {
    "doc": "CI/CD for Covey.Town",
    "title": "Pre-requisites",
    "content": "There are two pre-requisites for this activity: you must have a GitHub.com repository generated and you must have a Twilio account. Creating a GitHub Repository . Your team’s development must take place within a private GitHub repository in our GitHub Classroom. To create your repository, each member of your team should follow these instructions: . | Sign in to GitHub.com, and then use our invitation to create a repository with the covey.town codebase. Check to see if one of your groupmates has created a group already - if so, select it to join it. Otherwise, create a repo using the following format fall23-team-project-group-xyy where you should enter your group number (e.g. “Group-XYY”) as the team name where X is your section number and YY is your group number. | Check your email for the invitation to join the repo. After that, refresh the page, and it will show a link to your new repository, for example: https://github.com/neu-cs4530/fall23-team-project-group-xyy. Click the link to navigate to your new repository. This is the repository you will use for the project. | . This repository will be private, and visible only to your team and the course staff. After the semester ends, you are welcome to make it public - you have complete administrative control of the repository. If you run into the error “refusing to allow an OAuth App to create or update workflow” when trying to push to GitHub, the fix is to update your saved authentication credentials for GitHub. For instance, you can follow these instructions to update your credentials in the MacOS Keychain. If all else fails, you can connect to GitHub with SSH instead of HTTPS, which will also solve this problem. This error seems to only occur when pushing a change to the GitHub Actions configuration file, so you could also side-step the problem by having a team mate push this change to GitHub instead (who may not run into this issue). Creating a Twilio account and recording the credentials . If you have not configured a Twilio account yet, follow these instructions to set one up: . | Go to Twilio’s website and sign up for an account. You do not need to provide a credit card to create a trial account, but will need to provide a cell phone number. a. When you create your account, to the question “Which Twilio product are you here to use”, answer “Video”, to “What do you plan to build…” answer “Other”, to “Preferred Language” select JavaScript, and to “Would you like Twilio to host your code?” select “No”. (It is OK to select other answers, but selecting these will bring you directly to the “programmable video” part of Twilio’s admin console. | Create an API Key: Select the “Account” menu from the top toolbar, and then select “API keys &amp; tokens”. If prompted, re-enter your password. | Take note of the “Live Credentials” in the box lower on this page. The “Account SID” and “Auth token” will be necessary for step 5. | Click “Create new API key”. Enter any descriptive name that you would like for the “friendly name”, and use the other default settings (US region, “standard” key type). Save the “SID” (this will be referenced later as the TWILIO_API_KEY_SID) and the “Secret” (this will be referenced later as the TWILIO_API_KEY_SECRET). You’ll need this for your local development environment. You can share a single Twilio account with all of the members in your team (sharing the .env file), but please be careful to avoid posting the contents of your .env file publicly anywhere - someone else might find your credentials and run out all of the free minutes on your account. To set up GitHub Actions and Heroku, we’ll need the values from your .env file - so be sure to get them working before proceeding. | Create a .env file in the services/townService directory, setting the values as follows: | . | Config Value | Description | . | TWILIO_ACCOUNT_SID | Visible on your twilio account dashboard. Starts with AC… | . | TWILIO_API_KEY_SID | The SID of the new API key you created. Starts with SK… | . | TWILIO_API_KEY_SECRET | The secret for the API key you created. | . | TWILIO_API_AUTH_TOKEN | Visible on your twilio account dashboard. | . You should now be able to start the backend and fronted in your local development environment and have functioning video chat. ",
    "url": "/CS4530-Fall-2023/activities/continuous-development#pre-requisites",
    
    "relUrl": "/activities/continuous-development#pre-requisites"
  },"16": {
    "doc": "CI/CD for Covey.Town",
    "title": "Set up Render.com for the backend towns service",
    "content": "We will configure GitHub Actions to automatically deploy the site to Render.com, after the tests have passed. This way, you can have a publicly available version of your backend service, which will automatically update with any changes that you push to Git. Note that it is possible to set up Heroku to automatically deploy every new change that you push to GitHub (without setting up GitHub Actions). Instead, we’ll configure our GitHub Actions pipeline to deploy to Heroku only if our test suite passes. | Go to Render.com and create an account that is linked to the same GitHub account that you used to create your fork of the starter code. | After signing in, create a new app by clicking the “new” button. Select “Web Service” as the type of the app. | For how to deploy the service, select “Build and deploy from a Git repository,” and click “Next” | Use the “Connect a repository” picker to select your fork of the starter code. Click next. | Configure the service: . | Choose a name for your app that is somewhat descriptive - it will become part of the URL that you’ll use to access the service | Leave region and branch at their default values | For “root directory” enter townService | Select “Node” as the “runtime” | For “build command”, enter npm install &amp;&amp; npm run prestart | For “start command”, enter npx ts-node src/Server.ts | Select the “Free” instance type | Click “Advanced” to expand the advanced settings | Click “Add environmental variable” four times to create the four twilio environmental variables to match those that you put in your local .env file. For example, add the key TWILIO_ACCOUNT_SID and set the value to be the token that you created (starts with AC…) | Click through to create the service. | . | Wait for the service to build and deploy. | To confirm that your service is successfully deployed, try to visit it in your browser. Use the URL that is displayed at the top of the Render.com settings page for the service (for example, https://covey-deployment-example.onrender.com). Append towns to the URl, and visit it in your browser (e.g. https://covey-deployment-example.herokuapp.com/towns). After a short delay, you should see the response []. | . ",
    "url": "/CS4530-Fall-2023/activities/continuous-development#set-up-rendercom-for-the-backend-towns-service",
    
    "relUrl": "/activities/continuous-development#set-up-rendercom-for-the-backend-towns-service"
  },"17": {
    "doc": "CI/CD for Covey.Town",
    "title": "Set up Render.com for the frontend application",
    "content": "The last step to our continuous development pipeline will be to automatically deploy our frontend to Render.com. Render.com will create an optimized production build of your frontend (by running npm run build) and host it in their globally-distributed content delivery network. | After following the instructions to set up the townService on Render.com above, create a new static site on Render.com. Connect it to the same team repository that you are using for the townervice. | Configure the site: . | Choose a name for your app - this will become part of the URL that you’ll use to access the application | Leave branch at main, and root directory blank | For build command, enter npm install &amp;&amp; cd frontend &amp;&amp; npm run build &amp;&amp; npm run export | For publish directory, enter frontend/out | Click “Advanced” to expand the advanced settings | Click “Add environmental variable” and add a variable with the key NEXT_PUBLIC_TOWNS_SERVICE_URL, setting the value to be the URL of your townService (e.g. https://covey-deployment-example.onrender.com) | Click “Create static site” to create the site. | . | Render.com will take several minutes to build your site. Once it is deployed, visit the site and confirm that it’s working. If you see an error in the JavaScript log like process is not defined, this indicates that the site was not built with the NEXT_PUBLIC_TOWNS_SERVICE_URL variable set - confirm that it is correctly set, and then rebuild the site on Render.com. | . ",
    "url": "/CS4530-Fall-2023/activities/continuous-development#set-up-rendercom-for-the-frontend-application",
    
    "relUrl": "/activities/continuous-development#set-up-rendercom-for-the-frontend-application"
  },"18": {
    "doc": "CI/CD for Covey.Town",
    "title": "Alternative to render.com",
    "content": "If you run into any problems with render.com, you are welcome to use the instructions below as alternative. Please note that these will require you to enter your credit card info even for free student usage. For this, you will be working with Heroku and Netlify. Set up Heroku . We will configure GitHub Actions to automatically deploy the backend rooms service to Heroku, after the tests have passed. This way, you can have a publicly available version of your backend service, which will automatically update with any changes that you push to Git. Note that it is possible to set up Heroku to automatically deploy every new change that you push to GitHub (without setting up GitHub Actions). Instead, we’ll configure our GitHub Actions pipeline to deploy to Heroku only if our test suite passes. | Enroll for the Student Github developer pack and choose “Get student benefits”. Follow the steps as asked after doing this. It generally takes upto 2 business days or more to get the enrollment confirmation from Github. | Go to Heroku.com and create an account, or sign in if you already have one using the email id same as the one used for Github account. | Enroll in the Heroku for students offer, if you have not already. This would require you to have already enrolled in the Github student developer pack. You will need to complete 3 steps which involves adding a credit card for receiving the platform credits which then can be used for creating apps. | After receiving the confirmation of the enrollment in you mail box, the platform credits will be reflected in your billing section in your Heroku account in a few hours. Do not create an app before this. | After signing in, create a new app. Choose a name for your app that is somewhat descriptive - it will become part of the URL that you’ll use to access the service. Click “Create app” (no need to go through “Add to pipeline…”). | After creating your app on Heroku, open the app’s settings page, revealing a page that looks like this: | Click “Reveal Config Vars”, and enter the 4 twilio configuration variables from your .env file (the same 4 that you set up on GitHub Actions). Heroku’s “Config Vars” are the way that we tell Heroku what variables to use for .env without having to commit that file into the (publicly viewable) repository. Your configuration settings on Heroku should look like this now: | Before navigating away from this settings page, scroll down to “Domains”, and take note of the address that Heroku has provided for your app. This should say something like “Your app can be found at https://covey-deployment-example.herokuapp.com/”. | Retrieve your personal Heroku API key. From Heroku go to “Manage Account” (click on the profile menu on the top right of the page and then click “Account Settings”. Scroll down to “API Key” and click “Reveal”. Copy this key, you’ll use it in the next step. | Return to the GitHub Settings -&gt; Secrets -&gt; Actions pane, and add a new repository secret: HEROKU_API_KEY, setting the value to the exact string that you copied from “API Key” in the last step. Add the secret HEROKU_APP_NAME (in this example, our app name is covey-deployment-example), set to the name that you choose for your Heroku app in step 2. Add the secret HEROKU_EMAIL, set to the email address that you used when you created your Heroku account. Even though these last two values aren’t secret per-say, configuring them in this way keeps them out of the config files, so you won’t run into merge conflicts with our upstream branch (which would have a main.yml file with our own settings in it). | Update the CI workflow (the file .github/workflows/main.yml). The starter code has the Heroku deploy commented out: uncomment it. If you see the line if: github.ref == 'refs/heads/master' in the file, update it to match as below (refs/heads/main). | Return to your GitHub Actions page, and the detail view for the most recent build - retrigger it, so that it runs again. Now that we have the Heroku secrets installed, we expect the “Deploy to Heroku” aspect of the deployment job to pass, although the “deploy to netlify” task will still fail. Here is the segment of the GitHub Actions configuration file that deploys our app to Heroku: . deploy: if: github.ref == 'refs/heads/main' needs: build-and-test runs-on: ubuntu-latest steps: - uses: actions/checkout@v2 - uses: akhileshns/heroku-deploy@v3.12.12 # Deploy to Heroku action with: heroku_api_key: ${{secrets.HEROKU_API_KEY}} heroku_app_name: ${{secrets.HEROKU_APP_NAME}} heroku_email: ${{secrets.HEROKU_EMAIL}} . | To confirm that your service is successfully deployed, try to visit it in your browser. Use the URL that you noted in step 5 (“Your app can be found at https://covey-deployment-example.herokuapp.com/”). Append towns to the URl, and visit it in your browser (e.g. https://covey-deployment-example.herokuapp.com/towns). After a short delay, you should see the response []. | . Set up Netlify . Note: Students will need to work with their assigned TA to create the project and receive invitations for all team members. Be sure to create your account using your @northeastern.edu email (which might require you to “signup” for a Netlify account with that email instead of sign in with GitHub). The last step to our continuous development pipeline will be to automatically deploy our frontend to Netlify. Netlify will create an optimized production build of your frontend (by running npm run build) and host it in their globally-distributed content delivery network. Netlify will also automatically build an deploy previews of pull requests on your repository. | Use the invitation that you received to your @northeastern.edu account to create an account on Netlify and join our organization. Netlify no longer offers a free product for private repositories - you will need to use our organization to create your site | After logging in, select the site that corresponds to your team name, and then click “Deploy your site” followed by “Deploy Settings.” Select “Link repository” and follow the prompts to connect Netlify with GitHub. Choose the “neu-cs4530” organization (you might need to click “Add another organization” in the dropdown to find it, and then select your repository. Leave “branch to deploy” as “main”. Leave the base directory unset, and set the build command to CI= npm install &amp;&amp; cd frontend &amp;&amp; npm run-script build, and the publish directory to frontend/build. Click deploy site. | Click on “Site Settings” and scroll down to “Environment”. This is where we define the .env variables that Netlify should use (without needing to put .env in a publicly viewable place). Click “Edit variables” and add a single variable: REACT_APP_TOWNS_SERVICE_URL should be set to your heroku server name (https://yourapp-name.herokuapp.com, find in heroku “settings” page for your app). Click save. | The very first deploy that was triggered will not have this environmental variable set, and hence the resulting build won’t actually be functional. Cancel the build if it is still in progress, and then click “trigger build” to trigger a new build. Once you confirm that it builds correctly, it will always auto-build and deploy without needing this intervention. | Netlify will take several minutes to build your site. From the “Deploys” view of Netlify’s control panel, you can see the status of each build. Once you have a successful build, it will show a URL where your site is published (something like https://fall-23-team-project-group-999.netlify.app). Visit the site and confirm that it’s working. If you see an error in the JavaScript log like process is not defined, this indicates that the site was not built with the REACT_APP_TOWNS_SERVICE_URL variable set - confirm that it is correctly set, and then rebuild the site on Netlify. | . ",
    "url": "/CS4530-Fall-2023/activities/continuous-development#alternative-to-rendercom",
    
    "relUrl": "/activities/continuous-development#alternative-to-rendercom"
  },"19": {
    "doc": "CI/CD for Covey.Town",
    "title": "CI/CD for Covey.Town",
    "content": " ",
    "url": "/CS4530-Fall-2023/activities/continuous-development",
    
    "relUrl": "/activities/continuous-development"
  },"20": {
    "doc": "Announcements",
    "title": "Announcements",
    "content": " ",
    "url": "/CS4530-Fall-2023/announcements/",
    
    "relUrl": "/announcements/"
  },"21": {
    "doc": "Announcements",
    "title": "Information about Project Final Deliverables, and Posters/Demos",
    "content": "Nov 17 &middot; 0 min read Please don’t forget to review final project deliverables page published on course website. This include grading rubrics and other details related to the submission of the final project (i.e., code/testing, report, posters and demos). Canvas assignments for these are also published. In addition, each instructor has provided a list of expectations for the final demos / presentations. Please be sure to review these quickly. ",
    "url": "/CS4530-Fall-2023/announcements/",
    
    "relUrl": "/announcements/"
  },"22": {
    "doc": "Announcements",
    "title": "Instructions to Create Project Repos Now Available, Information about Midterm Exam",
    "content": "Oct 27 &middot; 1 min read We have published instructions to help you create github repositories for your projects. Once you create your repos, you will also get access to the starter code for the project. Instructions will also guide you to set up CI/CD Pipeline for your projects. This is now assigned as Module 14 Activity on Canvas. Midterm exam is scheduled for the second half of next Week (i.e., on Nov 1-3, depending on when your class meets). For all in-person sections, all students are expected to be present in the classroom to complete the exam. For the online section, exam will also be given during the regular class time. Please contact your instructor {by email} immdediately if you need any accommodation. As part of the exam review, we have provided some resources on Canvas (under “Notes and Videos” page accessible through Modules link). Please be sure to review those! . ",
    "url": "/CS4530-Fall-2023/announcements/",
    
    "relUrl": "/announcements/"
  },"23": {
    "doc": "Announcements",
    "title": "Software Development Process",
    "content": "Oct 10 &middot; 1 min read As part of software development process, each team is expected to use a structured development process, including pull requests, code reviews, etc. Each team will also submit sprint reports, individual surveys, and have weekly meetings with TA Mentor. The development process started last week (as your develop your project plan) and the required submissions will start this week (These submissions will be for week 6, 8-13). Here are important submissions to remember: . | Every week all members of a team are expected to meet with their mentor for a regularly scheduled meeting. Weekly Canvas assignments will help track your attendance for these meetings. | Every week each student is expected to complete one (Confidential, Peer Evaluation) Survey. The link can be found under the Canvas assignment which will help track if you completed the survey or not. | At the end of each sprint, each team will submit a sprint report (and retrospective) through a Canvas assignment. | TAs will also review your github commits, PRs, code reviews regularly and will keep an eye on appropriate division of labor within the project team. They will also provide you a weekly assessment of your work. | . These assignments count towards “project process” part of the project which is worth 20% of the overall project grade. ",
    "url": "/CS4530-Fall-2023/announcements/",
    
    "relUrl": "/announcements/"
  },"24": {
    "doc": "Announcements",
    "title": "Individual Project Deliverable 2 is Now Available",
    "content": "Sep 27 &middot; 0 min read The second and (final!) individual project deliverable is now released, and will be due on Wednesday, Oct 18 at 11am ET. We strongly encourage you to read through the assignment soon, so that you can begin to formulate a plan of attack to complete this assignment. ",
    "url": "/CS4530-Fall-2023/announcements/",
    
    "relUrl": "/announcements/"
  },"25": {
    "doc": "Announcements",
    "title": "Team Formation Survey is Now Available",
    "content": "Sep 20 &middot; 0 min read Please complete this Team Formation Survey to help us organize you into a team for the term project. EVERY STUDENT must fill this form out by 11am on Wednesday 9/27/2023, or risk being placed in a random team. ",
    "url": "/CS4530-Fall-2023/announcements/",
    
    "relUrl": "/announcements/"
  },"26": {
    "doc": "Announcements",
    "title": "Individual Project Deliverable 1 Posted",
    "content": "Sep 6 &middot; 0 min read The first individual project deliverable is now available. This deliverable is due by September 20th at 11am ET. Your work will be submitted on Autograder.io which can be accessed through neu.autograder.io. Please note the autograding script will impose a strict rate limit of 5 submissions per 24 hours. This limit exists to encourage you to start early on this assignment. Feel free to use piazza to ask questions and use office hours if you need help. We have 55 hours of scheduled TA office hours per week starting tomorrow. ",
    "url": "/CS4530-Fall-2023/announcements/",
    
    "relUrl": "/announcements/"
  },"27": {
    "doc": "Announcements",
    "title": "Welcome to CS4530 - Fall 2023",
    "content": "Sep 1 &middot; 1 min read On behalf of the entire instructional team (all 2 instructors and 11 TAs), welcome to the Fall 2023 edition of CS 4530! This website will contain all of the lectures, assignments and tutorials for the class. Our Canvas site contains your gradebook as well as single-sign-on links to Piazza (for discussion), instructions for submitting assignments and replicates much of the material on the class website. In advance of the first week of class, we’ve shared the calendars for each section, the first two lectures, and tutorials on installing your IDE, Typescript, and unit testing with Jest. The schedule of office hours and instructions for the first individual project deliverable will be posted at the start of the semester. We are excited to meet you all next week! . ",
    "url": "/CS4530-Fall-2023/announcements/",
    
    "relUrl": "/announcements/"
  },"28": {
    "doc": "Announcements",
    "title": "Initial Website Launched",
    "content": "Aug 15 &middot; 0 min read Welcome to the course website for CS4530, Fall 2023! Over the coming weeks, we will be populating this website (and Canvas) with more information about the course. ",
    "url": "/CS4530-Fall-2023/announcements/",
    
    "relUrl": "/announcements/"
  },"29": {
    "doc": "Assignments",
    "title": "Assignments",
    "content": " ",
    "url": "/CS4530-Fall-2023/assignments/",
    
    "relUrl": "/assignments/"
  },"30": {
    "doc": "Demos for Sections 2, 4, 7",
    "title": "Specifications for Fall 2023 Live Demos / Presentations (Sections 2, 4, &amp; 7 - Prof. Bhutta)",
    "content": "Each group will present a live demo to show the feature that they have added to Covey.Town for the final project (the demo MUST be from hosted website, NOT from localhost). The schedule of these demos will be discussed/finalized during the lecture. You will have 9 minutes maximum (8 minutes to setup and present. 1 minute for questions and everything else). You will lose points if your demo goes over 8 minutes. Please rehearse it and time yourself (best to keep it to 7 minutes or less). Attendance is REQUIRED for these demos. Your presentation needs to include the following: . | description of feature(s) implemented (no more than 1 slide) - perhaps compare with what was proposed. | Tech stack and/or list of other/external components used (no more than 1 slide) | short summary of overall contribution by each member (no more than 1-2 sentences per member); | What percentage of overall contribution was made by each member (perhaps using weekly peer contribution scores) | estimated number of hours spent on the project by each member (for overall project); | what challenges were faced and how did you overcome them? Discuss any deviations from the proposed plan? | . During your presentation, you might consider following this order: introduction of project idea/user stories follow by live demo, then talk about above items in an appropriate order. You should include your email address and any other related info (i.e., github repo link, hosted site link, etc). You will also submit a copy of your presentation (pptx/pdf file, not link) on Canvas. ",
    "url": "/CS4530-Fall-2023/assignments/sec-247-demos#specifications-for-fall-2023-live-demos--presentationssections-2-4--7---prof-bhutta",
    
    "relUrl": "/assignments/sec-247-demos#specifications-for-fall-2023-live-demos--presentationssections-2-4--7---prof-bhutta"
  },"31": {
    "doc": "Demos for Sections 2, 4, 7",
    "title": "Grading Rubric:",
    "content": "Your final Poster and Demos are worth 4% of the overall course. Poster will be worth 1% and will be graded based on whether you submitted it on time or not. Demos will be worth 3% and will be graded using the following criteria: Each group will evaluate each others’ demos and will assign scores (Instructor and TAs will do the same). Your final demo score will be calculated by combining all of these scores (equally weighted). However, you will not receive points for the demo if your group fails to submit copy of the presentation on Canvas or if you are not present for all presentations/demos during class. ",
    "url": "/CS4530-Fall-2023/assignments/sec-247-demos#grading-rubric",
    
    "relUrl": "/assignments/sec-247-demos#grading-rubric"
  },"32": {
    "doc": "Demos for Sections 2, 4, 7",
    "title": "Demos for Sections 2, 4, 7",
    "content": " ",
    "url": "/CS4530-Fall-2023/assignments/sec-247-demos",
    
    "relUrl": "/assignments/sec-247-demos"
  },"33": {
    "doc": "Demos for Section 6",
    "title": "Specifications for Fall 2023 Live Presentations (Sec 6, Prof. Wand)",
    "content": "Each group will present a live demo for the final project. You can imagine this as the live presentation that you would make if you were standing in front of your poster at a conference. Imagine your target audience as a recruiter for a software engineering role: your goal is to demonstrate that you have some experience working on some non-trivial software engineering project. We expect all students to attend the entire set of presentations. We will be taking attendance (via zoom logs). You will have 10 minutes maximum (9 minutes to setup and present. 1 minute for questions and everything else). You will lose points if your demo goes over 9 minutes. Please rehearse it and time yourself (best to keep it to 8 minutes)! . Your presentation may be a combination of narrated slides and live demonstration. Your slides may reuse materials from your poster. The live demonstration must be run on the hosted site, rather than on your local machine. Your presentation should include the following: . | A description of the feature you added | A live demonstration of your project, including all of the screenshots from your poster. | A summary of the technology stack and overall design decisions (this may also be taken from your poster) | Short summary of overall contribution by each member  | A summary of challenges were faced and how you overcame them (alternatively, how the project you delivered differed from the one you proposed). | . You should submit a copy of your pptx or pdf of your slides on Canvas. ",
    "url": "/CS4530-Fall-2023/assignments/sec-6-demos#specifications-for-fall-2023-live-presentationssec-6-prof-wand",
    
    "relUrl": "/assignments/sec-6-demos#specifications-for-fall-2023-live-presentationssec-6-prof-wand"
  },"34": {
    "doc": "Demos for Section 6",
    "title": "Grading Rubric:",
    "content": "Each of the elements above will be graded separately, with the following point value: . | A description of the feature you added (1pt) | A live demonstration of your project, including all of the screenshots from your poster. (5 pts) | A summary of the technology stack and overall design decisions (2 pts) | Short summary of overall contribution by each member (1 pt) | A summary of challenges were faced and how you overcame them (alternatively, how the project you delivered differed from the one you proposed). (1 pt) | . ",
    "url": "/CS4530-Fall-2023/assignments/sec-6-demos#grading-rubric",
    
    "relUrl": "/assignments/sec-6-demos#grading-rubric"
  },"35": {
    "doc": "Demos for Section 6",
    "title": "Demos for Section 6",
    "content": " ",
    "url": "/CS4530-Fall-2023/assignments/sec-6-demos",
    
    "relUrl": "/assignments/sec-6-demos"
  },"36": {
    "doc": "CS4530, Fall 2023",
    "title": "CS4530, Fall 2023: Fundamentals of Software Engineering",
    "content": " ",
    "url": "/CS4530-Fall-2023/#cs4530-fall-2023-fundamentals-of-software-engineering",
    
    "relUrl": "/#cs4530-fall-2023-fundamentals-of-software-engineering"
  },"37": {
    "doc": "CS4530, Fall 2023",
    "title": "Information about Project Final Deliverables, and Posters/Demos",
    "content": "Nov 17 &middot; 0 min read Please don’t forget to review final project deliverables page published on course website. This include grading rubrics and other details related to the submission of the final project (i.e., code/testing, report, posters and demos). Canvas assignments for these are also published. In addition, each instructor has provided a list of expectations for the final demos / presentations. Please be sure to review these quickly. Announcements . ",
    "url": "/CS4530-Fall-2023/",
    
    "relUrl": "/"
  },"38": {
    "doc": "CS4530, Fall 2023",
    "title": "Overview",
    "content": "Building, delivering and maintaining successful software products requires more than being good at programming. Software engineering encompasses the tools and processes that we use to design, construct and maintain programs over time. Software engineering has been said to consider the “multi person development of multi version programs.” Development processes that work well for a single developer do not scale to large or even medium-sized teams. Similarly, development processes that work well for quickly delivering a one-off program to a client cause chaos when applied to a codebase that needs to be maintained and updated over months and years. This class will begin to explore these tradeoffs throughout the entire software development lifecycle, with a particular focus on how these decisions affect the quality of the resulting software. This class will serve as an introduction to the field of software engineering, covering key topics such as: . | Requirements gathering and specification How to make sure that you build the product that your customer really wants | Designing code for reuse, for readability, and for scale How to avoid reinventing the wheel? What makes code readable? Where does performance fit into designs? When do we decide when to revisit old design decisions, and how do we replace them? Can we avoid the mistakes that past developers have made? | How to organize your development process to collaborate effectively How do we communicate our designs with others? How do we structure and coordinate development activities? How do we measure the performance of these processes, and tweak them over time? | How to ensure that your code works, is secure, and broadly speaking, “does the right thing” How do we measure different quality attributes like usability, scalability and performance? How do we minimize the cost of defects? How do we automatically test complex systems? Can we automatically prove the absence of some kinds of defects? | . ",
    "url": "/CS4530-Fall-2023/#overview",
    
    "relUrl": "/#overview"
  },"39": {
    "doc": "CS4530, Fall 2023",
    "title": "Course Outcomes",
    "content": ". | Students will be able to define and describe the phases of the software engineering lifecycle (requirements, design, implementation, testing, deployment, maintenance) | Students will be able to explain the role of key processes and technologies in modern software development. | Students will be able to productively apply instances of major tools used in elementary SE tasks. | Students will design and implement a portfolio-worthy software engineering project in a small team environment that can be publicly showcased to recruiters. | . Course Delivery . The course will be delivered in a “traditional” lecture style. Prof Wand’s section will be entirely virtual, and the other sections will be entirely on-the-ground, with no virtual participation option. You must attend the section for which you have registered, and you may not partner with students in other sections for the term project. | Section | Instructor | Meeting Time | Meeting Place | . | 2 | Prof Bhutta | MR 11:45 am - 1:25 pm | Shillman Hall 315 | . | 4 | Prof Bhutta | T 11:45 am - 1:25 pm &amp; R 2:50 pm - 4:30pm | Shillman Hall 415 | . | 6 | Prof Wand | W 6:00 pm - 9:20 pm | Online | . | 7 | Prof Bhutta | TF 3:25 pm - 5:05 pm | Forsyth Building 236 | . ",
    "url": "/CS4530-Fall-2023/#course-outcomes",
    
    "relUrl": "/#course-outcomes"
  },"40": {
    "doc": "CS4530, Fall 2023",
    "title": "Course Project",
    "content": "The assignments and project for this class are designed to mirror the experiences of a software engineer joining a new development team: you will be “onboarded” to our codebase, make several individual contributions, and then form a team to propose, develop and implement a new feature. The codebase that we’ll be developing on is a remote collaboration tool called Covey.Town. Covey.Town provides a virtual meeting space where different groups of people can have simultaneous video calls, allowing participants to drift between different conversations, just like in real life. Covey.Town is inspired by existing products like Gather.Town, Sococo, and Gatherly.IO — but it is an open source effort, and the features will be proposed and implemented by you! All implementation will take place in the TypeScript programming language, using React for the user interface. At the end of the semester, the instructors and TAs will evaluate all of the student projects, and select the best (in terms of usability, code quality, test suite quality, and overall design) to merge into the open source Covey.Town codebase on GitHub repository. No additional course credit will be awarded to these teams, but these students will have the opportunity to receive public recognition for their project (in the form of a pull request merged into our repository and acknowledgements in the project’s contributors list). The project will provide hands-on experience to complement the skills taught in this class, requiring students to be able to: . | Work effectively in a small team | Enumerate and prioritize development tasks | Propose, design, implement and test a new feature in an existing non-toy software application | Write code that their team members can read and review | Review teammates’ code | Analyze a proposed software architecture | Use relevant software tools, such as: . | TypeScript | Visual Studio Code (or similar IDE) | Git | Mocha and Jest | Twilio’s Programmable Video API | Postman | . | . Select projects from Spring 2022 are hosted in our project showcase. Acknowledgements . This class and its contents were inspired by Software Engineering courses at various institutions, including: . | Columbia’s Software Engineering Course, COMS W4156 | CMU’s Software Engineering Course, 17-313 | GMU’s Web App Development Course, SWE 432 | NCSU’s Software Engineering Course, CSC 326 and its iTrust term project, also Chris Parnin’s DevOps course. | Past iterations of CS4530 at Northeastern: Spring 2023, Fall 2022, Spring 2022, Spring 2021 | Past iterations of CS5500 at Northeastern, as prepared by Mike Weintraub, Mike Shah and Frank Tip. | . This website is built using Kevin Lin’s Just the Class Jekyll template. The term project, Covey.Town, is built using code from the Clowdr open source project. ",
    "url": "/CS4530-Fall-2023/#course-project",
    
    "relUrl": "/#course-project"
  },"41": {
    "doc": "CS4530, Fall 2023",
    "title": "CS4530, Fall 2023",
    "content": " ",
    "url": "/CS4530-Fall-2023/",
    
    "relUrl": "/"
  },"42": {
    "doc": "Individual Project 1",
    "title": "Objectives of this assignment",
    "content": "The objectives of this assignment are to: . | Get you familiar with the basics of TypeScript, VSCode, and the project codebase | Learn how to read and write code in TypeScript | Translate high-level requirements into code | Learn how to write unit tests with Jest | . ",
    "url": "/CS4530-Fall-2023/assignments/ip1#objectives-of-this-assignment",
    
    "relUrl": "/assignments/ip1#objectives-of-this-assignment"
  },"43": {
    "doc": "Individual Project 1",
    "title": "Getting started with this assignment",
    "content": "Before you begin, be sure to check that you have NodeJS 18.x installed, along with VSCode. We have provided a tutorial on setting up a development environment for this class Start by downloading the starter code. Extract the archive and run npm install to fetch the dependencies. Avery has provided you with some very basic sanity tests that you can extend for testing your implementation as you go. You can run these tests with the command npm test TicTacToe (note that many tests are expected to fail until you have begun to implement the assignment). ",
    "url": "/CS4530-Fall-2023/assignments/ip1#getting-started-with-this-assignment",
    
    "relUrl": "/assignments/ip1#getting-started-with-this-assignment"
  },"44": {
    "doc": "Individual Project 1",
    "title": "Grading",
    "content": "This submission will be scored out of 100 points, 90 of which will be automatically awarded by the grading script, with the remaining 10 manually awarded by the course staff. Your code will automatically be evaluated for linter errors and warnings. Submissions that have any linter errors will automatically receive a grade of 0. Do not wait to run the linter until the last minute. To check for linter errors, run the command npm run lint from the terminal. The handout contains the same eslint configuration that is used by our grading script. Your code will be automatically evaluated for functional correctness by a test suite that expands on the core tests that are distributed in the handout. Your tests will be automatically evaluated for functional correctness by a process that will inject bugs into our reference solution: to receive full marks your tests must detect a minimum number of injected bugs. Each submission will be graded against the same set of injected bugs (repeated submissions will not receive new/different injected bugs). You will not receive detailed feedback on which injected bugs you do or do not find. The autograding script will impose a strict rate limit of 5 submissions per 24 hours. Submissions that fail to grade will not count against the quota. This limit exists to encourage you to start early on this assignment: students generally report that assignments like this take between 3-20 hours. If you start early, you will be able to take full advantage of the resources that we provide to help you succeed: office hours, discussion on Piazza — and the ability to have a greater total number of submission attempts. Your code will be manually evaluated for conformance to our course style guide. This manual evaluation will account for 10% of your total grade on this assignment. We will manually evaluate your code for style on the following rubric: . To receive all 10 points: . | All new names (e.g. for local variables, methods, and properties) follow the naming conventions defined in our style guide | There are no unused local variables | All public properties and methods (other than getters, setters, and constructors) are documented with JSDoc-style comments that describes what the property/method does, as defined in our style guide | The code and tests that you write generally follows the design principles discussed in week one. In particular, your design does not have duplicated code that could have been refactored into a shared method. | . We will review your code and note each violation of this rubric. We will deduct two points for each violation, up to a maximum of deducting all 10 style points. ",
    "url": "/CS4530-Fall-2023/assignments/ip1#grading",
    
    "relUrl": "/assignments/ip1#grading"
  },"45": {
    "doc": "Individual Project 1",
    "title": "Overview of Relevant Classes",
    "content": "The UML class diagram below shows the three main classes that you will be implementing for this deliverable (TicTacToeGameArea and TicTacToeGame) along with several relevant classes for additional context. An InteractableArea represents a region of the 2D map that the player can interact with - existing implementations of this interface include ConversationArea and ViewingArea. The new GameArea abstraction extends InteractableArea, adding state to track the current Game in the area and the history of past games using its GameResult array. Subclasses of GameArea must implement the handleCommand method of InteractableArea, which is how messages are passed from clients to the server. The base Game abstract class tracks the state of the game, including who is playing it. The abstract class includes the glue that allows the socket protocol to serialize the game state such that it can be sent from the server to clients. Implementors of the Game abstract class implement the methods applyMove, _join and _leave. %%{init: { 'theme':'forest', } }%% classDiagram class Game { +GameState state +GameInstanceID id ~Player[] _players ~GameResult _result + join(player: Player) + leave(player: Player) ~ _join(player: Player) ~ _leave(player: Player) + applyMove(move: GameMove) } class GameArea { ~Game _game ~GameResult _history } class TicTacToeGame { } class TicTacToeGameArea { } class InteractableArea { +string id ~Player[] _occupants +string[] occupantsByID +boolean isActive +BoundingBox boundingBox +add(player: Player) +remove(player: Player) +addPlayersWithinBounds(allPlayers: Player[]) +toModel() +contains(location: PlayerLocation) +overlaps(otherInteractable: Interactable) + handleCommand(command: InteractableCommand, player:Player) #_emitAreaChanged() } class GameResult { +GameInstanceID gameID +Map scores } GameArea o-- GameResult TicTacToeGame ..|&gt; Game TicTacToeGameArea ..|&gt; GameArea GameArea ..|&gt; InteractableArea GameArea o-- Game ",
    "url": "/CS4530-Fall-2023/assignments/ip1#overview-of-relevant-classes",
    
    "relUrl": "/assignments/ip1#overview-of-relevant-classes"
  },"46": {
    "doc": "Individual Project 1",
    "title": "Implementation Tasks",
    "content": "This deliverable has four parts; each part will be graded on its own rubric. You should complete the assignment one part at a time, in the order presented here. General Requirements: Implement your code only in the files specified: src/town/games/TicTacToeGame.ts, src/town/games/TicTacToeGame.test.ts and src/town/games/TicTacToeGameArea.ts. You should not install any additional dependencies. The autograder will ignore any other files that you modify, and will not install any dependencies that you add to the project. Task 1: Joining and Leaving the TicTacToeGame (24 points) . The TicTacToeGame class extends the base Game class, implementing the semantics of the game Tic-Tac-Toe. Avery has provided a definition for the types that will be used to represent the state of a TicTacToeGame - TicTacToeGameState. That type definition is reproduced below: . /** * Type for the state of a TicTacToe game * The state of the game is represented as a list of moves, and the playerIDs of the players (x and o) * The first player to join the game is x, the second is o */ export interface TicTacToeGameState { moves: ReadonlyArray&lt;TicTacToeMove&gt;; x?: PlayerID; o?: PlayerID; winner?: PlayerID; status: 'IN_PROGRESS' | 'WAITING_TO_START' | 'OVER'; } /** * Type for a move in TicTacToe * The row and column are 0-indexed, so the top left square is (0,0) and the bottom right square is (2,2) */ export interface TicTacToeMove { gamePiece: 'X' | 'O'; row: TicTacToeGridPosition; col: TicTacToeGridPosition; } export type TicTacToeGridPosition = 0 | 1 | 2; . As a gentle introduction to this abstraction, your first task is to implement the _join and _leave methods of TicTacToeGame. To implement these methods, you should not need to read any other parts of the codebase besides Game.ts. View the specification for these methods /** * Adds a player to the game. * Updates the game's state to reflect the new player. * If the game is now full (has two players), updates the game's state to set the status to IN_PROGRESS. * * @param player The player to join the game * @throws InvalidParametersError if the player is already in the game (PLAYER_ALREADY_IN_GAME_MESSAGE) * or the game is full (GAME_FULL_MESSAGE) */ protected _join(player: Player): void /** * Removes a player from the game. * Updates the game's state to reflect the player leaving. * If the game has two players in it at the time of call to this method, * updates the game's status to OVER and sets the winner to the other player. * If the game does not yet have two players in it at the time of call to this method, * updates the game's status to WAITING_TO_START. * * @param player The player to remove from the game * @throws InvalidParametersError if the player is not in the game (PLAYER_NOT_IN_GAME_MESSAGE) */ protected _leave(player: Player): void . Testing: Avery has provided you with some very simple (and incomplete) tests for _join and _leave. You can run these tests by running the command npx jest --watch TicTacToeGame.test, which will automatically re-run the tests as you update the file (note that tests for applyMove will also run - but you can ignore those at this point). You should improve the _join and _leave tests to check the entire specification. Please implement these additional tests in the file src/town/games/TicTacToeGame.test.ts. Grading for implementation tasks: . | _join: 6 points | _leave: 6 points | . Grading for testing tasks: . | _join: . | 6 points for detecting all 25 faults, or | 3 points for detecting 24 faults | . | _leave: 6 points | . Task 2: Tic-Tac-Toe Game Semantics (50 points total) . The next (and largest) task for this deliverable is to implement the method TicTacToeGame.applyMove, which applies a player’s move to the game. This method is responsible for validating the move, and updating the game state to reflect the move. Given the complexity of this method, you should anticipate creating (at least one) private, helper method to implement its logic. View the specification for this method /* * Applies a player's move to the game. * Uses the player's ID to determine which game piece they are using (ignores move.gamePiece) * Validates the move before applying it. If the move is invalid, throws an InvalidParametersError with * the error message specified below. * A move is invalid if: * - The move is on a space that is already occupied (use BOARD_POSITION_NOT_EMPTY_MESSAGE) * - The move is not the player's turn (MOVE_NOT_YOUR_TURN_MESSAGE) * - The game is not in progress (GAME_NOT_IN_PROGRESS_MESSAGE) * * If the move is valid, applies the move to the game and updates the game state. * * If the move ends the game, updates the game's state. * If the move results in a tie, updates the game's state to set the status to OVER and sets winner to undefined. * If the move results in a win, updates the game's state to set the status to OVER and sets the winner to the player who made the move. * A player wins if they have 3 in a row (horizontally, vertically, or diagonally). * * @param move The move to apply to the game * @throws InvalidParametersError if the move is invalid */ public applyMove(move: GameMove&lt;TicTacToeMove&gt;): void . Grading for implementation tasks: . | Applying moves: 8 points | Checking for invalid moves: 9 points | Handling game-ending moves: 11 points | . Grading for testing tasks: . | Applying moves: 6 points | Checking for invalid moves: . | 7 points for detecting all 35 faults | 4 points for detecting 34 faults | . | Handling game-ending moves: 9 points | . Task 3: Implement the TicTacToeGameArea (16 points total) . The TicTacToeGameArea receives InteractbleCommands from players who enter the area on their client. The main responsibility of this class is to interpet those commands, dispatching them as appropriate to the TicTacToeGame instance that it manages. Your final task is to implement the handleCommand method of TicTacToeGameArea. There are three types of commands that the TicTacToeGameArea will receive, which map directly to the three methods of TicTacToeGame that you implemented in the previous task. Avery has provided a complete test suite for handleCommand - you do not need to write any additional tests. View the specification for this methods /** * Handle a command from a player in this game area. * Supported commands: * - JoinGame (joins the game `this._game`, or creates a new one if none is in progress) * - GameMove (applies a move to the game) * - LeaveGame (leaves the game) * * If the command ended the game, records the outcome in this._history * If the command is successful (does not throw an error), calls this._emitAreaChanged (necessary * to notify any listeners of a state update, including any change to history) * If the command is unsuccessful (throws an error), the error is propagated to the caller * * @see InteractableCommand * * @param command command to handle * @param player player making the request * @returns response to the command, @see InteractableCommandResponse * @throws InvalidParametersError if the command is not supported or is invalid. Invalid commands: * - LeaveGame and GameMove: No game in progress (GAME_NOT_IN_PROGRESS_MESSAGE), * or gameID does not match the game in progress (GAME_ID_MISSMATCH_MESSAGE) * - Any command besides LeaveGame, GameMove and JoinGame: INVALID_COMMAND_MESSAGE */ public handleCommand&lt;CommandType extends InteractableCommand&gt;( command: CommandType, player: Player, ): InteractableCommandReturnType&lt;CommandType&gt; . Grading for implementation tasks: . | Handling JoinGame: 4 points | Handling GameMove: 6 points | Handling LeaveGame: 5 points | Handling invalid commands: 1 point | . ",
    "url": "/CS4530-Fall-2023/assignments/ip1#implementation-tasks",
    
    "relUrl": "/assignments/ip1#implementation-tasks"
  },"47": {
    "doc": "Individual Project 1",
    "title": "Submission Instructions",
    "content": "Submit your assignment to the instance of Autograder.io running at neu.autograder.io. Navigate to neu.autograder.io in your web browser, click the “Sign in” button, and log in with your Northeastern account. You should then see the course listed on the neu.autograder.io home page. Please contact the instructors immediately if you have difficulty accessing the course on Autograder.io. If you haven’t been added to the course roster yet, you can access the assignment page at this direct link. To submit your assignment: run the command npm run zip in the top-level directory of the handout. This will produce a file called covey-town-townService.zip. Submit that zip file on Autograder.io. Autograder.io will provide you with feedback on your submission, but note that it will not include any marks that will be assigned after we manually grade your submission for code style (these marks will remain hidden until it is graded). It may take several minutes for the grading script to complete. Autograder.io is configured to only provide feedback on at most 5 submissions per-24-hours per-student (submissions that fail to run or receive a grade of 0 are not counted in that limit). We strongly encourage you to lint and test your submission on your local development machine, and not rely on Autograder.io for providing grading feedback - relying on Autograder.io is a very slow feedback loop. To check for linter errors, run the command npm run lint from the terminal. The handout contains the same eslint configuration that is used by our grading script. Submission limit resets at 11am EST. ",
    "url": "/CS4530-Fall-2023/assignments/ip1#submission-instructions",
    
    "relUrl": "/assignments/ip1#submission-instructions"
  },"48": {
    "doc": "Individual Project 1",
    "title": "Individual Project 1",
    "content": "Welcome aboard to the Covey.Town team! We’re glad that you’re here and ready to join our development team as a new software engineer. We’re building an open source virtual meeting application, and are very happy to see that we have so many new developers who can help make this application a reality. By the end of the semester, you’ll be able to propose, design, implement and test a new feature for our project. We understand that some of you may have some web development experience, but don’t expect that most of you do, and hence, have created an individual project to help you get up to speed with our existing codebase and development environment. Covey.Town is a web application that consists of some code that runs in each client’s web browser, and also code that runs on a server. Users join the application in a “town”: a 2D arcade-style map with different rooms to explore. Each town is also a video call: when two players get close to each other, they can see and hear each other; there is also a text chat available within the town. In Winter of 2021, our lead software engineer, Avery, developed a prototype for Covey.Town, and since then, hundreds of students in this class have built on that codebase. The most recent class-wide effort added a concept called Poster Areas, allowing players to upload a poster which is then dispalyed and discussed in a special part of the town. Many student projects over the past few years (some of which are publicy showcased from Spring 2022 and from Fall 2022) involved creating games within Covey.Town. For example: students created implementations of soccer, blackjack, dance dance revolution and tic-tac-toe. After studying all of the student projects and their implementation challenges, our lead software engineer, Avery, has refactored Covey.Town, designing a new abstraction to make it easier to create games like these. Avery’s new abstraction, GameArea, is a region of the town that provides some core elements to allow players to play games within that area. The abstraction cuts across the entire technology stack: GameAreas exist in the 2D map and the application automatically tracks when players enter and exit them. By pressing the spacebar within an GameArea, the user can trigger an interaction with that area, which in turn can be easily used to display new content in the web app using React. A GameArea in one user’s browser can also emit events that are delivered in real-time to other players interacting with that same area. The GameArea provides common functionalities that all games might want to provide: allowing players to join and observe a game, as well as tracking a leaderboard. The objective for this semester’s individual project is to implement this new GameArea abstraction, with one concrete implementation: TicTacToeArea. The TicTacToeArea will implement the gameplay for the classic game, Tic-Tac-Toe. This implementation effort will be split across two deliverables. In this first deliverable, you will implement and test the core backend components for this feature, and in the second deliverable, you will implement and test the frontend components. ",
    "url": "/CS4530-Fall-2023/assignments/ip1",
    
    "relUrl": "/assignments/ip1"
  },"49": {
    "doc": "Individual Project 2",
    "title": "Change log",
    "content": ". | 10/13 Updated handout TicTacToeAreaController.test.ts to create the mock implementation of mockTownController.getPlayer method before TicTacToeAreaController’s constructor is called. To update your code without downloading the zip file, move the following piece of code from line 87 to line 36. mockTownController.getPlayer.mockImplementation(playerID =&gt; { const p = mockTownController.players.find(player =&gt; player.id === playerID); assert(p); return p; }); . | 10/11 Updated handout TicTacToeArea.test.tsx to correctly update gameAreaController.mockIsOurTurn in each relevant test. To update your code without downloading the entire zip file, simply add the line below to the ‘Updates whose turn it is when the game is updated’ and ‘Displays a message “Game in progress, {numMoves} moves in” and indicates whose turn it is when it is the other player's turn’ tests in TicTacToeArea.test.tsx. gameAreaController.mockIsOurTurn = false; . | 10/3: Updated handout TicTacToeArea.test.tsx to add the line gameAreaController.mockIsOurTurn = true;, which may be required to be set for your implementation of TicTacToeArea | 9/30: Updated handout TicTacToeBoard.test.tsx to add missing await calls on lines 234 and 243 (if missing, could cause the test runner to crash if the assertions failed) | 9/30: UpdatedUpdated handout TicTacToeAreaController.test.ts, adding a mock implementation of mockTownController.getPlayer, which you might or might not choose to use in your implementation (and without which the tests would fail). If you run into this issue and would like to directly update your code, that mock implementation is added to the bottom of ticTacToeAreaControllerWithProp, and is: mockTownController.getPlayer.mockImplementation(playerID =&gt; { const p = mockTownController.players.find(player =&gt; player.id === playerID); assert(p); return p; }); . | . ",
    "url": "/CS4530-Fall-2023/assignments/ip2#change-log",
    
    "relUrl": "/assignments/ip2#change-log"
  },"50": {
    "doc": "Individual Project 2",
    "title": "Objectives of this assignment",
    "content": "The objectives of this assignment are to: . | Investigate and understand a large, existing codebase | Write new TypeScript code that uses asynchronous operations | Write test cases that utilize mocks and spies | Write React components and hooks that make use of state | . ",
    "url": "/CS4530-Fall-2023/assignments/ip2#objectives-of-this-assignment",
    
    "relUrl": "/assignments/ip2#objectives-of-this-assignment"
  },"51": {
    "doc": "Individual Project 2",
    "title": "Getting started with this assignment",
    "content": "Start by downloading the starter code. Extract the archive and run npm install to fetch the dependencies. Configuring Jest and VSCode: If you would like to use the built-in Jest test runner for VSCode (where it shows the tests and their status in the sidebar), the easiest way to accomplish this for this project is to open just the “frontend” directory or just the “townService” directory in VSCode - not the top-level “ip2-handout” directory. If you have a quick-fix to make it work with the whole project at once, please feel free to share on Piazza and we will incorportate that here. NPM install failures: The libraries used for React require some native binaries to be installed – code written and compiled for your computer (not JavaScript). If you run into issues with npm install not succeeding, please try installing the following libraries using either Homebrew (if on Mac), apt-get, or your favorite other package manager: pixman, cairo, pkgconfig and pango. For example, run brew install pixman cairo pkgconfig pango. If you are on a newer Mac with an M1 or M2 chip, you may need to use arch -arm64 brew install pixman cairo pango. On Windows: Students have reported seeing the failure error /bin/bash: node: command not found upon npm install in the frontend directory. If you encounter this error, please try to delete the node_modules directory and re-run npm install in the frontend directory from a bash shell instead of a windows command prompt. Running the app: We strongly encourage you to interactively experiment as you develop by running the entire application in your development environment. See the instructions in README.md for how to run the app. ",
    "url": "/CS4530-Fall-2023/assignments/ip2#getting-started-with-this-assignment",
    
    "relUrl": "/assignments/ip2#getting-started-with-this-assignment"
  },"52": {
    "doc": "Individual Project 2",
    "title": "Grading",
    "content": "This submission will be scored out of 200 points, 180 of which will be automatically awarded by the grading script, with the remaining 20 manually awarded by the course staff. Your code will automatically be evaluated for linter errors and warnings. Submissions that have any linter errors will automatically receive a grade of 0. Do not wait to run the linter until the last minute. To check for linter errors, run the command npm run lint from the terminal. The handout contains the same eslint configuration that is used by our grading script. Your code will be automatically evaluated for functional correctness by a test suite that expands on the core tests that are distributed in the handout. Your tests will be automatically evaluated for functional correctness by a process that will inject bugs into our reference solution: to receive full marks your tests must detect a minimum number of injected bugs. Each submission will be graded against the same set of injected bugs (repeated submissions will not receive new/different injected bugs). You will not receive detailed feedback on which injected bugs you do or do not find. The autograding script will impose a strict rate limit of 5 submissions per 24 hours. Submissions that fail to grade will not count against the quota. This limit exists to encourage you to start early on this assignment: students generally report that assignments like this take between 3-20 hours. If you start early, you will be able to take full advantage of the resources that we provide to help you succeed: office hours, discussion on Piazza — and the ability to have a greater total number of submission attempts. Your code will be manually evaluated for conformance to our course style guide. This manual evaluation will account for 10% of your total grade on this assignment. We will manually evaluate your code for style on the following rubric: . To receive all 20 points: . | All new names (e.g. for local variables, methods, and properties) follow the naming conventions defined in our style guide | There are no unused local variables | All public properties and methods (other than getters, setters, and constructors) are documented with JSDoc-style comments that describes what the property/method does, as defined in our style guide | The code and tests that you write generally follows the design principles discussed in week one. In particular, your design does not have duplicated code that could have been refactored into a shared method. | . We will review your code and note each violation of this rubric. We will deduct four points for each violation, up to a maximum of deducting all 20 style points. ",
    "url": "/CS4530-Fall-2023/assignments/ip2#grading",
    
    "relUrl": "/assignments/ip2#grading"
  },"53": {
    "doc": "Individual Project 2",
    "title": "Implementation Tasks",
    "content": "This deliverable has four parts; each part will be graded on its own rubric. You should complete the assignment one part at a time, in the order presented here. General Requirements: Implement your code only in the files specified: . | Task 1: frontend/src/classes/interactable/TicTacToeAreaController.ts | Task 1: frontend/src/classes/interactable/TicTacToeAreaController.test.ts | Task 2: frontend/src/components/Town/interactables/TicTacToe/TicTacToeArea.tsx | Task 3: frontend/src/components/Town/interactables/TicTacToe/TicTacToeBoard.tsx | Task 4: frontend/src/components/Town/interactables/Leaderboard.tsx | . You should not install any additional dependencies. The autograder will ignore any other files that you modify, and will not install any dependencies that you add to the project. Task 1: The TicTacToeAreaController (30 points) . The TicTacToeAreaController is a class that is responsible for managing the state of a single TicTacToe game. It is responsible for communicating with the TownService backend. Frontend components will interact with the TicTacToeAreaController to get the current state of the game, and to send commands to the backend to update the game state. The TicTacToeAreaController also will emit events when the state of the game changes, so that frontend components can update their state accordingly. TicTacToeAreaController extends the base GameAreaController class. The base class tracks the game model (this._model), the set of players in the game (this.players), and the set of observers in the game (this.observers). It also provides methods for joining and leaving the game, as well as a base implementation of _updateFrom, which is responsible for updating the game state when the backend notifies the frontend of a change. Your first task is to implement each of the properties and methods of the TicTacToeAreaController class (frontend/src/classes/interactable/TicTacToeAreaController.ts). The specification for these properties and methods appears below: . View the specification for these methods { /** * Returns the current state of the board. * * The board is a 3x3 array of TicTacToeCell, which is either 'X', 'O', or undefined. * * The 2-dimensional array is indexed by row and then column, so board[0][0] is the top-left cell, * and board[2][2] is the bottom-right cell */ get board(): TicTacToeCell[][] /** * Returns the player with the 'X' game piece, if there is one, or undefined otherwise */ get x(): PlayerController | undefined /** * Returns the player with the 'O' game piece, if there is one */ get o(): PlayerController | undefined /** * Returns the player with the 'O' game piece, if there is one, or undefined otherwise */ get moveCount(): number /** * Returns the winner of the game, if there is one */ get winner(): PlayerController | undefined /** * Returns the player whose turn it is, if the game is in progress * Returns undefined if the game is not in progress */ get whoseTurn(): PlayerController | undefined /** * Returns true if it is our turn to make a move in the game * Returns false if it is not our turn, or if the game is not in progress */ get isOurTurn(): boolean /** * Returns true if the current player is a player in this game */ get isPlayer(): boolean /** * Returns the game piece of the current player, if the current player is a player in this game * * Throws an error PLAYER_NOT_IN_GAME_ERROR if the current player is not a player in this game */ get gamePiece(): 'X' | 'O' /** * Returns the status of the game. * Defaults to 'WAITING_TO_START' if the game is not in progress */ get status(): GameStatus /** * Returns true if the game is in progress */ public isActive(): boolean /** * Updates the internal state of this TicTacToeAreaController to match the new model. * * Calls super._updateFrom, which updates the occupants of this game area and * other common properties (including this._model). * * If the board has changed, emits a 'boardChanged' event with the new board. If the board has not changed, * does not emit the event. * * If the turn has changed, emits a 'turnChanged' event with true if it is our turn, and false otherwise. * If the turn has not changed, does not emit the event. */ protected _updateFrom(newModel: GameArea&lt;TicTacToeGameState&gt;): void /** * Sends a request to the server to make a move in the game. * Uses the this._townController.sendInteractableCommand method to send the request. * The request should be of type 'GameMove', * and send the gameID provided by `this._instanceID`. * * If the game is not in progress, throws an error NO_GAME_IN_PROGRESS_ERROR * * @param row Row of the move * @param col Column of the move */ public async makeMove(row: TicTacToeGridPosition, col: TicTacToeGridPosition) . Testing: Avery has provided you with tests for everything in TicTacToeController except for makeMove and _updateFrom. Please implement these additional tests in the file frontend/src/classes/interactable/TicTacToeAreaController.test.ts. You can run the tests by running the command npx jest TicTacToeAreaController in the frontend directory (for convenience, you may want to use npx jest --watch …). The grading script will assign full marks for each implementation task if all of the tests for that task pass. The grading script will assign full marks for each testing task if all of the faults in that task are detected by your tests. There is no partial credit. Grading for implementation tasks: . | All properties and methods besides _updateFrom: 10 points | _updateFrom: 10 points | . Grading for the testing tasks: . | Tests for _updateFrom: 5 points | Tests for makeMove: 5 points | . Task 2: Tic-Tac-Toe Area (95 points total) . The next task is to implement the React component that will render the Tic-Tac-Toe game area. This component will show information about the game area, and the current state of the game. It displays the TicTacToeBoard (which you'll implement in the next task), and also the Leaderboard` component (which you’ll implement in the task after that). This component is located in the file frontend/src/components/Town/interactables/TicTacToe/TicTacToeArea.tsx - you should implement component class in this file. View the specification for this component /** * The TicTacToeArea component renders the TicTacToe game area. * It renders the current state of the area, optionally allowing the player to join the game. * * It uses Chakra-UI components (does not use other GUI widgets) * * It uses the TicTacToeAreaController to get the current state of the game. * It listens for the 'gameUpdated' and 'gameEnd' events on the controller, and re-renders accordingly. * It subscribes to these events when the component mounts, and unsubscribes when the component unmounts. It also unsubscribes when the gameAreaController changes. * * It renders the following: * - A leaderboard (@see Leaderboard.tsx), which is passed the game history as a prop * - A list of observers' usernames (in a list with the aria-label 'list of observers in the game', one username per-listitem) * - A list of players' usernames (in a list with the aria-label 'list of players in the game', one item for X and one for O) * - If there is no player in the game, the username is '(No player yet!)' * - List the players as (exactly) `X: ${username}` and `O: ${username}` * - A message indicating the current game status: * - If the game is in progress, the message is 'Game in progress, {moveCount} moves in, currently {whoseTurn}'s turn'. If it is currently our player's turn, the message is 'Game in progress, {moveCount} moves in, currently your turn' * - Otherwise the message is 'Game {not yet started | over}.' * - If the game is in status WAITING_TO_START or OVER, a button to join the game is displayed, with the text 'Join New Game' * - Clicking the button calls the joinGame method on the gameAreaController * - Before calling joinGame method, the button is disabled and has the property isLoading set to true, and is re-enabled when the method call completes * - If the method call fails, a toast is displayed with the error message as the description of the toast (and status 'error') * - Once the player joins the game, the button dissapears * - The TicTacToeBoard component, which is passed the current gameAreaController as a prop (@see TicTacToeBoard.tsx) * * - When the game ends, a toast is displayed with the result of the game: * - Tie: description 'Game ended in a tie' * - Our player won: description 'You won!' * - Our player lost: description 'You lost :(' * */ function TicTacToeArea({ interactableID }: { interactableID: InteractableID }): JSX.Element . You can begin to implement these tasks in whatever order you see fit, but we would suggest completing them in the order shown in the specification. There is significant ambiguity in the specification when it comes to exactly how this looks. We will not evaluate your submission on the basis of how closely it looks like our referencence implementation: it need only be functionally correct (as defined by the included test cases). Grading for implementation tasks: . | Correctly registering the listeners: 20 points | Display the leaderboard component: 10 points | Join game button: 30 points | List of observers watching game: 15 points | List of players in game: 10 points | Display the game status: 10 points | . All of the tests are provided in the handout. Run the tests for this task by running the command npx jest TicTacToeArea.test in the frontend directory (for convenience, you may want to use npx jest --watch …). You will also likely find it convenient to run the app in your browser while you work on this task for interactive debugging. The grading script will assign full marks for each implementation task if all of the tests for that task pass. There is no partial credit. Task 3: Implement the Tic-Tac-Toe Board (40 points total) . This task is to implement the TicTacToeBoard component, which will render the actual (interactive) board. It is located in the file frontend/src/components/Town/interactables/TicTacToe/TicTacToeBoard.tsx. View the specification for this component /** * A component that renders the TicTacToe board * * Renders the TicTacToe board as a \"StyledTicTacToeBoard\", which consists of 9 \"StyledTicTacToeSquare\"s * (one for each cell in the board, starting from the top left and going left to right, top to bottom). * Each StyledTicTacToeSquare has an aria-label property that describes the cell's position in the board, * formatted as `Cell ${rowIndex},${colIndex}`. * * The board is re-rendered whenever the board changes, and each cell is re-rendered whenever the value * of that cell changes. * * If the current player is in the game, then each StyledTicTacToeSquare is clickable, and clicking * on it will make a move in that cell. If there is an error making the move, then a toast will be * displayed with the error message as the description of the toast. If it is not the current player's * turn, then the StyledTicTacToeSquare will be disabled. * * @param gameAreaController the controller for the TicTacToe game */ export default function TicTacToeBoard({ gameAreaController }: TicTacToeGameProps): JSX.Element . There is significant ambiguity in the specification when it comes to exactly how this looks. We will not evaluate your submission on the basis of how closely it looks like our referencence implementation: it need only be functionally correct (as defined by the included test cases). Grading for implementation tasks: . | Drawing the board for observers: 15 points | Drawing the interactive board for players: 25 points | . All of the tests are provided in the handout. Run the tests for this task by running the command npx jest TicTacToeBoard in the frontend directory (for convenience, you may want to use npx jest --watch …). You will also likely find it convenient to run the app in your browser while you work on this task for interactive debugging. The grading script will assign full marks for each implementation task if all of the tests for that task pass. There is no partial credit. Task 4: Implement the Leaderboard (15 points total) . This task is to implement the Leaderboard component, which will render a list of GameResults as a leaderboard. It is located in the file frontend/src/components/Town/interactables/Leaderboard.tsx. View the specification for this component /** * A component that renders a list of GameResult's as a leaderboard, formatted as a table with the following columns: * - Player: the name of the player * - Wins: the number of games the player has won * - Losses: the number of games the player has lost * - Ties: the number of games the player has tied * Each column has a header (a table header `th` element) with the name of the column. * * The table is sorted by the number of wins, with the player with the most wins at the top. * * @returns */ export default function Leaderboard({ results }: { results: GameResult[] }): JSX.Element . There is significant ambiguity in the specification when it comes to exactly how this looks. We will not evaluate your submission on the basis of how closely it looks like our referencence implementation: it need only be functionally correct (as defined by the included test cases). Grading for implementation tasks: . | Implementing the leaderboard: 15 points | . All of the tests are provided in the handout. Run the tests for this task by running the command npx jest Leaderboard in the frontend directory (for convenience, you may want to use npx jest --watch …). You will also likely find it convenient to run the app in your browser while you work on this task for interactive debugging. The grading script will assign full marks for each implementation task if all of the tests for that task pass. There is no partial credit. ",
    "url": "/CS4530-Fall-2023/assignments/ip2#implementation-tasks",
    
    "relUrl": "/assignments/ip2#implementation-tasks"
  },"54": {
    "doc": "Individual Project 2",
    "title": "Submission Instructions",
    "content": "Submit your assignment to the instance of Autograder.io running at neu.autograder.io. Navigate to neu.autograder.io in your web browser, click the “Sign in” button, and log in with your Northeastern account. You should then see the course listed on the neu.autograder.io home page. Please contact the instructors immediately if you have difficulty accessing the course on Autograder.io. If you haven’t been added to the course roster yet, you can access the assignment page at this direct link. To submit your assignment: run the command npm run zip in the top-level directory of the handout. This will produce a file called covey-town.zip. Submit that zip file on Autograder.io. Autograder.io will provide you with feedback on your submission, but note that it will not include any marks that will be assigned after we manually grade your submission for code style (these marks will remain hidden until it is graded). It may take several minutes for the grading script to complete. Autograder.io is configured to only provide feedback on at most 5 submissions per-24-hours per-student (submissions that fail to run or receive a grade of 0 are not counted in that limit). We strongly encourage you to lint and test your submission on your local development machine, and not rely on Autograder.io for providing grading feedback - relying on Autograder.io is a very slow feedback loop. To check for linter errors, run the command npm run lint from the terminal. The handout contains the same eslint configuration that is used by our grading script. Submission limit resets at 11am EST. ",
    "url": "/CS4530-Fall-2023/assignments/ip2#submission-instructions",
    
    "relUrl": "/assignments/ip2#submission-instructions"
  },"55": {
    "doc": "Individual Project 2",
    "title": "Individual Project 2",
    "content": "The objective for this semester’s individual project is to implement this new GameArea abstraction, with one concrete implementation: TicTacToeArea. The TicTacToeArea will implement the gameplay for the classic game, Tic-Tac-Toe. This implementation effort will be split across two deliverables. In this second deliverable, you will implement and (partially) test the core frontend components. ",
    "url": "/CS4530-Fall-2023/assignments/ip2",
    
    "relUrl": "/assignments/ip2"
  },"56": {
    "doc": "1 - Orientation & Requirements",
    "title": "1 - Orientation & Requirements",
    "content": "Learning Objectives: . In this lecture, you will learn . | a little about the scope of Software Engineering and how it differs from programming | how this course will be organized, and what will be expected from you each week. | two different ways to solicit and document our users’ requirements | . Important Dates: . | Individual Project Deliverable 1 Due Wednesday, Sep 20 by 11am | . Lecture Slides: . | Course Introduction Slides PDF, PPT | Requirements Gathering Slides PDF, PPT | . Activity . | Working with User Stories | . Tutorials . | Installing a Development Environment | Getting Started with TypeScript | User Stories and Conditions of Satisfaction | . Resources . | Class Syllabus | Project Overview | . ",
    "url": "/CS4530-Fall-2023/modules/1-requirements-testing",
    
    "relUrl": "/modules/1-requirements-testing"
  },"57": {
    "doc": "10 - Distributed Systems (Part 2)",
    "title": "10 - Distributed Systems (Part 2)",
    "content": "Learning Objectives: . In this module, you will learn to: . | Recognize common software architectures | Understand tradeoffs of scalability, performance, and fault tolerance between these architectures | Describe what makes web services RESTful, and implement a REST API | . Lecture Slides: . | Distributing Processing Slides PDF, PPT | Case Studies Slides PDF, PPT | REST APIs Slides PDF, PPT | . Activity . | Activity: Transcript REST Server | . Resources . | “Distributed Systems for Fun and Profit” by Mikito Takada | Online book chapter: “Thinking Like a Software Architect” by Christian Kästner | Podcast: “Chris Richardson on Microservice Patterns” - SE Radio | Counterpoint podcast: “Roberta Arcoverde on Stack Overflow’s Monolith” | “What is a REST API?” | . ",
    "url": "/CS4530-Fall-2023/modules/10-distributed-systems-2",
    
    "relUrl": "/modules/10-distributed-systems-2"
  },"58": {
    "doc": "11 - Test Adequacy",
    "title": "11 - Test Adequacy",
    "content": "Learning Objectives: . In this module, you will learn to: . | Explain what makes a good test, and give examples and counter examples | Explain different things a test suite might accomplish, and sketch how one might judge how well a test suite accomplishes those goals | . Lecture Slides: . | What makes a good test suite? Slides PDF, PPT | . Activity . | Activity: Transcript Server Test Adequacy | . Resources . | Software Engineering at Google: “Testing” | Are mutants a valid substitute for real faults in software testing? | StrykerJS - Mutation Testing Tool | Code example from lecture (zip) | . ",
    "url": "/CS4530-Fall-2023/modules/11-good-tests",
    
    "relUrl": "/modules/11-good-tests"
  },"59": {
    "doc": "12 - Larger Tests",
    "title": "12 - Larger Tests",
    "content": "Learning Objectives: . Modules larger than a single function or class introduce new difficulties in testing. In this module, you will learn: . | When and why you might introduce a test double in your testing | How and when to apply different kinds of test doubles such as mocks and spies | Why a system might require tests larger than unit tests. | . Lecture Slides: . | Testing Effectful Code Slides PDF, PPT | Beyond Unit Testing Slides PDF, PPT | . Resources . | Software Engineering at Google: “Larger Testing” | Code example from lecture (zip) | . ",
    "url": "/CS4530-Fall-2023/modules/12-larger-tests",
    
    "relUrl": "/modules/12-larger-tests"
  },"60": {
    "doc": "13 - Cloud Infrastructure",
    "title": "13 - Cloud Infrastructure",
    "content": "Learning Objectives: . In this module, you will learn to: . | Describe what “cloud” computing is | Understand the role of virtual machines and containers in cloud computing | Deploy a web app to the cloud | . Lecture Slides: . | Cloud Infrastructure Slides PDF, PPT | . Important Dates: . | Revised Project Plan Due Wednesday, Oct 25 by 11am | . ",
    "url": "/CS4530-Fall-2023/modules/13-cloud-infrastructure",
    
    "relUrl": "/modules/13-cloud-infrastructure"
  },"61": {
    "doc": "14 - Continuous Development",
    "title": "14 - Continuous Development",
    "content": "Learning Objectives: . In this module, you will learn to: . | Describe how continuous integration helps to catch errors sooner in the software lifecycle (“moving to the left”) | Describe the benefits of a culture of code review | Describe strategies for performing quality-assurance on software as and after it is delivered | . Lecture Slides: . | Continuous Development Slides PDF, PPT | . Activity . | Activity: CI/CD Pipeline for Covey.Town | . Resources . | “Expectations, Outcomes, and Challenges of Modern Code Review”, Christian Bird and Alberto Baccheli | “Modern Code Review: A Case Study at Google”, Caitlin Sadowski et al | Podcast Michaela Greiler on Code Reviews, with Felienne Hermans, 2020 | Software Engineering at Google especially the following chapters . | Chapter 9: Code Review | Chapter 16: Version Control and Branch Management | Chapter 19: Critique: Google’s Code Review Tool | Chapter 23: Continuous Integration | Chapter 24: Continuous Delivery | . | “Case Study 4: The $440 Million Software Error at Knight Capital”, Henrico Dolfing | “Rapid release at massive scale” by Chuck Rossi | “Continuous Deployment of Mobile Software at Facebook”, Chuck Rossi et al | . ",
    "url": "/CS4530-Fall-2023/modules/14-continuous-development",
    
    "relUrl": "/modules/14-continuous-development"
  },"62": {
    "doc": "15 - Security",
    "title": "15 - Security",
    "content": "Learning Objectives: . By the end of this module, you should be able to: . | Define key terms relating to software/system security | Describe some of the tradeoffs between security and other requirements in software engineering | Explain 5 common vulnerabilities in web applications and similar software systems, and describe some common mitigations for each of them. | Explain why software alone isn’t enough to assure security | . Lecture Slides: . | Software Engineering + Security Slides PDF, PPT | . Resources: . | “OWASP Top 10 Web Security Risks” | Try the XSS example on the transcript server (Try it in Edge!) This link might be annoying, but is not malicious. | A good video on public and private keys | Report on the eslint 2018 Attack | “Reflections on Trusting Trust” (1984) | “Running the “Reflections on Trusting Trust” Compiler” (2023) | “What are Weak Links in the npm Supply Chain?” | “Why secret detection tools are not enough: It’s not just about false positives - An industrial case study” | “A comparative study of vulnerability reporting by software composition analysis tools” | “Practical Automated Detection of Malicious npm Packages” | Podcast on SolarWinds attack | Security awareness/training activity: OWASP Juice Shop, online demo | . ",
    "url": "/CS4530-Fall-2023/modules/15-security",
    
    "relUrl": "/modules/15-security"
  },"63": {
    "doc": "16 - Technical Debt",
    "title": "16 - Technical Debt",
    "content": "Learning Objectives: . In this module, you will learn about: . | “Refactoring”: restructuring of code to improve structure. | Some common code examples for “smells” (anti-patterns). | “Technical Debt”: generalization covering all internal problems in a codebase | Some examples about how technical debt may be paid. | . Lecture Slides: . | Technical Debt Slides PDF, PPT | . Resources . | Book: Refactoring: Improving the design of existing code | Book: Managing Technical Debt: Reducing Friction in Software Development | Software Engineering at Google - Chapter 15 (Deprecation) | Technical Debt: From Metaphor to Theory and Practice (IEEE Software artice from 2012) | “Refactoring typescript - Jetbrains.com” | “Why Facebook Invented A New PHP-Derived Language Called “Hack”” | “Keynote PyCon 2017 - Instagram from Python 2 to Python 3” | “Instagram Makes a Smooth Move to Python 3” | “How Siri, Alexa and Google Assistant Lost the A.I. Race” | . ",
    "url": "/CS4530-Fall-2023/modules/16-technical-debt",
    
    "relUrl": "/modules/16-technical-debt"
  },"64": {
    "doc": "17 - Ethics",
    "title": "17 - Ethics",
    "content": "Learning Objectives: . In this week of the course, you will learn about ethical problems in Software Engineering. You will learn about some of the many unintended consequences of the software we build, and about ways to analyze the ethical problems that are associated with that software . Lecture Slides: . | Ethics Slides PDF, PPT | . Resources . | Software Engineering @ Google, Chapter 4 (Engineering for Equity) | Coverage of Google Photos auto-tagging bug WSJ, and more recent from Wired | COMPAS coverage: The Atlantic, ProPublica, ProPublica data | Price discrimination: WSJ, FairTest | Climate considerations: in NLP, in content delivery networks | Robles v Domino’s Pizza coverage: Eater, Columbia Journal of Law &amp; Social Problems | Citicorp Center Design case study | Therac-25 case study | Value Sensitive Design @ Khoury | ACM software engineering code of ethics, IEEE code of ethics | Web accessibility resources from W3C: WCAG 2.0 specification, evaluating web accessibility | On the origins of the ADA: Judy Heumann memoir, Crip Camp: A Disability Revolution (Netflix) | Podcast: Margaret Burnett on Gender, Cognitive Styles, and Usability Bugs | . ",
    "url": "/CS4530-Fall-2023/modules/17-ethics",
    
    "relUrl": "/modules/17-ethics"
  },"65": {
    "doc": "2 - From Requirements to Code",
    "title": "2 - From Requirements to Code",
    "content": "Learning Objectives: . In this lecture, you will learn to: . | Explain the basics of the Test-Driven Design | Develop simple applications using Typescript and Jest | Learn more about Typescript and Jest from tutorials, blog posts, and documentation | . Important Dates: . | Individual Project Deliverable 1 Due Wednesday, Sep 20 by 11am | . Lecture Slides: . | From Requirements to Code Slides PDF, PPT | . Activity . | TDD Activity Handout | . Tutorials . | Writing Tests with Jest | . ",
    "url": "/CS4530-Fall-2023/modules/2-requirements-to-code",
    
    "relUrl": "/modules/2-requirements-to-code"
  },"66": {
    "doc": "3 - Best Practices for Effective Programmers",
    "title": "3 - Best Practices for Effective Programmers",
    "content": "Learning Objectives: . This lecture is about writing code that other people will be able to understand, reuse, and modify. We’ve distilled this down to five general program-design princples which should be best practices for effective programmers: . | Use Good Names | Make Your Data Mean Something | One Method/One Job | Don’t Repeat Yourself | Don’t Hardcode Things That Are Likely To Change | . By the end of this lesson you should be able to: . | Describe the purpose of our design principles | List 5 Best Practices for Effective Programmers with examples | Identify some violations of the principles and suggest ways to mitigate them | . Important Dates: . | Individual Project Deliverable 1 Due Wednesday, Sep 20 by 11am | . Lecture Slides: . | Best Practices for Effective Programmers Slides PDF, PPT | . Activities: . | Traffic Light Activity: (Handout) (Starter Code) | . Resources . | Code Examples from Lecture (zip file) | . ",
    "url": "/CS4530-Fall-2023/modules/3-best-practices-for-effective-programmers",
    
    "relUrl": "/modules/3-best-practices-for-effective-programmers"
  },"67": {
    "doc": "4 - Interaction-Level Design Patterns",
    "title": "4 - Interaction-Level Design Patterns",
    "content": "Learning Objectives: . This lecture is about common patterns for organizing the communication between classes. These are what are often called “OO Design Patterns”. We will see that using such patterns makes OO code more readable and modifiable. By the end of this lesson, you should be able to . | Explain how patterns capture common solutions and tradeoffs for recurring problems. | Give 3 examples of interaction patterns and describe their distinguishing characteristics | Draw a picture or give an example to illustrate each one | . Important Dates: . | Individual Project Deliverable 1 Due Wednesday, Sep 20 by 11am | . Lecture Slides: . | Interaction-Level Design Patterns Slides PDF, PPT | . Activities: . | Weather Station Activity Handout | . Resources . | Code Examples from Lecture (zip file) | . ",
    "url": "/CS4530-Fall-2023/modules/4-interaction-level-design-patterns",
    
    "relUrl": "/modules/4-interaction-level-design-patterns"
  },"68": {
    "doc": "5 - Concurrency Patterns in Typescript",
    "title": "5 - Concurrency Patterns in Typescript",
    "content": "Learning Objectives: . A 1 GHz CPU executes an instruction every 1 ns. Almost anything else takes approximately forever. Rather than waste time waiting for a long-running operation to complete, we want our programs to make progress on other tasks. This is called “masking latency with concurrency”. In this lecture, we will study some common patterns for organizing concurrency in Typescript/Javascript. By the end of this lesson, you should be prepared to: . | Explain how to achieve concurrency through asynchronous operations and Promise.all in TypeScript. | Write asynchronous and concurrent code in TypeScript using async/await and Promise.all. | Explain the difference between JS run-to-completion semantics and interrupt-based semantics. | . Important Dates: . | Team Formation Survey Due Wednesday Sep 27 by 11am | . Lecture Slides: . | Concurrency Patterns in Typescript Slides PDF, PPT | . Activities: . | Async Activity | . Resources . | Code Examples from Slides | . ",
    "url": "/CS4530-Fall-2023/modules/5-concurrency-patterns-in-typescript",
    
    "relUrl": "/modules/5-concurrency-patterns-in-typescript"
  },"69": {
    "doc": "6 - Software Process",
    "title": "6 - Software Process",
    "content": "Learning Objectives: . The overall theme of this week’s lessons is software engineering processes: how do we organize our (non-programming) activities so that we can build some software project as efficiently as possible? The lessons will center on these three themes: . | How do we organize our development activities? | How do we estimate how long a software project will take? | How do we build an effective team? | . Important Dates: . | Team Formation Due Sep 27 by 11am | . Lecture Slides: . | Software Process Slides PDF, PPT | Agile Planning and Estimation Slides PDF, PPT | Teams Slides PDF, PPT | . Resources . | Postmortem Exercise | . Additional Readings: . The following books provide additional depth on the topics in this week’s lessons: . | The Mythical Man-Month | Head First Agile | eXtreme Programming eXplained | Debugging Teams | . For more reflections on software processes in the 1980’s, David Parnas’ article: “Software Aspects of Strategic Defense Systems”. For a discussion of various xDD approaches, see Rebecca Wirfs-Brock on What Drives Design?. Chuck Rossi’s 2014 Release Engineering Keynote includes some great discussion of Facebook’s mobile release process, now outdated, but quite interesting; there is a discussion of team structure around 18 minutes in. Sarah Mei’s 2018 Power of Agile talk provides a great discussion of embracing agile values that work for your team, while leaving behind toxic practices. Miscellaneous: Investigating the origins of the tire swing meme . ",
    "url": "/CS4530-Fall-2023/modules/6-software-process",
    
    "relUrl": "/modules/6-software-process"
  },"70": {
    "doc": "7 - React",
    "title": "7 - React",
    "content": "Learning Objectives: . This module will provide an introduction to UI development using React. By the end of this module you should be able to: . | Understand how the React framework binds data (and changes to it) to a UI | Create simple React components that use state and properties | | . Important Dates: . | Individual Project Deliverable 2 Due Wednesday, Oct 18 by 11am | . Lecture Slides: . | React Basics Slides PDF, PPT | . Activities . | Activity: Enhancing a TODO Tracker in React | . Tutorials . | Tutorial: Basics of React | . Resources . | Code examples from lecture (zip) | . ",
    "url": "/CS4530-Fall-2023/modules/7-react",
    
    "relUrl": "/modules/7-react"
  },"71": {
    "doc": "8 - React Hooks",
    "title": "8 - React Hooks",
    "content": "Learning Objectives: . Building on Module 7, we will have a deeper discussion of common patterns of programming with React. By the end of this module you should be able to: . | Explain the basic uses of useEffect | Explain when a useEffect is executed, and when its return value is executed | Construct simple custom hooks and explain why they are useful | Be able to map the three core steps of a test (assemble, act, assess) to UI component testing. | . Lecture Slides: . | React Hooks Slides PDF, PPT | . Activity . | No activity this week, sorry | . Resources . | Code examples from lecture can be found in module 07. | . ",
    "url": "/CS4530-Fall-2023/modules/8-patterns-of-react",
    
    "relUrl": "/modules/8-patterns-of-react"
  },"72": {
    "doc": "9 - Distributed Systems (Part 1)",
    "title": "9 - Distributed Systems (Part 1)",
    "content": "Learning Objectives: . In this module, you will learn to: . | Describe 5 key goals of distributed systems | Understand the fundamental constraints of distributed systems | Understand the roles of replication and partitioning in distributing data | . Lecture Slides: . | Distributed Systems: Goals and Challenges Slides PDF, PPT | Distributing Data Slides PDF, PPT | . Resources . | “Distributed Systems for Fun and Profit” by Mikito Takada | “The CAP FAQ - The Paper Trail” | . ",
    "url": "/CS4530-Fall-2023/modules/9-distributed-systems-1",
    
    "relUrl": "/modules/9-distributed-systems-1"
  },"73": {
    "doc": "Modules",
    "title": "Modules",
    "content": " ",
    "url": "/CS4530-Fall-2023/modules/",
    
    "relUrl": "/modules/"
  },"74": {
    "doc": "Policies",
    "title": "Grading",
    "content": "There will be individual projects (previously known as assignments) and a team project (in a group of 3-4 members). The overall grading breakdown is: . | 30% Individual project (10% for deliverable 1, 20% for deliverable 2) | 40% Team project (including peer evaluations / surveys) | 10% Participation in synchronous, in-class activities | 20% Exam | . Assignment of team project grades: In cases where team members do not equally contribute to the project, we may assign different grades to different individuals, up to an extreme of deducting 50% of the team project grade for a student. We will evaluate each individual’s contribution on the basis of a variety of factors, including progress reports at weekly meetings, through inspecting version control history, through each students’ self-reflection, and through each students’ peer evaluation {during and/or} at the end of the project. We will make regular efforts to collect and distribute this feedback throughout the project — our ultimate goal is for all students to participate and receive full marks. Assignment of final grades: Although each instructor will use the same lesson plans and assignments, we expect that there may be variation in grades when compared between sections. Hence, each instructor will assign final grades to students in their sections, and reserve the right to apply different curves than are used by the other instructors. With each graded assignment, students will be provided with the distribution of all grades in their section. Grading grievances: If you have concerns regarding the grading of your work, please let us know right away by opening a regrade request. All regrade requests must be submitted within 7 days from your receipt of the graded work. If your regrade request is closed and you feel that the response was not satisfactory, you may appeal to the instructor via email within 48 hours. ",
    "url": "/CS4530-Fall-2023/policies/#grading",
    
    "relUrl": "/policies/#grading"
  },"75": {
    "doc": "Policies",
    "title": "Homework policy",
    "content": "Students must work individually on all homework assignments. We encourage you to have high-level discussions with other students in the class about the assignments, however, we require that when you turn in an assignment, it is only your work. That is, copying any part of another student’s assignment is strictly prohibited, and repercussions for doing so will be severe (up to and including failing the class outright). You are free to reuse small snippets of example code found on the Internet (e.g. via StackOverflow) provided that it is attributed. If you are concerned that by reusing and attributing that copied code it may appear that you didn’t complete the assignment yourself, then please raise a discussion with the instructor. Your work is late if it is not turned in by the deadline. | 10% will be deducted for late assignments turned in within 24 hours after the due date. | Assignments submitted more than 24 hours late will receive a zero. | . If you’re worried about being busy around the time of a HW submission, please plan ahead and get started early. Homework that does not compile or run will receive at most 50% credit. For fairness to all, there are no exceptions to the above rules. ",
    "url": "/CS4530-Fall-2023/policies/#homework-policy",
    
    "relUrl": "/policies/#homework-policy"
  },"76": {
    "doc": "Policies",
    "title": "In Class Activities:",
    "content": "Most lectures will feature interactive activities and/or polls that support the material being presented. You must be present in class to participate in the activity or take the poll (participating in an online activity while not attending the synchronous session will be considered academic dishonesty and will be treated harshly). Each instructor may have a different style for assigning participation grades, but historical grading information suggests that each style results in a similar overall grade distribution. Participation grades will be posted on Canvas, and regularly updated. If you join class in person, you are strongly encouraged to bring your laptop or phone to class so that you can participate in the activities. Policy on remote attendance . If you are registered for an on-the-ground section but do not feel comfortable or are unable to attend in person, please contact your instructor in advance of class. We would like to provide the best and most comfortable learning experience, and encourage you to stay at home if advised by a medical professional. ",
    "url": "/CS4530-Fall-2023/policies/#in-class-activities",
    
    "relUrl": "/policies/#in-class-activities"
  },"77": {
    "doc": "Policies",
    "title": "Debugging",
    "content": "One of the objectives of this class is to provide students with experiences writing new code for large, existing codebases. We anticipate that you may run into difficulties debugging the project code: it is often difficult to build debugging skills until you have a problem in front of you that requires them. The course staff is happy to help you with debugging, with the specific goal of helping you learn to successfully apply scientific debugging. Andreas Zeller’s Debugging Book provides an excellent guide to scientific debugging. The short version is roughly: if you can’t debug an issue in the first few minutes “just by looking at it”, it will be hard to keep all of the relevant information in your head at once, and a formal process to help you generate and refine guesses for why something is wrong can be immensely useful. The key idea is to create a debugging note file, where you track information like: . | What was the input/application state that caused the bug? | What was the behavior that I expected? | What was the behavior that I observed? | What are possible hypotheses for that behavior? | How have I tested those hypotheses, and what was the result? | . The overall goal with hypothesis formulation is to come up with possible causes for why the bug exists. Then, as long as those hypotheses are testable, we can prove or disprove them. Most hypotheses will be along the lines of “did I make an incorrect assumption about how a library or API works.” The devil is in enumerating all of the possible incorrect assumptions that you might have made, and testing them. The best way to attack these kinds of problems is to start with testing some high-level, general assumptions, and then refine them. If you come to us for debugging help, we will ask you to answer these 5 questions, as our goal is to help you get better at debugging and not to simply point out bugs that we might have seen before. We are happy to discuss the problematic behavior that you are observing, possible hypotheses for why that behavior is occurring, and strategies to test those hypotheses. In the past, students have found that using a variety of strategies to test their hypotheses (e.g. using a debugger, creating a minimized test case, measured application of console.log statements, internet research) are useful, and we would be happy to demonstrate these. We may not be able to stay with you while you work on refining your hypotheses and fixing the bug, but would be happy to continue following up if you get stuck again. ",
    "url": "/CS4530-Fall-2023/policies/#debugging",
    
    "relUrl": "/policies/#debugging"
  },"78": {
    "doc": "Policies",
    "title": "Classroom Environment",
    "content": "To create and preserve a classroom atmosphere that optimizes teaching and learning, all participants share a responsibility in creating a civil and non-disruptive forum for the discussion of ideas. Students are expected to conduct themselves at all times in a manner that does not disrupt teaching or learning. Your comments to others should be constructive and free from harassing statements. You are encouraged to disagree with other students and the instructor, but such disagreements need to respectful and be based upon facts and documentation (rather than prejudices and personalities). The instructors reserve the right to interrupt conversations that deviate from these expectations. Repeated unprofessional or disrespectful conduct may result in a lower grade or more severe consequences. Part of the learning process in this course is respectful engagement of ideas with others. Please don’t be late. You are an essential part of the class. Your participation is an essential part of the class. If you are late, please be courteous to others when entering. BE PRESENT WHEN YOU ARE ATTENDING CLASS. Please do not distract yourself from the class by doing other activities such as phone calls, email, facebook, chat/IM/texting, games, web surfing – unless it has a direct bearing on the course. Then, by all means, surf away! . Attendance in the synchronous meetings is expected. Sometimes you cannot avoid missing a class. If you need to be away from class, it is your responsibility to catch up on the materials discussed in the class. ",
    "url": "/CS4530-Fall-2023/policies/#classroom-environment",
    
    "relUrl": "/policies/#classroom-environment"
  },"79": {
    "doc": "Policies",
    "title": "Accommodations for Disabilities",
    "content": "Students who have disabilities who wish to receive academic services and/or accommodations should visit the Disability Resource Center at 20 Dodge Hall or call (617) 373-2675. Please be sure to provide your instructor with DRC’s accommodations letter early in the semester in order to avoid logistical challenges. This course includes a significant group project, and providing extensions for group work can be complex. As-per the DRC’s policy, it is the student’s responsibility to coordinate with the instructor in order to provide suitable accommodations. ",
    "url": "/CS4530-Fall-2023/policies/#accommodations-for-disabilities",
    
    "relUrl": "/policies/#accommodations-for-disabilities"
  },"80": {
    "doc": "Policies",
    "title": "Title IX Notice",
    "content": "Title IX of the Education Amendments of 1972 protects individuals from sex or gender-based discrimination, including discrimination based on gender-identity, in educational programs and activities that receive federal financial assistance. Northeastern’s Title IX Policy prohibits Prohibited Offenses, which are defined as sexual harassment, sexual assault, relationship or domestic violence, and stalking. The Title IX Policy applies to the entire community, including students, faculty and staff of all gender identities. Faculty members are considered “responsible employees” at Northeastern University, meaning they are required to report all allegations of sex or gender-based discrimination to the Title IX Coordinator. If you or someone you know has been a survivor of a Prohibited Offense, confidential support and guidance can be found through University Health and Counseling Services staff and the Center for Spiritual Dialogue and Service clergy members. By law, those employees are not required to report allegations of sex or gender-based discrimination to the University. Alleged violations can be reported non-confidentially to the Title IX Coordinator within The Office for Gender Equity and Compliance at: titleix@northeastern.edu and/or through NUPD (Emergency 617.373.3333; Non-Emergency 617.373.2121). Reporting Prohibited Offenses to NUPD does NOT commit the victim/affected party to future legal action. In case of an emergency, please call 911. Please visit www.northeastern.edu/ouec for a complete list of reporting options and resources both on- and off-campus. ",
    "url": "/CS4530-Fall-2023/policies/#title-ix-notice",
    
    "relUrl": "/policies/#title-ix-notice"
  },"81": {
    "doc": "Policies",
    "title": "Policies",
    "content": " ",
    "url": "/CS4530-Fall-2023/policies/",
    
    "relUrl": "/policies/"
  },"82": {
    "doc": "Project Final Deliverable",
    "title": "Project: Final Deliverable Due Wednesday 11/29/2023 11am ET",
    "content": "The final project deliverable is the implementation, available in github and deployed on Netlify and Heroku or render.com, and the documentation turned in to Canvas. It also includes poster and/or demos. ",
    "url": "/CS4530-Fall-2023/assignments/project-deliverable#project-final-deliverable-due-wednesday-11292023-11am-et",
    
    "relUrl": "/assignments/project-deliverable#project-final-deliverable-due-wednesday-11292023-11am-et"
  },"83": {
    "doc": "Project Final Deliverable",
    "title": "Project Implementation and Documentation",
    "content": "Your final team deliverable will be a “release” of your new feature on GitHub (with tests), and will be accompanied by a demo. You will submit the link of your hosted app on Canvas. Contents . Your final team deliverable will include: . | The implementation of your new feature, deployed to Netlify + Heroku / Render.com | Automated tests for your new feature | A report that describes how to use your new feature | A poster and/or demo | . Accompanying the final team deliverable will be an individual reflection, which every student must submit on their own which will include your reflections on the evolution of your project concept, on the software engineering processes you used, and on your team’s dynamics and collaboration. Submission Instructions . Code, documentation and Link . All apps will be deployed on Netlify and Heroku / Render (instructions for CI/CD pipeline setup are provided separately). After you have pushed all of your code (and documentation) to your team’s GitHub repository, create a release on GitHub, and apply the tag version final-submission. After your release is created, you’ll find that there is now a .zip that can be downloaded from GitHub that contains a snapshot of your entire repository. Download this zip file, unpack it, and follow the instructions that you provided in your README to double-check that the course staff will be able to run your project (this step is handy to make sure that you didn’t forget to include some key files in git). If needed, you can delete the release, make some changes, and re-release up until the deadline. Submit this zip file to Canvas under the assignment “Project: Code Submission” along with the link of your hosted app (in comments or a text file). Submit your report separately to Canvas, under the assignment “Project: Report”. Project Poster &amp; Demo . Each team will submit a poster. Your poster will be a single-page document, that will include the following aspects: . | Short description of the project (OK to reuse text from the project plan/report) | Link to public demo site, link to source repo (OK to make the repo public now, or OK to leave as private) | Short description of the technology stack and overall design decisions | Short description of future work that could build on your project - additional features that you think could be interesting, or ideas for refactoring the code. | Screenshots of the feature, visually demonstrating the main functionality that you implemented. | . We’ve created a sample poster for the “Conversation Areas” feature, which you might find useful in deciding how to format your poster. It’s fine to use a different aspect ratio (e.g. portrait instead of landscape), and there are no specific requirements for font size or amount of text. Please try to create a document that you feel represents your project, imagine your target audience as a recruiter for a software engineering role: your goal is to demonstrate that you have some experience working on some non-trivial software engineering project. In addition, some sections will have live (in-person) demos and others may ask you to record a demo video. Details for project demos and/or presentations will be provided during class by each instructor (and may vary from section to section). Posters and/or demo videos and/or presentations will be submitted on Canvas, under the assignment “Project: Poster / Demo”. Individual Reflection . Create a PDF of your reflection, and submit it to Canvas, under the assignment “Project: Individual Reflection”. ",
    "url": "/CS4530-Fall-2023/assignments/project-deliverable#project-implementation-and-documentation",
    
    "relUrl": "/assignments/project-deliverable#project-implementation-and-documentation"
  },"84": {
    "doc": "Project Final Deliverable",
    "title": "Grading",
    "content": "Details on grading may be found at Project Grading . ",
    "url": "/CS4530-Fall-2023/assignments/project-deliverable#grading",
    
    "relUrl": "/assignments/project-deliverable#grading"
  },"85": {
    "doc": "Project Final Deliverable",
    "title": "Project Final Deliverable",
    "content": " ",
    "url": "/CS4530-Fall-2023/assignments/project-deliverable",
    
    "relUrl": "/assignments/project-deliverable"
  },"86": {
    "doc": "Final Project Grading",
    "title": "Grading",
    "content": "Each project will be graded by the team’s assigned TA mentor and the instructor. For most of the submission components below, we provide two benchmark rubrics: one for a submission that is satisfactory (full marks), and one that would be meeting our minimum expectations (a pass). In practice, when grading projects we will usually assign numeric grades and provide partial credit, using these rubrics as guidelines for those two extremes. Rubric for remaining components will be provided by individual instructors. Adjustments in project scope . We are hopeful that all teams will deliver all essential AND desired features proposed in their revised project plans. However, it is possible that there might be some minor deviations from the origional plan - in the five-week implementation period, there are sure to be some teams that encounter unexpected technical hurdles. As described in greater detail in the rubrics below, teams that have regular communication with their TA regarding their project status may have the opportunity to request variances to their project scope. Individual Contributions to the project . In cases where team members do not equally contribute to the project, we may assign different grades to different individuals, up to an extreme of deducting 50% of the marks from a student. In the event that a group member does not contribute at all to the project, student might receive 0. We will evaluate each individual’s contribution on the basis of a variety of factors, including progress reports at weekly meetings, through inspecting version control history, through each team’s (or student’s) peer evaluations during and/or at the end of the project, and through each student’s self-reflection. We will make regular efforts to collect and distribute this feedback throughout the project. Our ultimate goal is for all students to participate and receive full marks. ",
    "url": "/CS4530-Fall-2023/assignments/project-grading#grading",
    
    "relUrl": "/assignments/project-grading#grading"
  },"87": {
    "doc": "Final Project Grading",
    "title": "Summary of grading",
    "content": "From Project Overview . | Planning (20%) . | This includes the Preliminary Project Plan and the Revised Project Plan. | . | Process (20%) . | This includes: use of a structured development process, including code reviews, timely completion of sprint progress reports and individual/team surveys, and weekly meetings with TA Mentor. | This also includes appropriate division of labor within the project. For full credit, each member of the team must have at least 4 commits in the final delivered code. | . | Product (40%) . | 20% Successful delivery of your Minimum Viable Product as defined in your project plan | 10% Additional desirable features | 10% Test suite of your features. | . | Reports (20%) . | 10% Final Report | 10% Poster and Demo | . | . This adds up to 100%; this sum is worth 40% of the course grade. ",
    "url": "/CS4530-Fall-2023/assignments/project-grading#summary-of-grading",
    
    "relUrl": "/assignments/project-grading#summary-of-grading"
  },"88": {
    "doc": "Final Project Grading",
    "title": "Detailed Rubrics",
    "content": "Here are the detailed rubrics for the final deliverables: . Minimum Viable Product (20%) . Additional Desirable Features (10%) . We will grade each of these using the following rubric: . Satisfactory: . | Implemented feature satisfies the conditions of satisfaction as proposed by the team and as agreed to by the course staff. If technical difficulties resulted in features being dropped, the project may still earn full marks on “delivered features,” but these difficulties must have been documented with the course staff as you encountered them during development. | Implemented feature is deployed to a publicly-accessible URL, using Netlify and Heroku and/or Render.com for hosting (or as per deployement instructions provided). | Implemented feature contains no ESLint warnings or errors; does not include any eslint-disable or ts-ignore flags | . Meets minimum requirements: . | Implemented feature largely satisfies acceptance criteria as proposed by the team, but may not meet the course staff’s interpretation of those criteria. | Implemented feature is deployed to a publicly-accessible URL, using Netlify and Heroku /Render for hosting (or as per deployement instructions provided). | The implementation may have some obvious flaws, but largely works without crashing. | Implemented feature does not include any eslint-disable or ts-ignore flag | . Testing (10%) . The project must include evidence of testing. Ideally, all new features will be accompanied by fully automated tests, but in some circumstances (particularly when engaging with Phaser, the game library, or Tiled, the map editor), this may not be feasible. If automated tests are not possible, include a discussion of your manual testing strategy, including a script that a future developer could use to manually test the feature. Satisfactory: . | Any new or modified backend features include tests that validate that the feature works as intended. These tests cover the changed code, and also contain well-written assertions that thoroughly check the expected behaviors. | Tests contains no ESLint warnings or errors; does not include any eslint-disable or ts-ignore flags | . Meets minimum requirements: . | Any new or modified backend features include at least one test, which may or may not be an effective test. | Tests may contain ESlint warnings (but no errors); does not include any eslint-disable or ts-ignore flags | . Process (20%) . The Process grade includes: use of a structured development process, including code reviews, timely completion of sprint progress reports/retrospectives, individual/team surveys, peer evaluations and weekly meetings with TA Mentor (for Week 6, 8-13). It also includes appropriate division of labor within the project. For full credit, each member of the team must have at least 4 commits in the final delivered code. | Ongoing development progress including code reviews, github commits, etc. count 10% of the grade | Peer evaluations, TA meeting, submission of surveys/reports counts 10% of the project grade. These items will be evaluated using the rubrics below. | . Satisfactory: . | There is a clear development history visible from the git repository: features were delivered incrementally, and not in a single (or several) commits at the end of the project | There is evidence of code review - for example, pull requests that have comments on them. Teams are expected to merge their developvemeent branches to main only after code review. | There is a correspondence between commit messages and the technical tasks that they are associated with; there are few (if any) commits with meaningless commits messages like . or Add files via upload. | Each team member has made at least 4 commits over the lifespan of the project | The team meets regularly with the TA mentor. All or most members attend all meetings. Members who are absent from a TA Meeting send an excuse in advance. | Progress reports and other weekly reports and surveys are submitted in a timely fashion, not filled in later. | TA Meetings include demos or other evidence of progress. | . Meets minimum requirements: . | There is a clear development history visible from the git repository: features were delivered incrementally, and not in a single (or several) commits at the end of the project | Each team member has made at least 2 commits over the lifespan of the project | Attendance at TA meetings may be irregular, but enough to give the TA a sense of the the team’s progress. | . Individual grading for Process component . Team members with unexcused absences from TA Meetings, or with fewer than 4 commits during the lifespan of the project, may receive a lowered grade for the Process component. Final Report (10%) . The final report should consist of three sections: . | Feature Overview and User Manual | Technical Overview | Process Overview | . The allocation of the 10% credit will be as follows: Overview and manual will be worth 4%, technical and process overviews will be worth 3% each. * Feature Overview and User Manual . Satisfactory: . | The Feature section contains sufficient documentation for a user to build and interact with your updated version of Covey.Town. | The documentation covers all the steps that a user would need to build a working version of your project. | The documentation includes a link to the deployed version of your project | . | The documentation covers all steps that the user would need to take to exercise all of your user stories. | Screenshots are included that capture the key interactions between a user and your new feature. | Course staff were able to follow these instructions to successfully interact with your project implementation. | URL of the deployed app. | The section is at most 4 pages (roughly 2,000 words maximum), NOT including figures. Fewer pages are absolutely acceptable; consider this a rough limit | . Meets minimum requirements: . | The Feature contains documentation for a user to interact with your updated version of Covey.Town, but perhaps does not fully describe how. | The documentation includes at least one or two screenshots, but screenshots do not capture interactions with all of the user stories. | The course staff were able to figure out how to use it through trial and error. | URL of the deployed app. | The section is at most 4 pages, NOT including figures. Fewer pages are absolutely acceptable; consider this a rough limit | . * Technical Overview . Satisfactory: . | Technical Overview contains a description of any substantive changes to the existing Covey.Town codebase, and of the architecture of your new code. | It uses UML diagrams, CRC cards, state diagrams or other techniques that help describe the structure. | It provides a well-reasoned rationale for why this is the “right” design. | The document is at most 2 pages (fewer pages are absolutely acceptable, consider this a rough limit) | Meets minimum requirements: . | Technical Overview includes a description of all major changes to the code compared to our existing Covey.Town codebase. | The document is at most 2 pages (fewer pages are absolutely acceptable, consider this a rough limit) | . * Process Overview . Satisfactory: . | Process overview contains a detailed description of the manner in which agile project management processes were used during the project (i.e., sprints, sprint reviews, retrospectives and blameless reviews). | It provides a summary of what was planned to happen in each sprint vs what actually happened, with a discussion of what was revised as a result. | The document is at most 2 pages (fewer pages are absolutely acceptable, consider this a rough limit) | . Meets minimum requirements: . | It provides a summary of what was planned to happen in each sprint vs what actually happened, with a discussion of what was revised as a result. | The document is at most 2 pages (fewer pages are absolutely acceptable, consider this a rough limit) | . Posters and Demo (10%) . Each team will be required to submit a poster. In addition, some sections may have a demo (live in-person, via zoom or by recorded video). Each instructor will provide details regarding expectations for the demo and/or presentation. The schedule and manner of these demos might also vary from section to section. The specifications for the different sections are listed below: . | Sections 2, 4, 7 - Prof. Bhutta | Section 6 - Prof. Wand | . Select projects may be hosted in our project showcase. Here are selected projects from Fall 2022 project showcase. ",
    "url": "/CS4530-Fall-2023/assignments/project-grading#detailed-rubrics",
    
    "relUrl": "/assignments/project-grading#detailed-rubrics"
  },"89": {
    "doc": "Final Project Grading",
    "title": "Individual Reflection",
    "content": "Accompanying the final team deliverable will be an individual reflection, which every student must submit on their own. Satisfactory completion of all parts of this reflection is required to receive an “A” grade in the course, and may be used to calibrate project scores across multiple team members. The individual reflection also provides an opportunity for students to provide confidential feedback on the performance of their teammates. Project Concept . Reflect on the evolution of your project concept: How does the project that you delivered compare to what you originally planned to deliver? What caused these deviations? . Satisfactory: . | Is at least 2 paragraphs long; | Includes at least 1 paragraph describing all variances from original project concept; | Includes at least 1 paragraph of personal reflection on the cause of any variances from the project concept. | . Project Process . Reflect on the evolution of your development process: How did the process by which you designed and implemented evolve from your original project plan? Were there any processes that in hindsight, you wish that you followed, or wish that you followed better? . Satisfactory: . | Is at least 2 paragraphs long; | Includes at least 1 paragraph describing all variances from the software development processes envisioned in your original project plan; | Includes at least 1 paragraph describing software processes (described in class or not) that you wish you had followed, or wish you had followed better, supported by evidence from your personal experience working on the project. | . Project Team . Reflect on your team dynamic: Provide a frank (and ideally, blameless) postmortem of your and your teammates collaborative performance and participation. If you had to do this same project over with the same teammates, what would you have done differently (or not) to improve your team’s overall performance? Do you think that each of your teammates are deserving of the same grade as you? . Satisfactory: . | Is at least 2 paragraphs long; | Includes at least 1 paragraph reflecting on your own performance as a team member on this project, including what you would have done differently, given what you know now; | Includes at least 1 paragraph reflecting on your overall team dynamic, including strengths and weaknesses. Reflect on how you might have organized your team differently given what you know now. | . ",
    "url": "/CS4530-Fall-2023/assignments/project-grading#individual-reflection",
    
    "relUrl": "/assignments/project-grading#individual-reflection"
  },"90": {
    "doc": "Final Project Grading",
    "title": "Final Project Grading",
    "content": " ",
    "url": "/CS4530-Fall-2023/assignments/project-grading",
    
    "relUrl": "/assignments/project-grading"
  },"91": {
    "doc": "Project Overview",
    "title": "Project Overview",
    "content": "The individual and team project for this class are designed to mirror the experiences of a software engineer joining a new development team: you will be “onboarded” to our codebase, make several individual contributions, and then form a team to propose, develop and implement a new feature. The codebase that we are be developing on is a remote collaboration tool called Covey.Town. Covey.Town provides a virtual meeting space where different groups of people can have simultaneous video calls, allowing participants to drift between different conversations, just like in real life. Covey.Town is inspired by existing products like Gather.Town, Sococo, and Gatherly.IO — but it is an open source effort, and the features will be proposed and implemented by you! All implementation will take place in the TypeScript programming language, using React for the user interface. Select projects from Fall 2023 are hosted in our project showcase. Overview of Project Deliverables . | Date | Deliverable | Description | . | 09/27/23 | Team Formation Survey | Specify preferences for teammates | . | 10/02/23 | Project Kick-off Meeting | Schedule a meeting with your Mentor TA during this week | . | 10/11/23 | Preliminary Project Plan | Propose a new feature for Covey.Town that can be planned and implemented within 7 weeks | . | 10/25/23 | Revised Project Plan | Refine the scope of your feature based on staff feedback, define detailed requirements and project acceptance criteria. | . | 11/29/23 | Project Delivery - Implementation and Documentation | Deliver your new feature, including design documentation and tests | . Summary of Project Grading . Your overall project grade (which will account for 40% of your final grade in this course) will be the weighted average of each of the deliverables. | Planning (20%) . | This includes the Preliminary Project Plan and the Revised Project Plan. | . | Process (20%) . | This includes: use of a structured development process, including code reviews, timely completion of progress reports and individual/team surveys, and weekly meetings with TA Mentor. | This also includes appropriate division of labor within the project (i.e., roughly equal). For full credit, each member of the team must have at least 4 commits in the final delivered code. | . | Product (40%) . | 20% Successful delivery of your Minimum Viable Product as defined in your project plan | 10% Desirable delivered features | 10% Test suite of your features. | . | Reports (20%) . | 10% Final Report | 10% Poster and Demo | . | . In cases where team members do not equally contribute to the project, we may assign different grades to different individuals, up to an extreme of deducting 50% of the team project grade for a student. We will evaluate each individual’s contribution on the basis of a variety of factors, including progress reports at weekly meetings, through inspecting version control history, through each students’ self-reflection, and through each students’ peer evaluations (during and/or at the end of the project). We will make regular efforts to collect and distribute this feedback throughout the project — our ultimate goal is for all students to participate and receive full marks. Team Formation . All projects will be completed in a team of 3-4 students. The very first deliverable for the project will be a team formation survey: you will be able to indicate your preferences for teammates. The instructors will assign students to the teams based on a number of factors including your responses to the survey. All students in each team must be in the same section of the class. Team Meetings with TA Mentor . Each team will be assigned a TA to act as a mentor, who will also serve as your point of contact for project grading and will work closely with you for the entire project. During Week5, you will have a “Kickoff Meeting” with your TA mentor, where you will meet your TA mentor and have the opportunity to share any early ideas that you might want feedback on before submitting the your preliminary project plan. Once project begins in full force, you will have weekly meetings with your TA mentor (scheduled at your team’s and the TA’s convenience) in order to help ensure that you are making progress on the project, and to help address problems that you encounter (be they technical or non-technical problems). Preliminary Project Plan . All projects will involve frontend and backend development of a new feature for Covey.Town. Once teams have been formed, you and your team will decide what kind of new feature you would like to build. Your feature should be something that can be implemented within the timeframe allotted (5-7 weeks), and will be implemented in a fork of the main Covey.Town codebase. Given that you will be up-to-speed on the Covey.Town codebase (and have been introduced to TypeScript, React, NodeJS, and testing frameworks), and that you will have a team of three or four, we expect that the feature that you propose will be more complex than the feature implemented in the individual assignments. The project plan will focus on two sections: . | User stories and conditions of satisfaction that describe the feature that you plan to implement. EACH CONDITION OF SATISFACTION MUST HAVE A PRIORITY (Essential, Desirable, or Optional). The set of Essential items will constitute the “Minimum Viable Product” discussed above. | Work breakdown: Map your user stories to engineering tasks. Assign each task to a team member (or pair of team members), provide an estimate for how long each task will take, a rationale for that estimate, and schedule those stories into sprints. | . Creating a GitHub Repository . Your team’s development must take place within a GitHub repository in our GitHub Classroom. This repository will be private, and visible only to your team and the course staff. After the semester ends, you are welcome to make it public - you will have complete administrative control of the repository. We will provide instructions to set up these repositories for all groups and will also provide the starter code for the project (after the revised project plans are submitted). Revised Project Plan . Based on the feedback that you receive from the course staff, you will revise your preliminary project plan, creating a more detailed plan to implement your new feature. The project plan will include: . | Revised user stories and conditions of satisfaction (based on feedback on the preliminary project plan) | Revised work breakdown (based on feedback on the preliminary project plan) | . Your team will self-organize, as agile teams do, and will use the work breakdown and schedule as the basis for weekly check-ins with your team’s TA. Software Development Process . Each team is expected to use of a structured development process, including code reviews. You will also need to ensure appropriate division of labor within the project (i.e., roughly equal). Teams will also be expected to complete regular progress reports (or sprint retrospectives), and individual/team surveys. Peer evaluation may also be used (for Week 6, 8, 10-14). Please note that one of the most important factors in successfully completing a team project is having effective communication. Project Implementation and Documentation . Your final team deliverable will be a “release” of your new feature on GitHub (with tests), and will be accompanied by a demo. Optionally, you may also open a pull request to merge your feature into our main repository (submitting a pull request, or the pull request being merged into our codebase is independent of the grade you receive, but provides a platform for more visiblity of your project). Your final team deliverable will include: . | The implementation of your new feature | Automated tests for your new feature | A Final Report | A Poster &amp; Demo (each instructor will provide specifics of the demo, which might very for each section) | . Accompanying the final team deliverable will be an individual reflection, which every student must submit on their own, which will include your reflections on: . | The evolution of your project concept: How does the project that you delivered compare to what you originally planned to deliver? What caused these deviations? | The software engineering processes that you feel could have been improved in your project: were there any procesess that in hindsight, you wish that you followed, or wish that you followed better? | Your team dynamic: Provide a frank (and ideally, blameless) postmortem of your and your teammates collaborative performance and participation. If you had to do this same project over with the same teammates, what would you have done differently (or not) to improve your team’s overall performance? | . The details for the final project deliverable will be released by Week 9. ",
    "url": "/CS4530-Fall-2023/assignments/project-overview",
    
    "relUrl": "/assignments/project-overview"
  },"92": {
    "doc": "Preliminary Project Plan",
    "title": "Project Plan Due Wednesday October 11, 11:00am ET",
    "content": "All projects will involve frontend and backend development of a new feature for Covey.Town. Once teams have been formed, you and your team will decide what kind of new feature you would like to build. Your feature should be something that can be implemented within the timeframe allotted (5 weeks, plus 2 weeks of planning), and will be implemented in a fork of the main Covey.Town codebase. You can play with a demo deployment of the app at app.covey.town, and in the coming weeks, we will provide tutorials and instructions for you to run the entire application in a local development environment, and also to deploy it to the cloud. Given that you will be up-to-speed on the Covey.Town codebase (and have been introduced to TypeScript, React, NodeJS, and testing frameworks), and that you will have a team of four, we expect that the feature that you propose will be at least as complex as the feature implemented in the individual assignments. Feel free to look at existing systems like Gather.Town, Sococo, Reslash, Screen, and Gatherly.IO for inspiration on new features to build for Covey.Town. Also see the recent NYTimes Magazine article The Race to Fix Fix Virtual Meetings (click here to access through NEU libraries). Examples of features that students might propose include: . | Create some new form of “Interactable” object, such as a whiteboard or game | Create an interface for uploading and choosing between different maps and avatars (will require also learning to use the Phaser3 API) | Add screenreader support - generate a textual representation of the map and what players can do to interact with it | Support real persistence: store data in a database (e.g. Postgres + GraphQL), allow users to register and save a profile (e.g. using Auth0) | Add direct messaging, image messaging, and other chat features | . Please note that multiple teams might choose to propose the same feature, or a variation of that same feature - this is OK. When considering your project, please keep in mind that you will be allowed to publicly post your project online: while your immediate audience for the project is the course staff, if you are ultimately looking for software engineering jobs or co-ops, this project can be a useful piece of your portfolio. If you build a sufficiently maintainable feature (i.e., if your project is particularly well architected and tested), we will also consider pull requests to merge your feature into the main Covey.Town codebase on GitHub, allowing you to also tell recruiters that you have contributed a feature to an open source project on GitHub! . The project plan will include: . | Introductory problem statement | User stories and acceptance criteria: high level description of how users will interact with your new feature. | Work breakdown: Define engineering tasks that will be necessary to implement your new feature. Map each task to a sprint. | . Your assigned TA mentor will review your project plan and provide you with feedback on the scope and details provided in this plan. Your team will self-organize, as agile teams do, and will enhance and adapt its plan during the project lifecycle. As such, the primary goal of this document is to begin the planning process, and not to produce a detailed plan that must be followed precisely. The course staff will provide feedback on your project to help ensure that the scope of your project is appropriate. We list page maximums for each section as general guidance of what we are willing to grade. Please do not feel compelled to use all of the pages provided, and remember that a diagram or table can be as expressive (or more) as a comparable amount of text. ",
    "url": "/CS4530-Fall-2023/assignments/project-plan#project-plan-due-wednesday-october-11-1100am-et",
    
    "relUrl": "/assignments/project-plan#project-plan-due-wednesday-october-11-1100am-et"
  },"93": {
    "doc": "Preliminary Project Plan",
    "title": "Problem Statement, User Stories and Acceptance Criteria (max 4 pages)",
    "content": "Your project plan should begin with a 1-3 paragraph introductory problem statement: what problem in Covey.Town does your (proposed) feature solve? Provide a paragraph (or two) that describes why you are interested in building this feature. Given the problem statement, develop three user stories that show how a user would interact with the feature. User stories are requirements specified in the format “As a &lt; type of user &gt;, I want &lt; some goal &gt; so that &lt; some reason &gt;.” My conditions of satisfaction are &lt; list of common cases and special cases that must work &gt;. Please make sure that your conditions of satification are complete (i.e., cover all common cases) and can be turned into testable behaviors. EACH CONDITION OF SATISFACTION MUST HAVE A PRIORITY (Essential, Desirable, or Optional). The set of Essential items will constitute the “Minimum Viable Product”. You should include three different user stories to describe how users will interact with your feature. Your three user stories should cover the key behavior that your feature will provide. Do not provide more than three user stories. Your problem statement and description of user stories and conditions of satisfaction should be between 2-4 pages. ",
    "url": "/CS4530-Fall-2023/assignments/project-plan#problem-statement-user-stories-and-acceptance-criteria-max-4-pages",
    
    "relUrl": "/assignments/project-plan#problem-statement-user-stories-and-acceptance-criteria-max-4-pages"
  },"94": {
    "doc": "Preliminary Project Plan",
    "title": "Work Breakdown (max 10 pages)",
    "content": "Given the project concept that you have chosen and the functionality that you expect to implement to satisfy your user stories, define a breakdown of the work that will be necessary to complete the project. A work breakdown includes all of the tasks necessary to accomplish the project, and will be an artifact that we will refer back to throughout the project to evaluate whether you are making satisfactory progress. Consider all of the kinds of tasks that your team will need to perform, including knowledge acquisition, design, implementation, testing and documentation tasks. It is hard to say (generically) how many work items are necessary. Each task on the work breakdown should be assigned to exactly one team member, who should provide a “T-Shirt” estimate for how long it will take (along with a justification for that estimate). Consider the dependencies between tests: perhaps an API needs to be designed and specified before implementation can begin; perhaps your development environment needs to be configured before anything else can proceed. Assign tasks to sprints considering these dependencies. Given the preliminary nature of your project, we do not expect that you will know all of the details about precisely how to implement your feature such that you could break it down into tasks that you feel could be implemented in a day or two. Large tasks (those which you can not provide a responsible estimate for) must be accompanied by smaller “research” tasks that can be performed early on in the project. You may wish to provide deadlines by which the task must either be refined into smaller tasks (based on new knowledge gathered), or reworked/abandoned. In keeping with the agile philosophy, you should plan on spending the first two weeks of the project (from September 27 until October 11) in a “Sprint -1” in which you will undertake organizational and research tasks to help you improve your project plan (due on October 11). For example: Consider if you were proposing the “Viewing Area” project (the individual project), without the experience of having completed it. It might be difficult to consider how to break down a task like “Implement the frontend components for sychnronized video playback” into something that you could commit to doing within a day or two. Given that this is a task that can be delayed until the end of the project (no other tasks depend on it), it would be wise to consider having some tasks early on in the project, such as: “Find react components that embed YouTube videos,” and “Implement simple video player that does not synchronize playback.” Completing these smaller tasks early would let you both demonstrate that some forward progress is being made, and also allow you to create a much more responsible estimate for how that last, otherwise insurmountably large task would take. Do not wait for your TA feedback to begin this work. You probably know more about the details of your project then they do. It will be helpful for all concerned if your Project Plan lists the major unknowns or things that you expect to need help with– this will help the TA provide more useful feedback for you . Be realistic, and leave time for contingencies (including the time around the midterm exam on November 1-3). Remember that you will need to have a demo prepared of your feature by 11/29 - just 7 weeks from the due date of this assignment. If you are uncertain that some tasks will be feasible, then be sure to include evaluation tasks earlier-on in the project that will allow for “go/no-go” decisions to move forward on a task or drop it. We understand that it is quite difficult to estimate the technical complexity of a new project (as you are doing in the case of this course). We will provide you with feedback on this preliminary project plan, which you will use to produce a revised project plan (due Oct 25). Throughout the project period, teams will meet regularly with their dedicated TA Mentor, who will help track progress on a week-to-week basis and help to determine when adjustments to the project scope are needed. Each work item should contain the following information: . | Task to be performed | User story (or stories) that this task relates to | Team member responsible for completing the task | T-shirt size estimate of how long will be needed to complete the task, using the following buckets: . | Small: Can likely be completed by one team member in one sitting of less than 3-4 hours | Medium: Likely to require involvement of multiple team members, over the course of 1-2 days | Large: Currently unable to provide a responsible estimate. | . | A brief (1-2 sentence max) justification of how you reached the size estimate of the task | Milestone for delivering the task, chosen from one of the following: . | Sprint 0: Oct 11-Oct 25 | Sprint 1: Oct 26-Nov 1 (Sprint 1 is just a single week) | Sprint 2: Nov 1-Nov 15 | Sprint 3: Nov 16-Nov 29 | . | . Your work breakdown should take the format of a simple textual list. ",
    "url": "/CS4530-Fall-2023/assignments/project-plan#work-breakdown-max-10-pages",
    
    "relUrl": "/assignments/project-plan#work-breakdown-max-10-pages"
  },"95": {
    "doc": "Preliminary Project Plan",
    "title": "Submission",
    "content": "Your project plan should be submitted as a single PDF in Canvas to the assignment “Preliminary Project Plan.” Each team submits a single document to Canvas. This assignment is due Oct 11 at 11am. ",
    "url": "/CS4530-Fall-2023/assignments/project-plan#submission",
    
    "relUrl": "/assignments/project-plan#submission"
  },"96": {
    "doc": "Preliminary Project Plan",
    "title": "Grading",
    "content": "The project plan will account for 10% of your project grade, and will be graded out of 100 points. The grading of the project plan is further broken down as follows: . Introductory problem statement (5 points): . | Receive full marks if there is a narrative consisting of 1-3 paragraphs that describes a specific problem that your project aims to solve. | Receive partial credit if the narrative is present, but does not describe a problem that the project aims to solve | . User stories (15 points): . Each of the three user stories will account for 5% of your grade on this assignment and will be graded as follows: . | Receive full marks if: . | The user story fits the problem statement | The user story satisfies the INVEST criteria for good user stories (construed quite broadly) | The user story includes conditions of satisfaction that cover the “normal” expected behavior of the feature, and any relevant error cases | The conditions of satisfaction include priority | . | . Work breakdown (80 points): . Your work breakdown will be evaluated holistically on the following rubric: . Coverage of tasks needed (20 points): . Receive full marks if the work breakdown includes all (reasonably expected) tasks to implement your feature, considering these kinds of tasks: . | Background research | Design of interfaces and data types | Deployment of third-party services | Implementation | Testing | Documentation | . It is not possible to state generically for all projects whether all of the above types of tasks are necessary. However, we believe that this list is exhaustive (we do not expect other kinds of tasks). Assignment of tasks (10 points): . Receive full marks if: . | Each element on the work breakdown is assigned to one team member | The distribution of tasks of each size are roughly similar between the whole team (no single person is assigned significantly more or fewer tasks of one size) | . Sizing of tasks (40 points): . Receive full marks if each element on the work breakdown: . | Has a size estimate (small, medium, or large) that is provided by the team member assigned the task. | Has a responsible justification for that estimation | Every “large” task: . | Is accompanied by a reasonable explanation of why the team is unnable to provide a responsible estimate | Is accompanied by at least one small or medium task, scheduled well-before the “large” task is due to be completed. We would expect that most of these research tasks are scheduled to sprint 0, or perhaps sprint 1. | . | . Scheduling of tasks (10 points): . Receive full marks if each element on the work breakdown: . | Is assigned to a sprint | There are no obvious constraint violations (tasks that logically must happen before others should be scheduled before them) | There are no “Large” tasks scheduled in sprint 0 | . ",
    "url": "/CS4530-Fall-2023/assignments/project-plan#grading",
    
    "relUrl": "/assignments/project-plan#grading"
  },"97": {
    "doc": "Preliminary Project Plan",
    "title": "Preliminary Project Plan",
    "content": " ",
    "url": "/CS4530-Fall-2023/assignments/project-plan",
    
    "relUrl": "/assignments/project-plan"
  },"98": {
    "doc": "Project Showcase",
    "title": "Section 2",
    "content": " ",
    "url": "/CS4530-Fall-2023/assignments/project-showcase#section-2",
    
    "relUrl": "/assignments/project-showcase#section-2"
  },"99": {
    "doc": "Project Showcase",
    "title": "Group 201: DJ Room",
    "content": "Demo . ",
    "url": "/CS4530-Fall-2023/assignments/project-showcase#group-201-dj-room",
    
    "relUrl": "/assignments/project-showcase#group-201-dj-room"
  },"100": {
    "doc": "Project Showcase",
    "title": "Group 202: Sketch Board",
    "content": "Demo . ",
    "url": "/CS4530-Fall-2023/assignments/project-showcase#group-202-sketch-board",
    
    "relUrl": "/assignments/project-showcase#group-202-sketch-board"
  },"101": {
    "doc": "Project Showcase",
    "title": "Group 203: Poke Town",
    "content": "Demo . ",
    "url": "/CS4530-Fall-2023/assignments/project-showcase#group-203-poke-town",
    
    "relUrl": "/assignments/project-showcase#group-203-poke-town"
  },"102": {
    "doc": "Project Showcase",
    "title": "Group 204: Covey Forums",
    "content": "Demo . ",
    "url": "/CS4530-Fall-2023/assignments/project-showcase#group-204-covey-forums",
    
    "relUrl": "/assignments/project-showcase#group-204-covey-forums"
  },"103": {
    "doc": "Project Showcase",
    "title": "Group 205: Community Garden",
    "content": "Demo . ",
    "url": "/CS4530-Fall-2023/assignments/project-showcase#group-205-community-garden",
    
    "relUrl": "/assignments/project-showcase#group-205-community-garden"
  },"104": {
    "doc": "Project Showcase",
    "title": "Group 206: Covey Radio",
    "content": "Demo . ",
    "url": "/CS4530-Fall-2023/assignments/project-showcase#group-206-covey-radio",
    
    "relUrl": "/assignments/project-showcase#group-206-covey-radio"
  },"105": {
    "doc": "Project Showcase",
    "title": "Group 207: Vote Kick",
    "content": "Demo . ",
    "url": "/CS4530-Fall-2023/assignments/project-showcase#group-207-vote-kick",
    
    "relUrl": "/assignments/project-showcase#group-207-vote-kick"
  },"106": {
    "doc": "Project Showcase",
    "title": "Group 208: Snake Game",
    "content": "Demo . ",
    "url": "/CS4530-Fall-2023/assignments/project-showcase#group-208-snake-game",
    
    "relUrl": "/assignments/project-showcase#group-208-snake-game"
  },"107": {
    "doc": "Project Showcase",
    "title": "Group 209: UNO",
    "content": "Demo . ",
    "url": "/CS4530-Fall-2023/assignments/project-showcase#group-209-uno",
    
    "relUrl": "/assignments/project-showcase#group-209-uno"
  },"108": {
    "doc": "Project Showcase",
    "title": "Group 210: Spotify Jukebox",
    "content": "Demo . ",
    "url": "/CS4530-Fall-2023/assignments/project-showcase#group-210-spotify-jukebox",
    
    "relUrl": "/assignments/project-showcase#group-210-spotify-jukebox"
  },"109": {
    "doc": "Project Showcase",
    "title": "Group 211: CoveyCorners Forum",
    "content": "Demo . ",
    "url": "/CS4530-Fall-2023/assignments/project-showcase#group-211-coveycorners-forum",
    
    "relUrl": "/assignments/project-showcase#group-211-coveycorners-forum"
  },"110": {
    "doc": "Project Showcase",
    "title": "Group 212: Covey Hats",
    "content": "Demo . ",
    "url": "/CS4530-Fall-2023/assignments/project-showcase#group-212-covey-hats",
    
    "relUrl": "/assignments/project-showcase#group-212-covey-hats"
  },"111": {
    "doc": "Project Showcase",
    "title": "Section 4",
    "content": " ",
    "url": "/CS4530-Fall-2023/assignments/project-showcase#section-4",
    
    "relUrl": "/assignments/project-showcase#section-4"
  },"112": {
    "doc": "Project Showcase",
    "title": "Group 401: Hide and Seek Game",
    "content": "Demo . ",
    "url": "/CS4530-Fall-2023/assignments/project-showcase#group-401-hide-and-seek-game",
    
    "relUrl": "/assignments/project-showcase#group-401-hide-and-seek-game"
  },"113": {
    "doc": "Project Showcase",
    "title": "Group 402: Covey Vehicles",
    "content": "Demo . ",
    "url": "/CS4530-Fall-2023/assignments/project-showcase#group-402-covey-vehicles",
    
    "relUrl": "/assignments/project-showcase#group-402-covey-vehicles"
  },"114": {
    "doc": "Project Showcase",
    "title": "Group 403: JukeBox",
    "content": "Demo . ",
    "url": "/CS4530-Fall-2023/assignments/project-showcase#group-403-jukebox",
    
    "relUrl": "/assignments/project-showcase#group-403-jukebox"
  },"115": {
    "doc": "Project Showcase",
    "title": "Group 404: Stock Exchange",
    "content": "Demo . ",
    "url": "/CS4530-Fall-2023/assignments/project-showcase#group-404-stock-exchange",
    
    "relUrl": "/assignments/project-showcase#group-404-stock-exchange"
  },"116": {
    "doc": "Project Showcase",
    "title": "Group 405: CoveyTown Fishing",
    "content": "Demo . ",
    "url": "/CS4530-Fall-2023/assignments/project-showcase#group-405-coveytown-fishing",
    
    "relUrl": "/assignments/project-showcase#group-405-coveytown-fishing"
  },"117": {
    "doc": "Project Showcase",
    "title": "Group 406: Art Auction House",
    "content": "Demo . ",
    "url": "/CS4530-Fall-2023/assignments/project-showcase#group-406-art-auction-house",
    
    "relUrl": "/assignments/project-showcase#group-406-art-auction-house"
  },"118": {
    "doc": "Project Showcase",
    "title": "Group 407: WordleTown",
    "content": "Demo . ",
    "url": "/CS4530-Fall-2023/assignments/project-showcase#group-407-wordletown",
    
    "relUrl": "/assignments/project-showcase#group-407-wordletown"
  },"119": {
    "doc": "Project Showcase",
    "title": "Group 408: Draw the Perfect Shape",
    "content": "Demo . ",
    "url": "/CS4530-Fall-2023/assignments/project-showcase#group-408-draw-the-perfect-shape",
    
    "relUrl": "/assignments/project-showcase#group-408-draw-the-perfect-shape"
  },"120": {
    "doc": "Project Showcase",
    "title": "Group 409: Connect4",
    "content": "Demo . ",
    "url": "/CS4530-Fall-2023/assignments/project-showcase#group-409-connect4",
    
    "relUrl": "/assignments/project-showcase#group-409-connect4"
  },"121": {
    "doc": "Project Showcase",
    "title": "Group 410: Battle Ship",
    "content": "Demo . ",
    "url": "/CS4530-Fall-2023/assignments/project-showcase#group-410-battle-ship",
    
    "relUrl": "/assignments/project-showcase#group-410-battle-ship"
  },"122": {
    "doc": "Project Showcase",
    "title": "Group 411: Chess Game",
    "content": "Demo . ",
    "url": "/CS4530-Fall-2023/assignments/project-showcase#group-411-chess-game",
    
    "relUrl": "/assignments/project-showcase#group-411-chess-game"
  },"123": {
    "doc": "Project Showcase",
    "title": "Section 6",
    "content": " ",
    "url": "/CS4530-Fall-2023/assignments/project-showcase#section-6",
    
    "relUrl": "/assignments/project-showcase#section-6"
  },"124": {
    "doc": "Project Showcase",
    "title": "Group 601: Farmer’s Fury",
    "content": "Demo . ",
    "url": "/CS4530-Fall-2023/assignments/project-showcase#group-601-farmers-fury",
    
    "relUrl": "/assignments/project-showcase#group-601-farmers-fury"
  },"125": {
    "doc": "Project Showcase",
    "title": "Group 602: User and Town Persistence",
    "content": "Demo . ",
    "url": "/CS4530-Fall-2023/assignments/project-showcase#group-602-user-and-town-persistence",
    
    "relUrl": "/assignments/project-showcase#group-602-user-and-town-persistence"
  },"126": {
    "doc": "Project Showcase",
    "title": "Group 603: Stop Motion Studio",
    "content": "Demo . ",
    "url": "/CS4530-Fall-2023/assignments/project-showcase#group-603-stop-motion-studio",
    
    "relUrl": "/assignments/project-showcase#group-603-stop-motion-studio"
  },"127": {
    "doc": "Project Showcase",
    "title": "Group 604: Gomoku Game",
    "content": "Demo . ",
    "url": "/CS4530-Fall-2023/assignments/project-showcase#group-604-gomoku-game",
    
    "relUrl": "/assignments/project-showcase#group-604-gomoku-game"
  },"128": {
    "doc": "Project Showcase",
    "title": "Group 605: Weather Forecast",
    "content": "Demo . ",
    "url": "/CS4530-Fall-2023/assignments/project-showcase#group-605-weather-forecast",
    
    "relUrl": "/assignments/project-showcase#group-605-weather-forecast"
  },"129": {
    "doc": "Project Showcase",
    "title": "Group 606: Art Canvas",
    "content": "Demo . ",
    "url": "/CS4530-Fall-2023/assignments/project-showcase#group-606-art-canvas",
    
    "relUrl": "/assignments/project-showcase#group-606-art-canvas"
  },"130": {
    "doc": "Project Showcase",
    "title": "Group 607: Hangman Game",
    "content": "Demo . ",
    "url": "/CS4530-Fall-2023/assignments/project-showcase#group-607-hangman-game",
    
    "relUrl": "/assignments/project-showcase#group-607-hangman-game"
  },"131": {
    "doc": "Project Showcase",
    "title": "Group 608: UNO Game",
    "content": "Demo . ",
    "url": "/CS4530-Fall-2023/assignments/project-showcase#group-608-uno-game",
    
    "relUrl": "/assignments/project-showcase#group-608-uno-game"
  },"132": {
    "doc": "Project Showcase",
    "title": "Group 609: Character Customization and SSO",
    "content": "Demo . ",
    "url": "/CS4530-Fall-2023/assignments/project-showcase#group-609-character-customization-and-sso",
    
    "relUrl": "/assignments/project-showcase#group-609-character-customization-and-sso"
  },"133": {
    "doc": "Project Showcase",
    "title": "Group 610: Database Integration",
    "content": "Demo . ",
    "url": "/CS4530-Fall-2023/assignments/project-showcase#group-610-database-integration",
    
    "relUrl": "/assignments/project-showcase#group-610-database-integration"
  },"134": {
    "doc": "Project Showcase",
    "title": "Group 611: Voting Area",
    "content": "Demo . ",
    "url": "/CS4530-Fall-2023/assignments/project-showcase#group-611-voting-area",
    
    "relUrl": "/assignments/project-showcase#group-611-voting-area"
  },"135": {
    "doc": "Project Showcase",
    "title": "Section 7",
    "content": " ",
    "url": "/CS4530-Fall-2023/assignments/project-showcase#section-7",
    
    "relUrl": "/assignments/project-showcase#section-7"
  },"136": {
    "doc": "Project Showcase",
    "title": "Group 701: Tradign Cards API",
    "content": "Demo . ",
    "url": "/CS4530-Fall-2023/assignments/project-showcase#group-701-tradign-cards-api",
    
    "relUrl": "/assignments/project-showcase#group-701-tradign-cards-api"
  },"137": {
    "doc": "Project Showcase",
    "title": "Group 702: Music Areas",
    "content": "Demo . ",
    "url": "/CS4530-Fall-2023/assignments/project-showcase#group-702-music-areas",
    
    "relUrl": "/assignments/project-showcase#group-702-music-areas"
  },"138": {
    "doc": "Project Showcase",
    "title": "Group 703: Bomberman",
    "content": "Demo . ",
    "url": "/CS4530-Fall-2023/assignments/project-showcase#group-703-bomberman",
    
    "relUrl": "/assignments/project-showcase#group-703-bomberman"
  },"139": {
    "doc": "Project Showcase",
    "title": "Group 704: Covey Docs",
    "content": "Demo . ",
    "url": "/CS4530-Fall-2023/assignments/project-showcase#group-704-covey-docs",
    
    "relUrl": "/assignments/project-showcase#group-704-covey-docs"
  },"140": {
    "doc": "Project Showcase",
    "title": "Group 705: Covey Whiteboard",
    "content": "Demo . ",
    "url": "/CS4530-Fall-2023/assignments/project-showcase#group-705-covey-whiteboard",
    
    "relUrl": "/assignments/project-showcase#group-705-covey-whiteboard"
  },"141": {
    "doc": "Project Showcase",
    "title": "Group 706: JukeBox Area",
    "content": "Demo . ",
    "url": "/CS4530-Fall-2023/assignments/project-showcase#group-706-jukebox-area",
    
    "relUrl": "/assignments/project-showcase#group-706-jukebox-area"
  },"142": {
    "doc": "Project Showcase",
    "title": "Group 707: Cover.Jam",
    "content": "Demo . ",
    "url": "/CS4530-Fall-2023/assignments/project-showcase#group-707-coverjam",
    
    "relUrl": "/assignments/project-showcase#group-707-coverjam"
  },"143": {
    "doc": "Project Showcase",
    "title": "Project Showcase",
    "content": "Posters and Demos from this semester can be found below: . | Section 2 | Section 4 | Section 6 | Section 7 | . The following group projects were chosen as best projects by their peers: 203, 401 and 707 . ",
    "url": "/CS4530-Fall-2023/assignments/project-showcase",
    
    "relUrl": "/assignments/project-showcase"
  },"144": {
    "doc": "Other Resources",
    "title": "Other Resources",
    "content": "There are many articles, blogs, books and podcasts that are very interesting for more reading on the topics discussed in class. We’ll update this list as the semester goes, and if you have suggestions of materials to share, please let us know and we’ll add it to the list. Podcasts . The Software Engineering Radio podcast (also available wherever you get your podcasts) aims to produce educational material for professional softare developers, and includes conversations between experts and researchers on various software engineering topics. Here are a few of our favorites that are most relevant to topics that we cover in this class: . | Donny Nadolny on Debugging Distributed Systems, with Robert Blumen, 2017 | Jafar Soltani on Continuous Delivery for Multiplayer Games, with Nate Black, 2018 | Chris Richardson on Microservice Patterns, with Robert Blumen, 2019 | Margaret Burnett on Gender, Cognitive Styles and Usability Bugs, with Felienne Hermans, 2019 | Michaela Greiler on Code Reviews, with Felienne Hermans, 2020 | Ipek Ozkaya on Managing Technical Debt, 2021 | . Code style . | Research paper: To camelcase or under_score, Dave Binkley et al | Book (free via library): “Refactoring: Improving the Design of Existing Code” By Martin Fowler The definitive list of “code smells” that should be avoiding in programming, matched up with “refactoring” techniques to improve that code | . Debugging . | Book (free via library): “Effective Debugging: 66 Specific Ways to Debug Software and Systems” by Diomidis SpinellisA helpful guidebook for debugging, laying out different strategies that are effective for testing different kinds of debugging hypotheses. | . Design Patterns . | Book (free via library): “Design Patterns Explained: A New Perspective on Object-Oriented Design” by Alan Shalloway and James TrottIn-depth coverage of design patterns, considering why they are important in software development, how to apply them, and descriptions of some common patterns. | Book (free via library): “Refactoring to Patterns” by Joshua KerievskyA unification of the classic Gang of Four Design Patterns work with Fowler’s refactoring work, with practical example of how to introduce patterns into existing code bases to improve code quality. | “Fundamentals of Software Architecture” By Mark Richards and Neal Ford An overview of software architectural patterns and their role in successful software projects. | . Infrastructure + Operations . | Book (free via library) “Site Reliability Engineering” By Betsy Beyer, Chris Jones, Niall Richard Murphy, Jennifer Petoff Site Reliability Engineering is a topic very related to software engineering: while software engineers might focus primarily on the design and development of software systems, SRE’s are engineers who focus on the deployment, monitoring and maintenance of that software. This book documents the SRE practices at Google. | . JavaScript . | Book (free via library): “Modern JavaScript for the Impatient” by Cay Horstmann | . Program Understanding . | Book: “The Programmer’s Brain” by Felienne Hermans A survey of research on programming and cognition, covering topics such as how to read code more effectively and how to write code that is easier to read and share. | . ",
    "url": "/CS4530-Fall-2023/resources/",
    
    "relUrl": "/resources/"
  },"145": {
    "doc": "Revised Project Plan",
    "title": "Revised Project Plan Due Wednesday October 25, 11:00am ET",
    "content": "You should use the feedback on your preliminary project plan to revise the scope of your project, and discuss any changes with your assigned TA. The goal of this assignment is to finalize the intended scope of your project based on these discussions and to outline the tasks that you will need to accomplish in order to complete your project. Your assigned TA mentor will review your project plan and provide you with feedback on the scope and details provided in your preliminary plan. In this deliverable, you will revise your project plan based on that feedback, and any preliminary research tasks that you have completed. If there were any deficiencies or concerns noted by your TA mentor on your preliminary plan, you must address those concerns in this revised plan. If you are unsure of how to address any of these concerns or if you have addressed them, please discuss them with your TA mentor before submitting this revised plan. We list page maximums for each section as general guidance of what we are willing to grade. Please do not feel compelled to use all of the pages provided, and remember that a diagram or table can be as expressive (or more) as a comparable amount of text. ",
    "url": "/CS4530-Fall-2023/assignments/revised-project-plan#revised-project-plan-due-wednesday-october-25-1100am-et",
    
    "relUrl": "/assignments/revised-project-plan#revised-project-plan-due-wednesday-october-25-1100am-et"
  },"146": {
    "doc": "Revised Project Plan",
    "title": "Revised Problem Statement, User Stories and Acceptance Criteria (max 4 pages)",
    "content": "Your revised project plan should begin with a 1-3 paragraph introductory problem statement: what problem in Covey.Town does your (proposed) feature solve? Provide a paragraph (or two) that describes why you are interested in building this feature. Given the problem statement, develop three user stories that show how a user would interact with the feature. User stories are requirements specified in the format “As a &lt; type of user &gt;, I want &lt; some goal &gt; so that &lt; some reason &gt;.” My conditions of satisfaction are &lt; list of common cases and special cases that must work &gt;. Please make sure that your conditions of satification are complete (i.e., cover all common cases) and can be turned into testable behaviors. EACH CONDITION OF SATISFACTION MUST HAVE A PRIORITY (Essential, Desirable, or Optional). EACH USER STORY MUST HAVE SOME ESSENTIAL AND/OR DESIRABLE CONDITIONS OF SATISFACTION. The set of essential items will constitute the “Minimum Viable Product”. You should include three different user stories to describe how users will interact with your feature. Your three user stories should cover the key behavior that your feature will provide. Do not provide more than three user stories. Your problem statement and description of user stories and conditions of satisfaction should be between 2-4 pages. This revised project plan should be a standalone document (it is OK to copy/paste from the preliminary plan in this case). ",
    "url": "/CS4530-Fall-2023/assignments/revised-project-plan#revised-problem-statement-user-stories-and-acceptance-criteria-max-4-pages",
    
    "relUrl": "/assignments/revised-project-plan#revised-problem-statement-user-stories-and-acceptance-criteria-max-4-pages"
  },"147": {
    "doc": "Revised Project Plan",
    "title": "Revised Work Breakdown (max 10 pages)",
    "content": "Given the project concept that you have chosen and the functionality that you expect to implement to satisfy your user stories, define a breakdown of the work that will be necessary to complete the project. This breakdown is required for all essential, desirable and optional tasks. A work breakdown includes all of the tasks necessary to accomplish the project, and will be an artifact that we will refer back to throughout the project to evaluate whether you are making satisfactory progress. Consider all of the kinds of tasks that your team will need to perform, including knowledge acquisition, design, implementation, testing and documentation tasks. It is hard to say (generically) how many work items are necessary. Each task on the work breakdown should be assigned to exactly one team member, who should provide a “T-Shirt” estimate for how long it will take (along with a justification for that estimate). Consider the dependencies between tests: perhaps an API needs to be designed and specified before implementation can begin; perhaps your development environment needs to be configured before anything else can proceed. Assign tasks to sprints considering these dependencies. Given the preliminary nature of your project, we do not expect that you will know all of the details about precisely how to implement your feature such that you could break it down into tasks that you feel could be implemented in a day or two. Large tasks (those which you can not provide a responsible estimate for) must be accompanied by smaller “research” tasks that can be performed early on in the project. You may wish to provide deadlines by which the task must either be refined into smaller tasks (based on new knowledge gathered), or reworked/abandoned. In keeping with the agile philosophy, you should plan on spending the first two weeks of the project (from September 27 until October 11) in a “Sprint -1” in which you will undertake organizational and research tasks to help you improve your project plan (due on October 11). For example: Consider if you were proposing the “Viewing Area” project (the individual project), without the experience of having completed it. It might be difficult to consider how to break down a task like “Implement the frontend components for sychnronized video playback” into something that you could commit to doing within a day or two. Given that this is a task that can be delayed until the end of the project (no other tasks depend on it), it would be wise to consider having some tasks early on in the project, such as: “Find react components that embed YouTube videos,” and “Implement simple video player that does not synchronize playback.” Completing these smaller tasks early would let you both demonstrate that some forward progress is being made, and also allow you to create a much more responsible estimate for how that last, otherwise insurmountably large task would take. Do not wait for your TA feedback to begin this work. You probably know more about the details of your project then they do. It will be helpful for all concerned if your Project Plan lists the major unknowns or things that you expect to need help with– this will help the TA provide more useful feedback for you . Be realistic, and leave time for contingencies (including the time around the midterm exam on Nov 1-3). Remember that you will need to have a demo prepared of your feature by 11/29 - just 5 weeks from the due date of this assignment. If you are uncertain that some tasks will be feasible, then be sure to include evaluation tasks earlier-on in the project that will allow for “go/no-go” decisions to move forward on a task or drop it. We understand that it is quite difficult to estimate the technical complexity of a new project (as you are doing in the case of this course). Throughout the project period, teams will meet regularly with their dedicated TA Mentor, who will help track progress on a week-to-week basis and help to determine when adjustments to the project scope are needed. Each work item should contain the following information: . | Task to be performed | User story (or stories) that this task relates to | Team member responsible for completing the task | T-shirt size estimate of how long will be needed to complete the task, using the following buckets: . | Small: Can likely be completed by one team member in one sitting of less than 3-4 hours | Medium: Likely to require involvement of multiple team members, over the course of 1-2 days | Large: Currently unable to provide a responsible estimate. | . | A brief (1-2 sentence max) justification of how you reached the size estimate of the task | Milestone for delivering the task, chosen from one of the following: . | Sprint 0: Oct 11-Oct 25 | Sprint 1: Oct 26-Nov 1 (Sprint 1 is just a single week) | Sprint 2: Nov 1-Nov 15 | Sprint 3: Nov 16-Nov 29 | . | . Your work breakdown may take the format of a simple textual list. Mandatory update for all teams: Even if your work breakdown is entirely unchanged compared to the preliminary plan, please be certain to include updates on all “sprint -1” tasks (those which were scheduled to be completed before the due date of this revised plan). Many teams included research/learning tasks in the first week to help inform the rest of the work breakdown: you should be certain to revise your work breakdown based on what you have learned so far. Please note that in order to receive full credit for the final delivered product, each team is expected to deliver Minimum Viable Product (marked as essential) and additional features proposed in the project plan (marked as desirables). Please plan your work accordingly. ",
    "url": "/CS4530-Fall-2023/assignments/revised-project-plan#revised-work-breakdown-max-10-pages",
    
    "relUrl": "/assignments/revised-project-plan#revised-work-breakdown-max-10-pages"
  },"148": {
    "doc": "Revised Project Plan",
    "title": "Submission",
    "content": "Your revised project plan should be submitted as a single PDF on Canvas under the assignment “Revised Project Plan.” Each team submits a single document. This assignment is due Oct 25 at 11am. ",
    "url": "/CS4530-Fall-2023/assignments/revised-project-plan#submission",
    
    "relUrl": "/assignments/revised-project-plan#submission"
  },"149": {
    "doc": "Revised Project Plan",
    "title": "Grading",
    "content": "The revised project plan will account for 10% of your project grade, and will be graded out of 100 points. The grading of the revised project plan is further broken down as follows: . Introductory problem statement (5 points): . | Receive full marks if there is a narrative consisting of 1-3 paragraphs that describes a specific problem that your project aims to solve. | Receive partial credit if the narrative is present, but does not describe a problem that the project aims to solve | . User stories (45 points): . Each of the three user stories will account for 5% of your grade on this assignment and will begraded as follows: . | Receive full marks if: . | The user story fits the problem statement | The user story satisfies the INVEST criteria for good user stories (construed quite broadly) | The user story includes conditions of satisfaction that cover the “normal” expected behavior of the feature, and any relevant error cases | Conditions of satisfaction can be turned into Testable behaviors | Conditions of satisfaction are prioritized | Any deficiencies or concerns noted by your TA mentor on your preliminary plan are addressed | . | . Work breakdown (50 points): . Your work breakdown will be evaluated holistically on the following rubric: . Coverage of tasks needed (20 points): . Receive full marks if the work breakdown includes all (reasonably expected) tasks to implement your feature, considering these kinds of tasks: . | Background research | Design of interfaces and data types | Deployment of third-party services | Implementation | Testing | Documentation | . It is not possible to state generically for all projects whether all of the above types of tasks are necessary. However, we believe that this list is exhaustive (we do not expect other kinds of tasks). Assignment of tasks (5 points): . Receive full marks if: . | Each element on the work breakdown is assigned to one team member | The distribution of tasks of each size are roughly similar between the whole team (no single person is assigned significantly more or fewer tasks of one size) | Any deficiencies or concerns noted by your TA mentor on your preliminary plan are addressed | . Sizing of tasks (20 points): . Receive full marks if each element on the work breakdown: . | Has a size estimate (small, medium, or large) that is provided by the team member assigned the task. | Has a responsible justification for that estimation | Every “large” task: . | Is accompanied by a reasonable explanation of why the team is unnable to provide a responsible estimate | Is accompanied by at least one small or medium task, scheduled well-before the “large” task is due to be completed. We would expect that most of these research tasks are scheduled to sprint -1, or perhaps sprint 0. | . | Any deficiencies or concerns noted by your TA mentor on your preliminary plan are addressed | . Scheduling of tasks (5 points): . Receive full marks if each element on the work breakdown: . | Is assigned to a sprint | There are no obvious constraint violations (tasks that logically must happen before others should be scheduled before them) | There are no “Large” tasks scheduled in sprint 0 | Tasks scheduled to be completed before 3/1 have an update as to their status, and the work breakdown is updated to reflect the result of these tasks. | Any deficiencies or concerns noted by your TA mentor on your preliminary plan are addressed | . ",
    "url": "/CS4530-Fall-2023/assignments/revised-project-plan#grading",
    
    "relUrl": "/assignments/revised-project-plan#grading"
  },"150": {
    "doc": "Revised Project Plan",
    "title": "Revised Project Plan",
    "content": " ",
    "url": "/CS4530-Fall-2023/assignments/revised-project-plan",
    
    "relUrl": "/assignments/revised-project-plan"
  },"151": {
    "doc": "Section 2 - Calendar",
    "title": "Section 2 - Calendar",
    "content": " ",
    "url": "/CS4530-Fall-2023/calendar/s2",
    
    "relUrl": "/calendar/s2"
  },"152": {
    "doc": "Section 4 - Calendar",
    "title": "Section 4 - Calendar",
    "content": " ",
    "url": "/CS4530-Fall-2023/calendar/s4",
    
    "relUrl": "/calendar/s4"
  },"153": {
    "doc": "Section 6 - Calendar",
    "title": "Section 6 - Calendar",
    "content": " ",
    "url": "/CS4530-Fall-2023/calendar/s6",
    
    "relUrl": "/calendar/s6"
  },"154": {
    "doc": "Section 7 - Calendar",
    "title": "Section 7 - Calendar",
    "content": " ",
    "url": "/CS4530-Fall-2023/calendar/s7",
    
    "relUrl": "/calendar/s7"
  },"155": {
    "doc": "Calendar",
    "title": "Calendar",
    "content": "Given the synchronization amongst the sections, and the academic calendar starting on a Wednesday, the course material generally is designed to run on weeks from Wednesday-Tuesday. We provide a schedule for each section: . ",
    "url": "/CS4530-Fall-2023/calendar/",
    
    "relUrl": "/calendar/"
  },"156": {
    "doc": "Staff",
    "title": "Staff",
    "content": "For technical questions related to Covey.Town, please check piazza first (or post a query there). For discussing the course material or the individual projects / homework assignments, please feel free to attend whichever TA’s office hours are convenient. For project-related questions, please coordinate a time to chat directly with your assigned project mentor. ",
    "url": "/CS4530-Fall-2023/staff/",
    
    "relUrl": "/staff/"
  },"157": {
    "doc": "Staff",
    "title": "Office Hours",
    "content": "All TA office hours will be held virtually. We will explore the option of holding in-person office hours too, subject to interest from students/TAs and availability of a room. Instructor office hours may be held in-person or remotely. TA Office Hours are hosted on Microsoft Teams, using the Khoury Office Hours app. Please see the user guide for information on how to log in and ask questions. ",
    "url": "/CS4530-Fall-2023/staff/#office-hours",
    
    "relUrl": "/staff/#office-hours"
  },"158": {
    "doc": "Staff",
    "title": "Schedule",
    "content": " ",
    "url": "/CS4530-Fall-2023/staff/#schedule",
    
    "relUrl": "/staff/#schedule"
  },"159": {
    "doc": "Staff",
    "title": "Instructors",
    "content": "Adeel Bhutta . a.bhutta@northeastern.edu . Section: CS4530 Sections 2, 4 &amp; 7 . Office Hours: . | In-Person: Monday and Thursday 130-230pm, Meserve 337 | or by appointment | . Mitch Wand . wand@ccs.neu.edu . Section: CS4530 Section 6 . Office Hours: . | Tues 11-12, https://northeastern.zoom.us/j/95664677844 | . ",
    "url": "/CS4530-Fall-2023/staff/#instructors",
    
    "relUrl": "/staff/#instructors"
  },"160": {
    "doc": "Staff",
    "title": "Teaching Assistants",
    "content": "Anurag Arasan . arasan.a@northeastern.edu . Aryan Jain . jain.aryan@northeastern.edu . Sai Sriker Reddy Vootukuri . vootukuri.s@northeastern.edu . Sanjana Kandunoori . kandunoori.s@northeastern.edu . Sharan Parikh . parikh.shar@northeastern.edu . Shashwat Rathod . rathod.sh@northeastern.edu . Spandana Reddy Dara . dara.s@northeastern.edu . Sushruth Prasannakumar Konapur . konapur.s@northeastern.edu . Udit Sankhadasasriya . sankhadasariya.u@northeastern.edu . Venkata Leelakrishna Kodipunjula . kodipunjula.v@northeastern.edu . Vivekananda Reddy Kamasani . kamasani.v@northeastern.edu . ",
    "url": "/CS4530-Fall-2023/staff/#teaching-assistants",
    
    "relUrl": "/staff/#teaching-assistants"
  },"161": {
    "doc": "Code Style",
    "title": "Code Style",
    "content": "Programs are easier to read and to understand when they are written in a familiar style and follow standard coding conventions. Most organizations that develop software therefore require programmers to write programs that follow the organization’s preferred style and coding conventions. These conventions can be very elaborate. Many of the guidelines are, in fact, arbitrary. When you are working on a coding project with other developers, different developers often have preference for slightly different syntax, for instance: should our string literals be enclosed by single quotes (') or double quotes (\")? Should files be indented with spaces or tabs? In TypeScript, there are often multiple ways to accomplish the same goal, for instance, you could create a new empty array with the expression const myArray = new Array(), or const myArray = []. Sometimes there is no difference between these variants except for how it reads, and other times there may be unintended consequences of making the seemingly correct but subtly wrong choice. Thankfully, it is possible to write automated checkers (and, at times, fixers) for these style violations. All code that you write for this class will be checked by ESLint, and must be free of style warnings and errors. Our ESlint rules are derived from Airbnb’s JavaScript Style Guide, ESLint’s Recommended Rules, TypeScript/ESLint Recommended Rules, React ESLint Rules and React Hooks ESLint Rules. We do not suggest studying these lists directly, instead, begin writing code naturally, and allow your IDE’s built-in style checker to report issues as you find them. The most important rules to get started are: . | Indent using spaces, not tabs; use 2 spaces for each level of indentation | Enclose all string literals with single quotes, not double | Variables must be named using lowerCamelCase, types are named using UpperCamelCase. Constants (read-only variables that are assigned a static value once and not reused) must be named using UPPER_CASE_WITH_UNDERSCORES. | The maximum line length is 100 characters | . Naming . While the linter can automatically flag names that violate camelCase rules, it can not automatically determine that a name is “good” - this is a subjective judgement call. Please consider the following when choosing names: . | Names should be informative (e.g lineTooLong() rather than checkLineLength()) | Names for types are typically nouns or noun phrases. Interface names, however, might be adjectives (e.g. Serializable). Class names may be noun phrases that include the interface name (e.g. CuckooClock and DigitalClock for classes that implement the interface Clock). | Use noun-like names for functions or methods that return values (e.g. circleDiameter rather than calculateDiameter). (Exception: simple getters can still have names that begin with get). | Reserve verb-like names for functions that perform actions (e.g. addItem). | Use adjective phrases for predicates when possible (e.g. line.tooLong()) | Variable and property names should be descriptive of what the variable is for, and not be named after the type of the variable (which is captured in the variable’s type declaration) | Names for properties that are private must start with a _ | . Documentation and Comments . All public properties and methods (other than getters, setters, and constructors) must be documented using JSDoc-style comments that describes what the property/method does. Example: . /** The unique identifier for this player * */ private readonly _id: string; . /** * A handler to process a remote player's subscription to updates for a room * * @param socket the Socket object that we will use to communicate with the player */ . Consider adding comments within your code to describe non-obvious behavior, or to capture why the code is written the way that it is. Do not add comments that simply restate what can already be immediately discerned by reading the code. For example, here is a useful comment: . // No valid session exists for this token, hence this client's connection should be terminated socket.disconnect(true); return; . Here is a useless comment on the same code snippet: . // Disconnect the socket socket.disconnect(true); return; . Comments are for documentation, not for keeping track of old code you are no longer using (do not submit commented-out code). ",
    "url": "/CS4530-Fall-2023/policies/style/",
    
    "relUrl": "/policies/style/"
  },"162": {
    "doc": "Textbooks",
    "title": "Textbooks",
    "content": "This class is a survey of many sub-areas of software engineering, and an unfortunate result of this is that there is no single textbook that is appropriate for this class. However, there are several texts that have chapters that are quite relevant, and most of these books are available for free for Northeastern students through O’Reilly’s Safari Books online. To create your account, first visit this page: https://www.safaribooksonline.com/library/view/temporary-access/ and then select “Not Listed? Click Here” for institution, then enter your @northeastern.edu email address. After this first account creation, you’ll be able to log in directly to Safari Books Online with your @northeastern.edu email and no need for 2FA (hooray!). The schedule will list which chapters of which texts are relevant for each lecture: . | “Software Engineering at Google” By Titus Winters, Tom Manshreck and Hyrum Wright This book is effectively a manual that describes the software engineering practices at Google, and the rationale behind those practices | “Effective Software Testing: A Developer’s Guide” by Mauricio Aniche (Not on Safari) A focused discussion of software testing concepts, with concrete examples using popular Java testing frameworks. | “The Programmer’s Brain” by Felienne Hermans (Not on Safari) A survey of research on programming and cognition, covering topics such as how to read code more effectively and how to write code that is easier to read and share. | “Fundamentals of Software Architecture” By Mark Richards and Neal Ford An overview of software architectural patterns and their role in successful software projects. | “Refactoring: Improving the Design of Existing Code” By Martin Fowler The definitive list of “code smells” that should be avoiding in programming, matched up with “refactoring” techniques to improve that code | “Learn React with TypeScript 3” by Carl RipponA solid reference for React, describing how to get started, plus more advanced features like React’s Router and testing using Jest | “Programming TypeScript” by Boris ChernyA useful introduction to TypeScript, written assuming familiarity with programming in languages like Java, C# or python. | . ",
    "url": "/CS4530-Fall-2023/textbooks/",
    
    "relUrl": "/textbooks/"
  },"163": {
    "doc": "Tutorials",
    "title": "Tutorials",
    "content": " ",
    "url": "/CS4530-Fall-2023/tutorials/",
    
    "relUrl": "/tutorials/"
  },"164": {
    "doc": "Installing a Development Environment",
    "title": "Installing NodeJS",
    "content": "Node.js is a JavaScript runtime built on Chrome’s V8 JavaScript engine. For this class, you will need Node.js version 18 (18.13.0 was the latest version at time of writing, although any 18.x or 16.x should work in theory). There are many ways that you can install Node.js: for instance, you can use a package manager like snap or homebrew to install it; you can download an installer directly from the Node.js website, and you can, of course, build it from source. However, due to the complexity of running different Node.js versions on the same machine, we very strongly suggest using nvm, as explained below. We recommend installing Node.js using nvm, the node version manager. When language runtimes are in active development (like Node.js is), sometimes you end up needing to have multiple versions of Node.js installed, and different projects that you work on might require different versions of Node.js. These annoyances are quite rare, but when it happens that you need to have mutliple versions of Node.js installed, it’s super handy to have your system set up already so that installing multiple versions and switching between it is easy. You can use our instructions to set up nvm even if you have previously installed Node.js. ",
    "url": "/CS4530-Fall-2023/tutorials/week1-getting-started#installing-nodejs",
    
    "relUrl": "/tutorials/week1-getting-started#installing-nodejs"
  },"165": {
    "doc": "Installing a Development Environment",
    "title": "Installing NodeJS with NVM for Windows",
    "content": ". | Download nvm-setup.zip from the most recent release of nvm-windows (at time of writing this document, version was 1.1.10). | . | Extract the contents of nvm-setup.zip and run the executable nvm-setup.exe. | This should open the nvm installation wizard. | . | Accept the license agreement and click next. Continue to accept the default choices for any remaining prompts, and click “install”. If you receive messages along the lines of “NodeJS version XYZ is already installed, would you like nvm to control this installation,” select “Yes”. | Upon completion, you will see the below window . | . | Open a command prompt with administrative privileges (type cmd in the windows start bar, then select “Run as administrator”). | Verify the installation, run the command nvm version . | This should display the version of nvm installed. | | . | Run the command nvm list available to display all available NodeJS versions. | . | Install the latest LTS (Long term supported, as opposed to the “development”) version of Node.js available using the command nvm install lts. | To use this version of NodeJS, run the command nvm use lts. | Now, NodeJS should be installed and ready for use. To verify the installation run the below commands: . | node -v | npm -v | . | . You should see something like the following As of 1/09/23 on Windows, the most current versions were: node: 18.13.0 and npm: 8.19.3 . | . Troubleshooting with VSCode: Did you follow these instructions successfully, but find a “Command not found” error when you try to run npm in VSCode? Try this: Close VSCode completely. Re-open it. In your command shell in VSCode, try again. We have noticed that if you have VSCode open while installing nvm, it is possible that VSCode will not see the new software installation until it’s closed and re-opened. You can also confirm that VSCode correctly sees the NodeJS installation by running echo %PATH% in your windows command shell in VSCode: it should include an entry similar to C:\\Program Files\\nodejs. Working with MacOS M1 Silicon: If you have macOS on M1 Silicon 2022, you can find instructions here. ",
    "url": "/CS4530-Fall-2023/tutorials/week1-getting-started#installing-nodejs-with-nvm-for-windows",
    
    "relUrl": "/tutorials/week1-getting-started#installing-nodejs-with-nvm-for-windows"
  },"166": {
    "doc": "Installing a Development Environment",
    "title": "Installation Steps (Linux / Mac)",
    "content": ". | Run either curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash or If wget is installed then run wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash. | Close and reopen a terminal. | Verify nvm is working by entering command -v nvm. If your terminal prints out nvm, it should be working. If you see nvm: command not found or no feedback, open a new terminal and trying again or restart from step 1. | Install the latest LTS (Long term supported, as opposed to the “development”) version of Node.js by typing nvm install 18. | . ",
    "url": "/CS4530-Fall-2023/tutorials/week1-getting-started#installation-steps-linux--mac",
    
    "relUrl": "/tutorials/week1-getting-started#installation-steps-linux--mac"
  },"167": {
    "doc": "Installing a Development Environment",
    "title": "Verification",
    "content": ". | Open a shell or windows powershell. | Run the command node -v . | This should print the current version of nodeJS installed (v18.x.x) | . | Run the command npm -v . | This should print the current version of npm installed (v8.x.x) | . | If you find that some other version is being used, and would like to change the default to 18, run the command nvm alias default 18 | . ",
    "url": "/CS4530-Fall-2023/tutorials/week1-getting-started#verification",
    
    "relUrl": "/tutorials/week1-getting-started#verification"
  },"168": {
    "doc": "Installing a Development Environment",
    "title": "Installing Visual Studio Code (VSCode)",
    "content": "Visual Studio Code is a lightweight but powerful source code editor which runs on your desktop and is available for Windows, macOS and Linux. It comes with built-in support for JavaScript, TypeScript and Node.js and has a rich ecosystem of extensions for other languages (such as C++, C#, Java, Python, PHP, Go) and runtimes (such as .NET and Unity). VSCode also supports importing hotkey configurations from most other text editors and IDEs. Read more here. While you are required to use an IDE for this class, it is not mandatory to use VSCode: if you already are comfortable developing TypeScript or JavaScript in another suitable IDE (like IntelliJ), then you are welcome to continue to use that. However, VSCode is the “supported” option: if you struggle to get things like the linter set up correctly in VSCode, we will be happy to help you. However, we can’t provide such support for all IDEs. ",
    "url": "/CS4530-Fall-2023/tutorials/week1-getting-started#installing-visual-studio-code-vscode",
    
    "relUrl": "/tutorials/week1-getting-started#installing-visual-studio-code-vscode"
  },"169": {
    "doc": "Installing a Development Environment",
    "title": "Pre-requisites",
    "content": ". | Administrative access on the host machine for software installation. | . ",
    "url": "/CS4530-Fall-2023/tutorials/week1-getting-started#pre-requisites",
    
    "relUrl": "/tutorials/week1-getting-started#pre-requisites"
  },"170": {
    "doc": "Installing a Development Environment",
    "title": "Installation Steps (Windows / Mac)",
    "content": ". | Download the VSCode installer from the VSCode website. | . | Run the installer to start the installation wizard for VSCode . | . | Accept the license agreement and click next. | . | Choose the installation directory of your choice and click next. | . | Click next on the select start menu folder screen. | . | Tick all check boxes on the select additional tasks menu and click next. | . | Review the settings on the the “Ready to install” screen and click Install to begin installation. | Once the installation is complete, you will see the below screen and you are ready to use VSCode. | . | . ",
    "url": "/CS4530-Fall-2023/tutorials/week1-getting-started#installation-steps-windows--mac",
    
    "relUrl": "/tutorials/week1-getting-started#installation-steps-windows--mac"
  },"171": {
    "doc": "Installing a Development Environment",
    "title": "Installation (Linux)",
    "content": ". | The above instructions for Windows/Mac should also work, but VSCode is also provided as a snap package | . | Install snap if you haven’t already by running sudo apt update and then sudo apt install snapd. | Install VSCode by running sudo snap install --classic code. | Open VSCode as an application on your desktop. | . ",
    "url": "/CS4530-Fall-2023/tutorials/week1-getting-started#installation-linux",
    
    "relUrl": "/tutorials/week1-getting-started#installation-linux"
  },"172": {
    "doc": "Installing a Development Environment",
    "title": "Additional Extensions (Optional)",
    "content": "VSCode comes with a rich set of extensions to aid in software development. Below is a list of extensions that you may find useful. | GitLens - Git Supercharged | Prettier - code formatter | vscode-icons | ESLint | Andromeda (Color theme: Andromeda Colorizer) | Jest Runner | . ",
    "url": "/CS4530-Fall-2023/tutorials/week1-getting-started#additional-extensions-optional",
    
    "relUrl": "/tutorials/week1-getting-started#additional-extensions-optional"
  },"173": {
    "doc": "Installing a Development Environment",
    "title": "Installing Extensions (eg. ESLint)",
    "content": ". | Click on the extensions tab on the left in VSCode. | Search ESLint. | Click on Install. | Done! . | . | . ",
    "url": "/CS4530-Fall-2023/tutorials/week1-getting-started#installing-extensions-eg-eslint",
    
    "relUrl": "/tutorials/week1-getting-started#installing-extensions-eg-eslint"
  },"174": {
    "doc": "Installing a Development Environment",
    "title": "Getting Started With Typescript",
    "content": "Typescript is a superscript of JavaScript which adds type information and other features. ",
    "url": "/CS4530-Fall-2023/tutorials/week1-getting-started#getting-started-with-typescript",
    
    "relUrl": "/tutorials/week1-getting-started#getting-started-with-typescript"
  },"175": {
    "doc": "Installing a Development Environment",
    "title": "Pre-requisites",
    "content": ". | NodeJS | VSCode (recommended but not required) | . ",
    "url": "/CS4530-Fall-2023/tutorials/week1-getting-started#pre-requisites-1",
    
    "relUrl": "/tutorials/week1-getting-started#pre-requisites-1"
  },"176": {
    "doc": "Installing a Development Environment",
    "title": "Installation",
    "content": ". | Open VSCode and press the ctrl + ~ (Tilde or back tick key) to open a terminal. | Optionally you can open a separate shell (Do not use powershell) | . | Run the command npm install -g typescript in the terminal. | Typescript should now be installed globally and accessible from the terminal. | . | Verify the installation using the command tsc -v in the terminal. (Do NOT use powershell) . | . | . ",
    "url": "/CS4530-Fall-2023/tutorials/week1-getting-started#installation",
    
    "relUrl": "/tutorials/week1-getting-started#installation"
  },"177": {
    "doc": "Installing a Development Environment",
    "title": "Hello World",
    "content": ". | Create a new directory and open it with VSCode. | Create a new file called hello-world.ts | Add the following code to the file: console.log('Hello, World!'); . | Open the terminal with ctrl + ~. | Ensure that you are in the same directory as hello-world.ts. | . | Run the command tsc hello-world.ts . | This will generate a JS file called hello-world.js | . | Run the file with node using the command node hello-world.js. | This will give the result below. | | . | . ",
    "url": "/CS4530-Fall-2023/tutorials/week1-getting-started#hello-world",
    
    "relUrl": "/tutorials/week1-getting-started#hello-world"
  },"178": {
    "doc": "Installing a Development Environment",
    "title": "Installing a Development Environment",
    "content": "This tutorial describes the basic steps needed to set up a development environment with NodeJS, TypeScript, and VisualStudio Code. At the end of this tutorial, you should have a complete local development environment that you can use to build and test code for this class. Contents: . | Installing NodeJS | Installing Visual Studio Code | Hello, World in TypeScript | . If you run into any difficulties following any of these steps, please post (in a non-private question) on Piazza. ",
    "url": "/CS4530-Fall-2023/tutorials/week1-getting-started",
    
    "relUrl": "/tutorials/week1-getting-started"
  },"179": {
    "doc": "Typescript Basics",
    "title": "Typescript Basics",
    "content": "This tutorial describes the basic concepts and syntax of typescript with code examples. Typescript is treated here as an extension of JavaScript, but it requires no prior knowledge to follow along. You can run the examples on Online Typescript Editor . Contents: . | Types in Typescript . | Boolean | Number | BigInt | String | Arrays | Tuples | Enums | Any | Unknown | . | Variable declaration in typescript | Objects | Control Flow Statements . | Equality vs Strict Equality | . | Loops | Array Functions . | ForEach | Map | Filter | Reduce | . | Functions . | Typing the function | Invoking the function | Optional and Default Parameters | Rest Parameters | Functions as Constructors | Arrow Functions | Function Overloads | . | Classes . | Creating a class | Creating an abstract class | . | Type Aliases | Interfaces | Custom types | Generics | Modules | Object oriented programming concepts using typescript . | Inheritance | Polymorphism | Abstraction | Encapsulation | . | General Guidelines | . Typescript is a superset of JavaScript. Thus, all JavaScript code is valid Typescript code. Typescript introduces concepts of optional typing, modules, and few additional features to Javascript. Let us begin by extending JavaScript to use the features of Typescript and primitive types. ",
    "url": "/CS4530-Fall-2023/tutorials/week1-typescript-basics",
    
    "relUrl": "/tutorials/week1-typescript-basics"
  },"180": {
    "doc": "Typescript Basics",
    "title": "Types in typescript",
    "content": "Boolean . The boolean type has two values: true and false. Example: . let a = true // boolean var b = false // boolean const c = true // true let d: boolean = true // boolean let e: true = true // true . | Usage: You can compare them (with ==, ===, ||, &amp;&amp;, and ?), negate them (with !). | . Number . Number is the set of all numbers: integers, floats, positives, negatives, Infinity, NaN. Example: . var b = Infinity * 0.10 // number const c = 5678 // 5678 let d = a &lt; b // boolean let e: number = 100 // number let f: 26.218 = 26.218 . | Usage: Numbers can do things, like addition (+), subtraction (-), modulo (%), and comparison (&lt;). When working with long numbers, use numeric separators to make those numbers easier to read. | . BigInt . The bigint type is the set of all BigInts, and supports things like addition (+), subtraction (-), multiplication (*), division (/), and comparison (&lt;). Example: . let a = 1234n // bigint const b = 5678n // 5678n var c = a + b // bigint let d = a &lt; 1235 // boolean let e = 88.5n // Error TS1353: A bigint literal must be an integer. let f: bigint = 100n // bigint let g: 100n = 100n . | Usage: It lets you work with large integers without running into rounding errors. While the number type can only represent whole numbers it can hold numbers larger than 253 – 1. | . String . String is the set of all strings and the things you can do with them like concatenate (+), slice (.slice),etc. Example: . let a: string = 'hello' // any let b: string = 'world' // any let c: string = a + ' ' + b // any . | Usage: Any functionality that requires the functionality of a string of characters. Here are a couple of string operations: | . charAt() : This method returns the character from the specified index. Characters in a string are indexed from left to right. The index of the first character is 0, and the index of the last character in a string, called stringName, is stringName.length – 1. Syntax: . string.charAt(index) . slice() : This method extracts a section of a string and returns a new string. Syntax: . string.slice( beginslice [, endSlice]) . split() : This method splits a String object into an array of strings by separating the string into substrings. Syntax: . string.split([separator][, limit]) . concat(): This method adds two or more strings and returns a new single string. Syntax: . string.concat(string2, string3[, ..., stringN]) . indexOf(): This method returns the index within the calling String object of the first occurrence of the specified value, starting the search at index or -1 if the value is not found. Syntax: . string.indexOf(searchValue[, fromIndex]) . Arrays . Like in JavaScript, TypeScript arrays are special kinds of objects that support things like concatenation, pushing, searching, and slicing. Arrays are iterable Objects with the keys as numbers. Example: . let a = [1, 2, 3] // number[] var b = ['a', 'b'] // string[] let c: string[] = ['a'] // string[] let d = [1, 'a'] // (string | number)[] const e = [2, 'b'] // (string | number)[] let f = ['red'] f.push('blue') let g = [] // any[] g.push(1) // number[] g.push('red') // (string | number)[] let h: number[] = [] // number[] h.push(1) // number[] . Tuples . Tuples are subtypes of array. They’re a special way to type arrays that have fixed lengths, where the values at each index have specific, known types. Unlike most other types, tuples have to be explicitly typed when you declare them. Example: . let a: [number] = [1] // A tuple of [first name, last name, birth year] let b: [string, string, number] = ['malcolm', 'gladwell', 1963] . | Usage: In TypeScript Tuples support optional elements too. Just like in object types, ? means “optional”. Tuples also support rest elements, which you can use to type tuples with minimum lengths. Not only do tuple types safely encode heterogeneous lists, but they also capture the length of the list they type. | . Enums . Enums are a way to enumerate the possible values for a type. They are unordered data structures that map keys to values. Example: . enum Language { English, Spanish, Russian } . | Usage: There are two kinds of enums: enums that map from strings to strings, and enums that map from strings to numbers. Use it when you wish to provide flexibility making it easier to express and document intentions and use cases or when you want to save compile-time and runtime with inline code. | . Any . The any data type is the super type of all types in TypeScript. It denotes a dynamic type. Using the any type is equivalent to opting out of type checking for a variable. Example: . let a: any = 666 // any let b: any = ['danger'] // any let c = a + b // any . | Usage: In TypeScript everything needs to have a type at compile time, and any is the default type when you (the programmer) and TypeScript (the typechecker) can’t figure out what type something is. It’s a last resort type, and you should avoid it when possible. | . Unknown . If any is the Godfather, then unknown is Keanu Reeves as undercover FBI agent Johnny Utah in Point Break: laid back, fits right in with the bad guys, but deep down has a respect for the law and is on the side of the good guys. You can compare unknown values (with ==, ===, &amp;&amp;, and ?), and refine them (like you can any other type) with JavaScript’s typeof and instanceof operators. Example: . let a: unknown = 30 // unknown let b = a === 123 // boolean . | Usage: For the few cases where you have a value whose type you really don’t know ahead of time, don’t use any, and instead reach for unknown. Like any, it represents any value, but TypeScript won’t let you use an unknown type until you refine it by checking what it is. | . ",
    "url": "/CS4530-Fall-2023/tutorials/week1-typescript-basics#types-in-typescript",
    
    "relUrl": "/tutorials/week1-typescript-basics#types-in-typescript"
  },"181": {
    "doc": "Typescript Basics",
    "title": "Variable declaration in typescript",
    "content": "Variables can be declared in Typescript using one of 3 keywords: . | var: var declarations are accessible anywhere within their containing function, module, namespace, or global scope - all which we’ll go over later on - regardless of the containing block. Some people call this var-scoping or function-scoping. Parameters are also function scoped. | let: When a variable is declared using let, it uses what some call lexical-scoping or block-scoping. Unlike variables declared with var whose scopes leak out to their containing function, block-scoped variables are not visible outside of their nearest containing block. | const: They are like let declarations but, as their name implies, their value cannot be changed once they are bound. In other words, they have the same scoping rules as let, but you can’t re-assign to them. | . The syntax of declarations is as below: . var &lt;name&gt;: &lt;type&gt; = &lt;value&gt;; let &lt;name&gt;: &lt;type&gt; = &lt;value&gt;; const &lt;name&gt;: &lt;type&gt; = &lt;value&gt;; . Example: . let num: number = 1; const PI: number = 3.14; let x: string = \"This is a string\"; const t: boolean = true; const f: boolean = false; let uninitialized: any; . ",
    "url": "/CS4530-Fall-2023/tutorials/week1-typescript-basics#variable-declaration-in-typescript",
    
    "relUrl": "/tutorials/week1-typescript-basics#variable-declaration-in-typescript"
  },"182": {
    "doc": "Typescript Basics",
    "title": "Objects",
    "content": ". | Objects are similar to dictionaries with key-value pairs. | Arrays are iterable Objects with the keys as numbers. | . Examples: . const myObj: any = { key1: 'value1', key2: 'value2' }; console.log(myObj.key1); // prints 'value1' . ",
    "url": "/CS4530-Fall-2023/tutorials/week1-typescript-basics#objects",
    
    "relUrl": "/tutorials/week1-typescript-basics#objects"
  },"183": {
    "doc": "Typescript Basics",
    "title": "Control Flow Statements",
    "content": "Typescript contains the following control flow statements: . | If-Else | Switch | Ternary operator: Shorthand for if-else which returns a value. | . If condition syntax: . if(condition) { // executed when condition is true } if(condition) { // executed when condition is true } else { // executed when condition is false } if(condition) { // executed when condition is true } else if(condition2) { // checked only if condition is false // executed when condition2 is true } else { // executed when all conditions in the if-elseif ladder are false. } . Switch case syntax: . switch (variable) { case &lt;case1&gt;: // executed when value of variable matches &lt;case1&gt; break; // Break is required to prevent all subsequent cases from executing case &lt;case2&gt;: // executed when value of variable matches &lt;case1&gt; break; // Break is required to prevent all subsequent cases from executing default: // executed if variable does not match any prior cases } . Ternary Syntax: . let x = (condition) ? /* Executed when condition is true */ : /*Executed when condition is false*/; . Examples: . const str: string = \"ABCD\"; if(str === \"ABCD\") { console.log(\"it was true\"); } else { console.log(\"it was false\"); } switch (str) { case \"ABCD\": console.log('It was ABCD'); break; case \"WXYZ\": console.log('It was WXYZ'); break; default: console.log('It was something completely different') } let y: string = (str.includes(\"A\")) ? \"The string contains A\" : \"The string does not contain A\"; // y now contains \"The string contains A\" . ",
    "url": "/CS4530-Fall-2023/tutorials/week1-typescript-basics#control-flow-statements",
    
    "relUrl": "/tutorials/week1-typescript-basics#control-flow-statements"
  },"184": {
    "doc": "Typescript Basics",
    "title": "Equality vs Strict Equality",
    "content": "Typescript/JavaScript contain 2 equality operators: . | ==: Compares only the value of entities being compared. | ===: Compares the type and value of entities being compared. | . Example: . if(0 == '0') { } // Evaluates to true despite comparing string to number. if(0 === '0') { } // Evaluated to false because types are different. We recommend using strict equality (===) in all cases, and this recommendation is enforced by our linter. ",
    "url": "/CS4530-Fall-2023/tutorials/week1-typescript-basics#equality-vs-strict-equality",
    
    "relUrl": "/tutorials/week1-typescript-basics#equality-vs-strict-equality"
  },"185": {
    "doc": "Typescript Basics",
    "title": "Loops",
    "content": "Typescript contains the following loops: . | For | While | Do-while | . Examples: . for(let i: number = 0; i &lt; 10; i++) { } while(condition) { } do { } while(condition) . ",
    "url": "/CS4530-Fall-2023/tutorials/week1-typescript-basics#loops",
    
    "relUrl": "/tutorials/week1-typescript-basics#loops"
  },"186": {
    "doc": "Typescript Basics",
    "title": "Array Functions",
    "content": "ForEach, Map, reduce, and filter are all array methods in JavaScript. Each one will iterate over an array and perform a transformation or computation. Each will return a new array based on the result of the function. ",
    "url": "/CS4530-Fall-2023/tutorials/week1-typescript-basics#array-functions",
    
    "relUrl": "/tutorials/week1-typescript-basics#array-functions"
  },"187": {
    "doc": "Typescript Basics",
    "title": "ForEach",
    "content": "forEach() method calls a function for each element in the array. It returns the resultant array. Syntax . array.forEach(callback[, thisObject]); . Example . let num = [7, 8, 9]; num.forEach(function (value) { console.log(value); }); . ",
    "url": "/CS4530-Fall-2023/tutorials/week1-typescript-basics#foreach",
    
    "relUrl": "/tutorials/week1-typescript-basics#foreach"
  },"188": {
    "doc": "Typescript Basics",
    "title": "Map",
    "content": "It is an array function that transforms the array according to the applied function and returns the updated array. It works on each element of an array. Syntax . array.map(callback[,object]) . callback - It is a function that provides an element of the new Array from an element of the current one. object - object to use as this when executing callback. Return Type - List . Examples . //Calculate cube of each element with the help of map. function cube(n){ return n*n*n; } var arr=new Array(1,2,3,4) var newArr=arr.map(cube); console.log(newArr) // Output : [1,8,27,64] . In the above example, a function called “cube” is created and then is passed as a callback function into map(). ",
    "url": "/CS4530-Fall-2023/tutorials/week1-typescript-basics#map",
    
    "relUrl": "/tutorials/week1-typescript-basics#map"
  },"189": {
    "doc": "Typescript Basics",
    "title": "Reduce",
    "content": "It also works on a callback for each element of an array. It reduces the result of this callback function from one array element to the other. Syntax . array.reduce(callback[,initalValue]) . callback - this parameter is the function to execute on each value in the array. intitalValue - this parameter is the object to use as the first argument of the first call of the callback. Examples . //To calculate product of every element of an array, var arr = new Array (1,2,3,4,5) var val = arr.reduce(function(a,b){ return a*b; }); //output =&gt; 120 . Calculate the total salary from a list of object, then you will use the reduce() like, . var employees = [ { id: 20, name: 'Ajay', salary:30000 }, { id: 24, name: 'Vijay', salary:35000 }, { id: 56, name: 'Rahul', salary:32000 }, { id: 88, name: 'Raman', salary:38000 } ]; var totalSalary= employees .reduce(function (total, record) { return total + record.salary; }, 0); //It will return the total salary of all the employees. ",
    "url": "/CS4530-Fall-2023/tutorials/week1-typescript-basics#reduce",
    
    "relUrl": "/tutorials/week1-typescript-basics#reduce"
  },"190": {
    "doc": "Typescript Basics",
    "title": "Filter",
    "content": "As the name suggests it can filter out the data/array elements on the basis of condition and return the result as a list. Basically, this function pushes the current element into a new array when the callback functions return true. Syntax . array.map(callback[,object]) . callback - it is a function that provides an element of the new Array from an element of the current one. object - object to use as this when executing callback. Return Type: List . Examples . //Calculate a list of even elements from an array : arr = new Array(1, 2, 3, 6, 5, 4) var newArr = arr.filter(function(record) { return record % 2 == 0; }); // output =&gt; [2,6,4] . ",
    "url": "/CS4530-Fall-2023/tutorials/week1-typescript-basics#filter",
    
    "relUrl": "/tutorials/week1-typescript-basics#filter"
  },"191": {
    "doc": "Typescript Basics",
    "title": "Functions",
    "content": ". | Functions usually “take in” data, process it, and “return” a result. Remember one function/method one job! . | There is a lot you can do with functions in JavaScript like assign them to variables, pass them to other functions, return them from functions, assign them to objects and prototypes, write properties to them, read those properties back, and so on, and TypeScript models all of those things with its rich type system, which we just learnt. | Typescript enables us to set the types for our function parameters and our return type. | Functions in Typescript are defined as below: . function functionName(argument1: &lt;type&gt;, defaultArgument: &lt;type&gt; = value, optionalArgument?: &lt;type&gt;): &lt;return type&gt; { // Function body } . | . ",
    "url": "/CS4530-Fall-2023/tutorials/week1-typescript-basics#functions",
    
    "relUrl": "/tutorials/week1-typescript-basics#functions"
  },"192": {
    "doc": "Typescript Basics",
    "title": "Typing the function",
    "content": "A simple function in javascript would look like this: . // Named function function add(a, b) { return a + b; } . Now, let’s add types to our simple examples above: . function add(a: number, b: number): number { return a + b; } . You will usually explicitly annotate function parameters (a and b in this example)—TypeScript will always infer types throughout the body of your function, but in most cases it won’t infer types for your parameters. The return type is inferred, but it’s a good practice to explicitly annotate it. ",
    "url": "/CS4530-Fall-2023/tutorials/week1-typescript-basics#typing-the-function",
    
    "relUrl": "/tutorials/week1-typescript-basics#typing-the-function"
  },"193": {
    "doc": "Typescript Basics",
    "title": "Invoking the function",
    "content": "When you invoke a function in TypeScript, you don’t need to provide any additional type information—just pass in some arguments, and TypeScript will go to work checking that your arguments are compatible with the types of your function’s parameters: . add(1, 2); // evaluates to 3 . Of course, if you forgot an argument, or passed an argument of the wrong type, TypeScript will be quick to point it out: . add(1); // Error TS2554: Expected 2 arguments, but got 1. add(1, 'a'); // Error TS2345: Argument of type '\"a\"' is not assignable // to parameter of type 'number'. ",
    "url": "/CS4530-Fall-2023/tutorials/week1-typescript-basics#invoking-the-function",
    
    "relUrl": "/tutorials/week1-typescript-basics#invoking-the-function"
  },"194": {
    "doc": "Typescript Basics",
    "title": "Optional and Default Parameters",
    "content": "Like in object and tuple types, you can use ? to mark parameters as optional. When declaring your function’s parameters, required parameters have to come first, followed by optional parameters: . function log(message: string, userId?: string) { let time = new Date().toLocaleTimeString() console.log(time, message, userId || 'Not signed in') } log('Page loaded') // Logs \"12:38:31 PM Page loaded Not signed in\" log('User signed in', 'da763be') // Logs \"12:38:31 PM User signed in da763be\" . You can provide default values for optional parameters. Semantically it’s similar to making a parameter optional, in that callers no longer have to pass it in (a difference is that default parameters don’t have to be at the end of your list of parameters, while optional parameters do). For example, we can rewrite log as: . function log(message: string, userId = 'Not signed in') { let time = new Date().toISOString() console.log(time, message, userId) } log('User clicked on a button', 'da763be') log('User signed out') . ",
    "url": "/CS4530-Fall-2023/tutorials/week1-typescript-basics#optional-and-default-parameters",
    
    "relUrl": "/tutorials/week1-typescript-basics#optional-and-default-parameters"
  },"195": {
    "doc": "Typescript Basics",
    "title": "Rest Parameters",
    "content": "If a function takes a list of arguments, you can of course simply pass the list in as an array: . function sum(numbers: number[]): number { return numbers.reduce((total, n) =&gt; total + n, 0); } sum([1, 2, 3]); // evaluates to 6 . ",
    "url": "/CS4530-Fall-2023/tutorials/week1-typescript-basics#rest-parameters",
    
    "relUrl": "/tutorials/week1-typescript-basics#rest-parameters"
  },"196": {
    "doc": "Typescript Basics",
    "title": "Functions as Constructors",
    "content": "In Typescript/Javascript, Functions can be used as constructors for creating objects. This is similar to classes, but not quite the same. Examples: . function Person(firstName: string, lastName: string): void { this.firstName = firstName; this.lastName = lastName; this.getFullName = function(): string { return this.firstName + ' ' + this.lastName; } } const person1 = new Person('first', 'last'); console.log(person1.getFullName()); // Returns 'first last'. | Constructors can’t have type parameters - these belong on the outer class declaration . | Constructors can’t have return type annotations - the class instance type is always what’s returned ```ts class Point { x: number; y: number; . | . // Normal signature with defaults constructor(x = 0, y = 0) { this.x = x; this.y = y; } } . ## Arrow Functions Arrow Functions (also called fat arrow functions) are functions which have lexical 'this' and 'arguments'. This are especially useful in class methods to preserve the context when using higher order functions. Examples: ```ts let sum = (x: number, y: number): number =&gt; { return x + y; } sum(10, 20); //returns 30 . In the above example, sum is an arrow function. (x:number, y:number) denotes the parameter types, :number specifies the return type. The fat arrow =&gt; separates the function parameters and the function body. The right side of =&gt; can contain one or more code statements. ",
    "url": "/CS4530-Fall-2023/tutorials/week1-typescript-basics#functions-as-constructors",
    
    "relUrl": "/tutorials/week1-typescript-basics#functions-as-constructors"
  },"197": {
    "doc": "Typescript Basics",
    "title": "Function Overloads",
    "content": "In TypeScript, we can specify a function that can be called in different ways by writing overload signatures. To do this, write some number of function signatures (usually two or more), followed by the body of the function: . //function makeDate() with one parameter function makeDate(timestamp: number): Date; //function makeDate() with three parameters function makeDate(m: number, d: number, y: number): Date; //function makeDate() with one parameter and 2 default parameters function makeDate(mOrTimestamp: number, d?: number, y?: number): Date { if (d !== undefined &amp;&amp; y !== undefined) { return new Date(y, mOrTimestamp, d); } else { return new Date(mOrTimestamp); } } const d1 = makeDate(12345678); const d2 = makeDate(5, 5, 5); const d3 = makeDate(1, 3); //No overload expects 2 arguments, but overloads do exist that expect either 1 or 3 arguments. ",
    "url": "/CS4530-Fall-2023/tutorials/week1-typescript-basics#function-overloads",
    
    "relUrl": "/tutorials/week1-typescript-basics#function-overloads"
  },"198": {
    "doc": "Typescript Basics",
    "title": "Classes",
    "content": "Classes are blueprints for creating objects. | They can contain properties, methods, and a constructor. | All members of a class can have an access modifier: public, protected, private. | Members can also be static (shared across all instances of the class) and final (immutable). | Class properties may have getters and setters. | Classes can extend other classes. | Classes can implement interfaces. | . Creating a Class . A class definition can include the following: . | Fields − A field is any variable declared in a class. Fields represent data pertaining to objects | Constructors − Responsible for allocating memory for the objects of the class | Functions − Functions represent actions an object can take. They are also at times referred to as methods | . Examples: . class Person { private firstName: string = ''; protected middleName: string; public lastName: string = ''; private static final NeverGonnaGiveYouUp: any; protected static final NeverGonnaLetYouDown: any; public static final isRickRolled: boolean = true; constructor() { // I execute when you call new Person(). // No access modifier === public by default. // Make me private if implementing a singleton. } public anyoneCanCallMe(): void { this.childClassesCanCallMe(); } protected childClassesCanCallMe(): void { this.onlyPersonCanCallMe(); } private onlyAccessibleInsidePerson(): void { // I lied, anyone can call me if you know how. // Welcome to JavaScript :p } public get firstName(): string { return this.firstName; } public set firstName(firstName: string): void { this.firstName = firstName; } } const person = Person(); person.firstName = 'first'; console.log(person.firstName); person.anyoneCanCallMe(); class SpecialPerson extends Person { // I contain everything person has, and can extend/override it. constructor() { super() // I call the constructor for Person. } } . ",
    "url": "/CS4530-Fall-2023/tutorials/week1-typescript-basics#classes",
    
    "relUrl": "/tutorials/week1-typescript-basics#classes"
  },"199": {
    "doc": "Typescript Basics",
    "title": "Creating an abstract class",
    "content": ". | Define an abstract class in Typescript using the abstract keyword. Abstract classes are mainly for inheritance where other classes may derive from them. We cannot create an instance of an abstract class. | An abstract class typically includes one or more abstract methods or property declarations. The class which extends the abstract class must define all the abstract methods. | . Example: . abstract class Person { abstract name: string; display(): void{ console.log(this.name); } } class Employee extends Person { name: string; empCode: number; constructor(name: string, code: number) { super(); // must call super() this.empCode = code; this.name = name; } } let emp: Person = new Employee(\"James\", 100); emp.display(); //James . ",
    "url": "/CS4530-Fall-2023/tutorials/week1-typescript-basics#creating-an-abstract-class",
    
    "relUrl": "/tutorials/week1-typescript-basics#creating-an-abstract-class"
  },"200": {
    "doc": "Typescript Basics",
    "title": "Type Aliases",
    "content": "We’ve been using object types and union types by writing them directly in type annotations. This is convenient, but it’s common to want to use the same type more than once and refer to it by a single name. A type alias is exactly that - a name for any type. The syntax for a type alias is: . type Point = { x: number; y: number; }; function printCoord(pt: Point) { console.log(\"The coordinate's x value is \" + pt.x); console.log(\"The coordinate's y value is \" + pt.y); } printCoord({ x: 100, y: 100 }); . You can actually use a type alias to give a name to any type at all, not just an object type. For example, a type alias can name a union type: . type ID = number | string; . Note that aliases are only aliases - you cannot use type aliases to create different/distinct “versions” of the same type. When you use the alias, it’s exactly as if you had written the aliased type. In other words, this code might look illegal, but is OK according to TypeScript because both types are aliases for the same type: . type UserInputSanitizedString = string; function sanitizeInput(str: string): UserInputSanitizedString { return sanitize(str); } // Create a sanitized input let userInput = sanitizeInput(getInput()); // Can still be re-assigned with a string though userInput = \"new input\"; . ",
    "url": "/CS4530-Fall-2023/tutorials/week1-typescript-basics#type-aliases",
    
    "relUrl": "/tutorials/week1-typescript-basics#type-aliases"
  },"201": {
    "doc": "Typescript Basics",
    "title": "Interfaces",
    "content": "Interfaces are used to define contracts for interaction with external entities. If an interface has a property/method, an Object/Class which implements it must have it. Interfaces can be used to define custom types for Objects in Typescript. Examples: . //Interface IPerson respresents a person by attributes firstName and lastName and a method to getFullName() interface IPerson { firstName: string; lastName: string; getFullName(): string; } //Class Person implements interface Iperson. Person class must contains all the attributes and methods of interface. class Person implements IPerson { public firstName: string = ''; public lastName: string = ''; public getFullName(): string { return this.firstName + ' ' + this.lastName; } // It can contain any other properties/methods but must contain those in the interface. } const person: IPerson = new Person(); . ",
    "url": "/CS4530-Fall-2023/tutorials/week1-typescript-basics#interfaces",
    
    "relUrl": "/tutorials/week1-typescript-basics#interfaces"
  },"202": {
    "doc": "Typescript Basics",
    "title": "Custom types",
    "content": ". | For complicated types (usually required for Objects), it is recommended to use an interface. | Additionally, typescript contain the ‘type’ keyword which can be used to create new types. | This is generally used when a union of different types is required. | . Examples: . interface IStudent { name: string; age: number; studentID: number; gender: string; isEnrolled: boolean; } const student: IStudent = { name: 'name', age: 20, studentID: 111111111, gender: 'hidden' isEnrolled: true; }; type StringOrNumber = string | number; let x = 1; x = 'some string'; . ",
    "url": "/CS4530-Fall-2023/tutorials/week1-typescript-basics#custom-types",
    
    "relUrl": "/tutorials/week1-typescript-basics#custom-types"
  },"203": {
    "doc": "Typescript Basics",
    "title": "Generics",
    "content": ". | Generics allow us to pass different types to a function/class making it more generalized. | This will be especially useful when working with http requests. | . Examples: . function myFunc&lt;T&gt;(data: T): T { console.log(data); return data } let x: string = myFunc&lt;string&gt;('some string'); let y: number = myFunc&lt;number&gt;(5); class myClass&lt;T&gt; { } interface IMyInterface&lt;T&gt; { } . ",
    "url": "/CS4530-Fall-2023/tutorials/week1-typescript-basics#generics",
    
    "relUrl": "/tutorials/week1-typescript-basics#generics"
  },"204": {
    "doc": "Typescript Basics",
    "title": "Modules",
    "content": "A Module in typescript is defined by using the ‘Import’ or ‘Export’ keywords within a file. Variables declared in a module are scoped locally and are not added to the global scope. | Export makes the variables and functions from a file visible outside it. | Import allows use to use variables and functions exported by another file. | . Examples: . // file1.ts export const someVar: string = 'Variables can be exported too.'; export default function add(x: number, y: number): number { return x + y; } export function subtract(x: number, y: number): number { return x - y; } function multiply(): void { throw new Error(); } // file2.ts import add from './file1'; // curly braces are not required if export default is used. // There can be only 1 export default in a while. Use it if file has only 1 export. import { subtract } from './file1'; add(1, 2); subtract(2, 1); // multiply cannot be imported. ",
    "url": "/CS4530-Fall-2023/tutorials/week1-typescript-basics#modules",
    
    "relUrl": "/tutorials/week1-typescript-basics#modules"
  },"205": {
    "doc": "Typescript Basics",
    "title": "Object oriented programming concepts using typescript",
    "content": "Object Oriented Programming or OOP is a programming paradigm that has four principles which are: . | Inheritance | Polymorphism | Abstraction | Encapsulation | . ",
    "url": "/CS4530-Fall-2023/tutorials/week1-typescript-basics#object-oriented-programming-concepts-using-typescript",
    
    "relUrl": "/tutorials/week1-typescript-basics#object-oriented-programming-concepts-using-typescript"
  },"206": {
    "doc": "Typescript Basics",
    "title": "Inheritance",
    "content": "TypeScript supports the concept of Inheritance. Inheritance is the ability of a program to create new classes from an existing class. The class that is extended to create newer classes is called the parent class/super class. The newly created classes are called the child/sub classes. A class inherits from another class using the ‘extends’ keyword. Child classes inherit all properties and methods except private members and constructors from the parent class. However, TypeScript doesn’t support multiple inheritance. Syntax: . class child_class_name extends parent_class_name . Example: . //Parent class Shape class Shape { Area:number constructor(a:number) { this.Area = a } } //Child class Circle that inherits properties of Shape class Circle extends Shape { disp():void { console.log(\"Area of the circle: \"+this.Area) } } var obj = new Circle(223); obj.disp() . ",
    "url": "/CS4530-Fall-2023/tutorials/week1-typescript-basics#inheritance",
    
    "relUrl": "/tutorials/week1-typescript-basics#inheritance"
  },"207": {
    "doc": "Typescript Basics",
    "title": "Polymorphism",
    "content": "When multiple classes inherit from a parent and override the same functionality, the result is polymorphism. Each of those child classes now implements a property or method, but they each may have their own way of performing that implementation. Alternatively, one child class might override the parent’s members while another child doesn’t but just accepts the parent class’s implementation instead. This also demonstrates polymorphic behavior, since those behaviors are different between the siblings. class CheckingAccount { open(initialAmount: number) { // code to open account and save in database } } class BusinessCheckingAccount extends CheckingAccount { open(initialAmount: number) { if (initialAmount &lt; 1000) { throw new Error(\"Business accounts must have an initial deposit of 1.000 Euros\") } super.open(initialAmount); } } class PersonalCheckingAccount extends CheckingAccount { open(initialAmount: number) { if (initialAmount &lt;= 0) { throw new Error(\"Personal accounts must have an initial deposit of more than zero Euros\") } super.open(initialAmount); } } . In the above code sample shows, the two child classes have different business rules to implement when it comes to opening an account – mainly different opening balances. Because both children have a method to open the account but both children choose to do it differently means the behavior is polymorphic. To achieve polymorphism, inherit from a base class, then override methods and write implementation code in them. In addition to overriding methods, you can overload methods to achieve polymorphism. Overloaded methods are methods that have different signatures (i.e., different data types or number of arguments) with the same name. However, in TypeScript, methods aren’t overloaded by simply modifying the types or number of arguments like in some other languages. To create an overload in TypeScript, you can either add optional arguments to a method, or overload function declarations in an interface and implement the interface. ",
    "url": "/CS4530-Fall-2023/tutorials/week1-typescript-basics#polymorphism",
    
    "relUrl": "/tutorials/week1-typescript-basics#polymorphism"
  },"208": {
    "doc": "Typescript Basics",
    "title": "Abstraction",
    "content": "Abstraction is a way to model objects in a system that creates a separation of duties between class or type and the code that inherits it. A developer creates a type, i.e., a class or interface, and that type specifies what the calling code should implement, but not how. So it’s the job of the abstract type to define what needs to be done, but up to the consuming types to actually do those things. To enforce abstraction, inherit or implement from abstract classes and interfaces. For example, some bank accounts have fees. You can create a Fee interface that defines a method for charging a fee. Fees don’t apply to all types of accounts, so it’s best to create an interface that can be applied to specific classes anywhere in the inheritance hierarchy. A checking account might charge fees, where its parent and sibling, the generic bank account and savings accounts might not. interface Fee { chargeFee(amount: number ); } // parent BankAccount and sibling SavingsAccount do not implement Fee interface class BankAccount { ... } class SavingsAccount extends BankAccount { ... } // checking implements Fee class CheckingAccount extends BankAccount implements Fee { chargeFee(amount: number) {} } . Children classes inherit interface members that have been implemented in their parent, so if a BusinessChecking account has inherited from the CheckingAccount class, then it inherits that implementation. // BusinessChecking inherits CheckingAccount and therefore Fee class BusinessChecking extends CheckingAccount { … } // Code that uses BusinessChecking can call chargeFee function CalculateMonthlyStatements() { let businessChecking = new BusinessChecking(); businessChecking.chargeFee(100); } . ",
    "url": "/CS4530-Fall-2023/tutorials/week1-typescript-basics#abstraction",
    
    "relUrl": "/tutorials/week1-typescript-basics#abstraction"
  },"209": {
    "doc": "Typescript Basics",
    "title": "Encapsulation",
    "content": "Encapsulation is a key part of Object Oriented Programming that is a way to structure code so that a certain block of code has specific access points for external code. The term for this is “visibility” or “accessibility”. Visibility defines what code from one method, property, or class can call code in another method, property, or class. In TypeScript, we enforce encapsulation with methods and properties that only allow access to data that we control. The Withdraw method below does that by doing the calculation and updating the class level _balance field. The Balance property then returns the private _balance field to the calling code. Withdraw(amount: number): boolean { if (this._balance &gt; amount) { this._balance -= amount return true; } return false; } private _balance: number; get Balance(): number { return this._balance; } . ",
    "url": "/CS4530-Fall-2023/tutorials/week1-typescript-basics#encapsulation",
    
    "relUrl": "/tutorials/week1-typescript-basics#encapsulation"
  },"210": {
    "doc": "Typescript Basics",
    "title": "General Guidelines",
    "content": ". | Naming conventions . | use kebab-case for file names. | Use camelCase for variable and function names. | Use PascalCase for Class and constructor function names. | . | Prefer descriptive names over random letters. | Although typing is optional in typescript, it is not optional for this course. | Always use strict equality. | Use a linter. (as specified on course website) | Use a prettifier. (If the linter doesn’t do it already) | Use general coding guidelines as discussed in Week1. | . ",
    "url": "/CS4530-Fall-2023/tutorials/week1-typescript-basics#general-guidelines",
    
    "relUrl": "/tutorials/week1-typescript-basics#general-guidelines"
  },"211": {
    "doc": "Unit Testing with Jest",
    "title": "Understanding Unit Testing",
    "content": "At some point, every programmer has wondered why they should spend time writing test cases instead of focusing on implementing a new feature. The reason for this is that it is important! In this tutorial, we’ll go through several aspects of unit testing, with a focus on utilizing Jest. Before we get into that, let’s define unit testing and why it’s so important in the real world. Unit testing is not a new concept; it has been around for a long time. “Unit tests are often automated tests prepared and executed by software engineers to check that a portion of an application (referred to as a “unit”) matches its design and behaves as expected,” according to Wikipedia. So, to put it another way, it’s a technique to undertake rigorous testing of every single function/module in isolation. Unit testing technques: . | Black Box Testing : It is a process of validating a function’s input and output without any knowledge of it’s internal implementation details. | White Box Testing : Unlike Black Box testing, white box testing focuses on testing the specific internal code flows, uncovering any unidentified error or bug in that component. | Gray Box Testing : Gray Box testing is a combination of the two above wherein partial knowledge of the internal code is needed. This strategy lowers a tester’s reliance on a developer for every minor issue, allowing the tester to detect and resolved it alone. | . ",
    "url": "/CS4530-Fall-2023/tutorials/week1-unit-testing#understanding-unit-testing",
    
    "relUrl": "/tutorials/week1-unit-testing#understanding-unit-testing"
  },"212": {
    "doc": "Unit Testing with Jest",
    "title": "Testing with Jest",
    "content": " ",
    "url": "/CS4530-Fall-2023/tutorials/week1-unit-testing#testing-with-jest",
    
    "relUrl": "/tutorials/week1-unit-testing#testing-with-jest"
  },"213": {
    "doc": "Unit Testing with Jest",
    "title": "Basics",
    "content": "To understand the basics of unit testing, let us look at the file called ‘calculator.ts’ present in the directory src/services/math/. This file contains a class called Calculator with a method for add() defined as shown below: . // Contents of src/services/math/calculator.ts export default class Calculator { public add(num1: number, num2: number): number { const result: number = num1 + num2; console.log(\"The result is: \", result); return result; } } . Let us write some tests for this code using jest. The test code will go into a file in the same directory titled ‘calculator.spec.ts’. Create this file now. This pattern of ‘file-name.spec.ts’ is how you should name all of your test files when using jest. All test files start with a suite. A suite is a collection of tests (or a logical grouping of tests). In jest, a suite is created by using the function describe(). The suite takes 2 arguments: the 1st being the description of the suite and the second being a callback function. Additionally, suites can be nested to form logical groups. Suites can further be broken down into 3 components that we will explore in detail shortly: . | Setup | Teardown | Test | . Syntax: . describe(\"Description of suite\", () =&gt; { // The tests go here. }); . Suites can be used to make debugging easier when you are using a large number of tests. Here is one recommended suite hierarchy: . | Top level describe should contain the file path after src. | Second describe should contain the name of the Class/File being tested. | Subsequent describe blocks should contain the name of the function being tested. | . Using this hierarchy, the test file for the above example would look as follows: . describe(\"services &gt; math\", () =&gt; { describe(\"Calculator\", () =&gt; { describe(\"add()\", () =&gt; { // Tests for add() go here. }); }); }); . Specs . A spec is an actual test that executes some code and asserts some result. A test is created using the keyword it() or test(). Similar to describe(), it() takes 2 arguments, the first being the description of the test and the second being a callback. Generally, we want to describe what the code should do in the description of it() and assert the described behavior within the test. Each test can be broken down into 3 parts (Assemble, Act, Assert) which makes up the AAA pattern. Optionally, there may be a clean-up/teardown step after the assert. Syntax: . it(\"should check a specific behaviour\", () =&gt; {}); . Let us write a simple test for our add() method to check 1 + 1 = 2. We start by adding a spec to the suite we created previously. describe(\"services &gt; math\", () =&gt; { describe(\"Calculator\", () =&gt; { describe(\"add()\", () =&gt; { it(\"should return 2 when inputs are 1 and 1\", () =&gt; { // Assemble // Act // Assert }); }); }); }); . ",
    "url": "/CS4530-Fall-2023/tutorials/week1-unit-testing#basics",
    
    "relUrl": "/tutorials/week1-unit-testing#basics"
  },"214": {
    "doc": "Unit Testing with Jest",
    "title": "Matchers",
    "content": ".toEqual() vs .toBe() vs .toStrictEqual() . All three matchers are used to test equality, though they have slight but important differences. To understand these differences, let us take a look at the example of Store.ts with the below code. export default class Store { private static _data: any = null; public static getData(): any { return Store._data; } public static setData(data: any): void { Store._data = data; } } . | Use .toEqual() to compare recursively all properties of object instances (also known as “deep” equality). It calls Object.is to compare primitive values, which is even better for testing than ‘===’, the strict equality operator. This is the most commonly used matcher. | . describe(\"utils &gt; store\", () =&gt; { describe(\"Store\", () =&gt; { beforeEach(() =&gt; { Store[\"_data\"] = undefined; }); describe(\"setData()\", () =&gt; { it(\"should assign the input data to Store._data\", () =&gt; { const mockData = { key: \"value\" }; Store.setData(mockData); expect(Store[\"_data\"]).toEqual(mockData); }); }); describe(\"getData()\", () =&gt; { it(\"should return an object equal to Store._data\", () =&gt; { const mockData = { key: \"value\" }; Store[\"_data\"] = mockData; const returnedValue = Store.getData(); expect(returnedValue).toEqual(mockData); }); }); }); }); . | Use .toBe() to compare primitive values or to check referential identity of object instances. It calls Object.is to compare values, which is even better for testing than ‘===’, the strict equality operator. | . describe(\"getData()\", () =&gt; { it(\"should return an object with a reference different to Store._data\", () =&gt; { const mockData = { key: \"value\" }; Store[\"_data\"] = mockData; const returnedValue = Store.getData(); expect(returnedValue).toEqual(mockData); expect(returnedValue).not.toBe(mockData); expect(Store[\"_data\"]).toBe(mockData); }); }); . | Use .toStrictEqual() to test that objects have the same types as well as structure. This checks for undefined in Objects and sparseness in Arrays. | { key: undefined } is not strictly equal to { }. | [ , 1] is not strictly equal to [undefined, 1]. | . | . it(\"should return an object strictly equal to object stored in Store._data\", () =&gt; { const mockData = { key: \"value\" }; const mockDataWithUndefined = { key: \"value\", key2: undefined }; Store[\"_data\"] = mockData; const returnedValue = Store.getData(); expect(returnedValue).toStrictEqual(mockData); expect(returnedValue).toEqual(mockDataWithUndefined); expect(returnedValue).not.toStrictEqual(mockDataWithUndefined); }); . ",
    "url": "/CS4530-Fall-2023/tutorials/week1-unit-testing#matchers",
    
    "relUrl": "/tutorials/week1-unit-testing#matchers"
  },"215": {
    "doc": "Unit Testing with Jest",
    "title": "AAA",
    "content": "Assemble . In order to run a test, we need to first assemble it. This may include creating instances of classes/variables, setting up test data for inputs, setting up spies/stubs/mocks (which will be covered in subsequest sections), or setting up the expected output. In simple cases, one may not need to assemble the test. This phase is very similar to the setup phase. In our example, let us create an instance of the Calculator class as part of assembling the test. import Calculator from \"./calculator\"; describe(\"services &gt; math\", () =&gt; { describe(\"Calculator\", () =&gt; { describe(\"add()\", () =&gt; { it(\"should return 2 when inputs are 1 and 1\", () =&gt; { const calculator: Calculator = new Calculator(); // Act // Assert }); }); }); }); . Act . In this step, we actually execute the function under test with required inputs and get the returned result (if any). In our example, we will invoke the add() method with inputs (1, 1) and get the result. import Calculator from \"./calculator\"; describe(\"services &gt; math\", () =&gt; { describe(\"Calculator\", () =&gt; { describe(\"add()\", () =&gt; { it(\"should return 2 when inputs are 1 and 1\", () =&gt; { const calculator: Calculator = new Calculator(); const result: number = calculator.add(1, 1); // Assert }); }); }); }); . Assert . Assertion is a statement that validates the behavior of our code by comparing the actual result against the expected results. There are many assertions provided by Jest, including some useful assertions we will use throughout our tests. Some of these assertions are listed below: . | expect(actual).toEqual(expected) // Expects both entities to have the same value. | expect(actual).toBe(expected) // Expects both entities to be the same. | expect(spy/stub/mock).toHaveBeenCalled() // Expects a function being spied/stubbed/mocked to be invoked. | expect(spy/stub/mock).toHaveBeenCalledWith([arguments]) // Expects a function being spied/stubbed/mocked to be invoked with specified arguments. | expect(actual).toBeDefined() // Expects the entity to be defined. | expect(actual).not. // Negates the assertion. Can be chained with any matchers above | await expect(error causing code returning a promise).rejects.toThrowError() // Waits for the error throwing code that returns promise (e.g. an API call) to throw the error and asserts the error was thrown. | . A full list of matchers can be found here. In our example, we can use the .toEqual() matcher. import Calculator from \"./calculator\"; describe(\"services &gt; math\", () =&gt; { describe(\"Calculator\", () =&gt; { describe(\"add()\", () =&gt; { it(\"should return 2 when inputs are 1 and 1\", () =&gt; { const calculator: Calculator = new Calculator(); const result: number = calculator.add(1, 1); expect(result).toEqual(2); }); }); }); }); . ",
    "url": "/CS4530-Fall-2023/tutorials/week1-unit-testing#aaa",
    
    "relUrl": "/tutorials/week1-unit-testing#aaa"
  },"216": {
    "doc": "Unit Testing with Jest",
    "title": "Setup and Teardown",
    "content": "Often in tests, we need some things to happen before a test actually runs and some things to happen after it. This may include resetting/initializing values, setting up test data, setting up spies/stubs/mocks, cleaning up variables after a test, or resetting spies/stubs/mocks. Sometimes these steps may need to be repeated for each test. This is where the setup and teardown can be especially useful. Jest Provides 2 methods for setup and 2 methods for teardown: . | beforeAll(): Runs one time before all the tests in a suite. | beforeEach(): Runs before every test in a suite. | afterEach(): Runs after every test in a suite. | afterAll(): Runs once after all tests in a suite. | . In our example, notice we created an instance of calculator in our Assemble phase. We will probably have multiple tests for the calculator that will require this instance. In order to avoid repeating this in every step, let us move this to the setup phase and add a teardown to clear this after all tests. Note: Use beforeEach()/afterEach() if the function/class stores state, and we need a clean instance for each test. In our case, calculator does not store any state, and we can share the same instance across tests with out any side effects. Hence, we will use beforeAll()/afterAll(). import Calculator from \"./calculator\"; describe(\"services &gt; math\", () =&gt; { describe(\"Calculator\", () =&gt; { describe(\"add()\", () =&gt; { let calculator: Calculator; beforeAll(() =&gt; { calculator = new Calculator(); }); afterAll(() =&gt; { calculator = undefined; }); it(\"should return 2 when inputs are 1 and 1\", () =&gt; { const result: number = calculator.add(1, 1); expect(result).toEqual(2); }); }); }); }); . Let us add another test to cover a different scenario, such as adding negative numbers. import Calculator from \"./calculator\"; describe(\"services &gt; math\", () =&gt; { describe(\"Calculator\", () =&gt; { describe(\"add()\", () =&gt; { let calculator: Calculator; beforeAll(() =&gt; { calculator = new Calculator(); }); afterAll(() =&gt; { calculator = undefined; }); it(\"should return 2 when inputs are 1 and 1\", () =&gt; { const result: number = calculator.add(1, 1); expect(result).toEqual(2); }); it(\"should return -2 when inputs are -1 and -1\", () =&gt; { const result: number = calculator.add(-1, -1); expect(result).toEqual(-2); }); }); }); }); . ",
    "url": "/CS4530-Fall-2023/tutorials/week1-unit-testing#setup-and-teardown",
    
    "relUrl": "/tutorials/week1-unit-testing#setup-and-teardown"
  },"217": {
    "doc": "Unit Testing with Jest",
    "title": "Mock Testing",
    "content": "As a project grows so do the interdependencies in the project. A function under test can have dependencies from various external entities. This may include other functions, network requests, database connections, or built-in connections. Spies, Stubs, and Mocks are ways of dealing with such external dependencies. You can read more on what you can do with spies/stubs/mocks here. Spy . A spy is a watcher on a function that tracks various properties of the function being spied on. This can return information such as whether a function was invoked, how many times it was invoked, and what argument it was invoked with. A spy on a function is created using the syntax const spy = jest.spyOn(object, 'methodName'); . Note: The function being spied on actually executes. In our example, we have an external dependency on console.log(). Let us add a spy and test for it. import Calculator from \"./calculator\"; describe(\"services &gt; math\", () =&gt; { describe(\"Calculator\", () =&gt; { describe(\"add()\", () =&gt; { let calculator: Calculator; beforeAll(() =&gt; { calculator = new Calculator(); }); afterAll(() =&gt; { calculator = undefined; }); it(\"should invoke console.log() with the result 2 for inputs 1 and 1\", () =&gt; { const logSpy = jest.spyOn(window.console, \"log\"); const result: number = calculator.add(1, 1); expect(logSpy).toHaveBeenCalledWith(\"The result is: \", result); logSpy.mockRestore(); }); }); }); }); . Mock . A mock is function which replaces an existing function. In our example, if we wanted to change the behavior of console.log() for our tests, we can do so using a mock. A mock implementation can be substituted for a spy or a jest.fn(). The syntax is as below: . spy.mockImplementation(() =&gt; { // new function body goes here. }); . Note: The function being mocked does not execute. In our example, if we wanted to replace the behavior of console.log(), we can do so as shown: . it(\"should invoke console.log() with the result 2 for inputs 1 and 1\", () =&gt; { const logSpy = jest.spyOn(window.console, \"log\"); logSpy.mockImplementation(() =&gt; { // This will no longer print to console. }); const result: number = calculator.add(1, 1); expect(logSpy).toHaveBeenCalledWith(\"The result is: \", result); logSpy.mockRestore(); }); . Warning: Watch out for circular dependencies in mock implementations. Stub . A stub is a special kind of mock which does not require an alternate implementation but instead returns some value that we specify. When a stub gets invoked, it does not invoke the actual function, but returns the desired value instead. The syntax is as below: . spy.mockReturnValue(someValue); . To return a promise, we can use: . spy.mockResolvedValue(someValue); . This can be especially handy when stubbing Axios requests. Using a stub in our example simply prevents console.log() from being executed, since it does not return a value anyway. it(\"should invoke console.log() with the result 2 for inputs 1 and 1\", () =&gt; { const logSpy = jest.spyOn(window.console, \"log\"); logSpy.mockReturnValue(); const result: number = calculator.add(1, 1); expect(logSpy).toHaveBeenCalledWith(\"The result is: \", result); logSpy.mockRestore(); }); . ",
    "url": "/CS4530-Fall-2023/tutorials/week1-unit-testing#mock-testing",
    
    "relUrl": "/tutorials/week1-unit-testing#mock-testing"
  },"218": {
    "doc": "Unit Testing with Jest",
    "title": "Testing Asynchronous Code",
    "content": "Promise . In previous tutorials, we have used Axios to make http requests which return promises. This is how we can write tests for axios requests. Consider the example below: . import axios from \"axios\"; import Store from \"../../utils/store/store\"; export default class HttpService { public getData(): Promise&lt;any&gt; { return axios.get(\"/myUrl\"); } } . We can test the above code as follows: . // Assuming we have done the setup as in previous tests describe(\"getData()\", () =&gt; { it('should invoke axios.get() with \"myUrl\"', async () =&gt; { const getStub = jest .spyOn(axios, \"get\") .mockResolvedValue({ status: 200, data: {} }); await httpService.getData(); expect(getStub).toHaveBeenCalledWith(\"/myUrl\"); }); it(\"should return the status as 200\", async () =&gt; { const getStub = jest .spyOn(axios, \"get\") .mockResolvedValue({ status: 200, data: {} }); const response = await httpService.getData(); expect(response.status).toEqual(200); getStub.mockRestore(); }); }); . Note: You can return different values for subsequent calls to a stub. Occasionally, you may run into situations where an http request is made but no promise is returned. This is often found in cases involving “fire and forget” calls or a central store with an Observable pattern implementation (e.g. Redux with react). We cannot await a function that does not return a promise. However, we can use fake timers to simulate passage of time to test such asynchronous behavior. Consider the example below: . import axios from \"axios\"; import Store from \"../../utils/store/store\"; export default class HttpService { public getData(): Promise&lt;any&gt; { return axios.get(\"/myUrl\"); } public getDataAndSetStore(): void { axios.get(\"/myUrl\").then((res) =&gt; { Store.setData(res.data); }); } } . We can test the above functionality as follows: . describe(\"getDataAndSetStore()\", () =&gt; { it('should invoke axios.get() with \"myUrl\"', async () =&gt; { const getStub = jest .spyOn(axios, \"get\") .mockResolvedValue({ status: 200, data: {} }); await httpService.getDataAndSetStore(); expect(getStub).toHaveBeenCalledWith(\"/myUrl\"); }); it(\"should set the data in store\", async () =&gt; { const addDataStub = jest.spyOn(Store, \"setData\").mockImplementation(); const getStub = jest .spyOn(axios, \"get\") .mockResolvedValue({ status: 200, data: \"myData\" }); jest.useFakeTimers(); httpService.getDataAndSetStore(); jest.runAllTimers(); await Promise.resolve(); expect(addDataStub).toHaveBeenCalledWith(\"myData\"); addDataStub.mockRestore(); getStub.mockRestore(); jest.useRealTimers(); }); }); . Callbacks . Callbacks are one of the most commonly used patterns for asynchronous programming in JavaScript/TypeScript. Consider the below callback function use case: . test('Check if I am a true husky', () =&gt; { function callback(data) { expect(data).toBe('I am from Northeastern!'); } fetchData(callback); }); . Here, fetchData() is a function that takes a callback and would call that callback function later in it’s implementation. Now consider 2 scenarios: . case 1: . fetchData(callback) { setTimeout(()=&gt;{ callback('I am from Northeastern!'); }, 1000); } . case 2: . fetchData(callback) { setTimeout(()=&gt;{ callback('I am not from Northeastern!'); }, 1000); } . The test case would still pass in either of the above scenarios since fetchData() is an async function, which means the program will not wait for the call to complete. The correct way to test a callback would be using the argument done in the test like shown in below example: . test('Check if I am a true husky', (done) =&gt; { function callback(data) { expect(data).toBe('I am from Northeastern!'); done(); } fetchData(callback); }); . Now, the program would wait for done to be invoked. This implementation would correctly test both the above scenarios. ",
    "url": "/CS4530-Fall-2023/tutorials/week1-unit-testing#testing-asynchronous-code",
    
    "relUrl": "/tutorials/week1-unit-testing#testing-asynchronous-code"
  },"219": {
    "doc": "Unit Testing with Jest",
    "title": "UI Testing",
    "content": "Testing UIs can be very tricky, especially when we want to test features involving user interaction (e.g. a user clicking on a button). However, there are some useful tools that can help us. The React Testing Library provides many helpful features that can help us. import {render, screen} from '@testing-library/react' import Counter from './Counter' it('renders the Counter component correctly', async () =&gt; { render(&lt;Counter /&gt;); // Will throw error if not found screen.getByText(\"Count: 0\" ) screen.getByText(\"Click me!\" ) }) . Above is a very simple test to ensure that our Counter component renders as expected with out any user input. Suppose now that we wanted to test user interaction with the page: . import {render, fireEvent, screen} from '@testing-library/react' import Counter from './Counter' it('correctly renders the updated count after the user clicks the button', async () =&gt; { render(&lt;Counter /&gt;); screen.getByText(\"Count: 0\" ) fireEvent.click(screen.getByRole('button')) screen.getByText(\"Count: 1\" ) }) . A full list of testing functions from React Testing Library can be found here. ",
    "url": "/CS4530-Fall-2023/tutorials/week1-unit-testing#ui-testing",
    
    "relUrl": "/tutorials/week1-unit-testing#ui-testing"
  },"220": {
    "doc": "Unit Testing with Jest",
    "title": "Setting up testing using Jest in VSCode",
    "content": "Testing can sometimes get cumbersome as the user is expected to remember all the options provided by Jest to run a specific set of tests, or otherwise the user will have to run the entire test suite just to verify the result of a single test case. Not anymore! . With vscode-jest, you have complete control over the way you want to run tests, with many features that visually inform the users about which specific line is failing with what error. ",
    "url": "/CS4530-Fall-2023/tutorials/week1-unit-testing#setting-up-testing-using-jest-in-vscode",
    
    "relUrl": "/tutorials/week1-unit-testing#setting-up-testing-using-jest-in-vscode"
  },"221": {
    "doc": "Unit Testing with Jest",
    "title": "Features",
    "content": ". | Starts Jest automatically when you’re in a root folder project with Jest installed. | Show individual fail / passes inline. | Show fails inside the problem inspector. | Highlights the errors next to the expect functions. | Adds syntax highlighting to snapshot files. | A one button update for failed snapshots. | Show coverage information in files being tested. | Help debug jest tests in vscode. | Supports multiple test run modes (automated, manual, and hybrid onSave) to meet user’s preferred development experience. | Track and shows overall workspace/project test stats | . ",
    "url": "/CS4530-Fall-2023/tutorials/week1-unit-testing#features",
    
    "relUrl": "/tutorials/week1-unit-testing#features"
  },"222": {
    "doc": "Unit Testing with Jest",
    "title": "Installation",
    "content": "Direct Installation . | Open Visual Studio Code, go to the extension tab. | Search for “Jest” with the publisher name as “Orta”. | Click “Install”. | . From Visual Studio Marketplace . | Visit Jest - Visual Studio Marketplace and click “Install”. | Allow the browser to open VSCode as shown (might be different for macOS/Linux systems) by clicking on Continue. | Once VSCode is open, click on “Install”. | . Once installed, the extension should work out of the box without any extra configuration for most of the homework handouts and project starter code. You can verify the installation by checking if the following is visible to you when you open a project which has Jest configured (VSCode restart maybe required.). If restarting Jest does not work, you can run the following in your VSCode by opening VSCode’s command palette (Ctrl + Shift + P in Windows, Cmd + Shift + P in macOS) and run the following - “Jest: Start All Runners”. Additional Extensions and Libraries . If you would like to run each test individually (and all tests in test suites colledtively), VSC extenstion called “Jest Runner” will be very useful. You can also explore jest extended library that offers additional matchers for testing. ",
    "url": "/CS4530-Fall-2023/tutorials/week1-unit-testing#installation",
    
    "relUrl": "/tutorials/week1-unit-testing#installation"
  },"223": {
    "doc": "Unit Testing with Jest",
    "title": "Configuration",
    "content": "As of the latest stable version, the extension is set to run all tests whenever any change is made to the files containing the tests. You can modify the behaviour to manual execution where you can run specific test cases as and when required. This can be modified by changing the \"jest.autoRun\" setting as follows - . | \"jest.autoRun\": {\"watch\": true} =&gt; will start the jest with the watch flag and leave all tests at “unknown” state until changes are detected. | \"jest.autoRun\": {\"watch\": true, \"onStartup\": [\"all-tests\"]} =&gt; will start running all tests upon project launch to update overall project test stats, followed by the jest watch for changes. | \"jest.autoRun\": \"off\" =&gt; there will be no automatic test run, users will trigger test run by either command or context-menu. | \"jest.autoRun\": {\"watch\": false, \"onSave\": \"test-file\"} =&gt; the extension will trigger test run for the given test file upon save. | \"jest.autoRun\": {\"watch\": false, \"onSave\": \"test-src-file\"} =&gt; the extension will trigger test run for the given test or source file upon save. | . An example of changing the extension to run in manual mode is demonstrated below - . NOTE - You will only be able to Run specific test cases as and when required only when autoRun is off. However, you’ll be able to Debug any test cases in all available modes. ",
    "url": "/CS4530-Fall-2023/tutorials/week1-unit-testing#configuration",
    
    "relUrl": "/tutorials/week1-unit-testing#configuration"
  },"224": {
    "doc": "Unit Testing with Jest",
    "title": "Debugging Tests",
    "content": "Once the extension is setup and confirmed to be working, we can now begin debugging the tests. You can do so by opening the testing tab from the left sidebar in VSCode to view all the tests present in the current project. You can also navigate to the specific test file manually, and you will notice some icons/action buttons in the editor next to each test. Right clicking on the icons will bring up a test-specific context menu which will have options to debug the specific test. Be sure to place breakpoints in the specific pieces of code by clicking to the left of the line numbers. If everything is setup correctly, the debugger in VSCode will pause at the breakpoint you set and you can check the values of the variables by hovering over the said variable. ",
    "url": "/CS4530-Fall-2023/tutorials/week1-unit-testing#debugging-tests",
    
    "relUrl": "/tutorials/week1-unit-testing#debugging-tests"
  },"225": {
    "doc": "Unit Testing with Jest",
    "title": "General Guidelines For Writing Tests",
    "content": "Note: The following will be used as a reference when grading assignments. | Tests should be hermetic. | Reduce flakiness. | Flaky tests are those that fail intermittently: . | Nondeterminism (e.g., hash codes, random numbers); | Timing issues (e.g., threads, network). | Availability of Resources | . | . | Tests should be clear. | After failure, should be clear what went wrong. | . | Tests should be scoped as small as possible. | Faster and more reliable. | . | Tests should make calls against public APIs. | Or they become brittle | Brittle tests are those that are not self-contained: . | Ordering of tests (e.g., assume prior state) | . | . | . Note: The following will not be used as a reference when grading assignments. But you should try following these guidelines as much as you can. | Write tests based on the expected behavior, not based on the interpretation/implementation of it. | Test assertion (expect) should match the test description. | Each spec should test only 1 thing (preferably with 1 assertion per test). | Organize tests using suites (i.e. each method has it’s own suite). | Use setup and teardown functions to reduce code duplicity. | Code duplicity in tests is preferred over complicated logic to reduce it. | If your tests need tests, they have no value. | . | Cover the happy path for your code first. | Follow up with edge cases. | End with error scenarios. | . | Mock/Stub all external dependencies. | Clear the mocks after each test. | . | If large test data is being used, ensure clean-up after tests to prevent memory leaks. | Code coverage is a deceptive measure. 100% coverage does not mean 100% tested code. | A well designed test suite improves the quality and reliability of code. | . ",
    "url": "/CS4530-Fall-2023/tutorials/week1-unit-testing#general-guidelines-for-writing-tests",
    
    "relUrl": "/tutorials/week1-unit-testing#general-guidelines-for-writing-tests"
  },"226": {
    "doc": "Unit Testing with Jest",
    "title": "Unit Testing with Jest",
    "content": "This tutorial covers the basics on unit testing with Jest. By the end of this tutorial, you will have an introduction to unit testing with jest, best practices, and some handy tricks and tips to use in your tests. Starter code is available here, and finished code with tests covered in this tutorial can be found here. We strongly recommend using the completed solution only for reference and implementing the tutorial step by step from the starter code. Contents: . | Understanding Unit Testing | Testing with Jest . | Basics . | Specs | . | Matchers . | .toEqual() vs .toBe() vs .toStrictEqual() | . | AAA . | Assemble | Act | Assert | . | Setup and Teardown | Mock Testing . | Spy | Mock | Stub | . | Testing Asynchronous Code . | Promise | Callbacks | . | UI Testing | . | Setting up testing using Jest in VSCode . | Features | Installation . | Direct Installation | From Visual Studio Marketplace | Additional Extensions and Libraries | . | Configuration | Debugging Tests | . | General Guidelines For Writing Tests | . ",
    "url": "/CS4530-Fall-2023/tutorials/week1-unit-testing",
    
    "relUrl": "/tutorials/week1-unit-testing"
  },"227": {
    "doc": "User Stories and Conditions of Satisfaction",
    "title": "User Stories and Conditions of Satisfaction",
    "content": "A user story is an informal, general explanation of a software feature written from the perspective of the end user or customer. As a &lt;role&gt; I can &lt;perform action&gt; so that I can &lt;receive benefit&gt; . User stories represent something the user/customer might want. There will be many ways to give the user/customer the benefit that they want. We need to refine these in order to determine what to build. We call these refinements “conditions of satisfaction” (COS) . A COS should be a specific capability or behavior that the user expects, in the user’s terms. It should be visible to and verifiable by the user. The COS is a guide to the implementation team. It should be specific enough so that the implementation team has a clear idea of what they are building. There still may be many ways to implement a COS. For example, a COS probably would not specify any of the graphic or layout details; these would likely be left to the implementation team. ",
    "url": "/CS4530-Fall-2023/tutorials/week1-user-stories#user-stories-and-conditions-of-satisfaction",
    
    "relUrl": "/tutorials/week1-user-stories#user-stories-and-conditions-of-satisfaction"
  },"228": {
    "doc": "User Stories and Conditions of Satisfaction",
    "title": "User Stories and Project Planning",
    "content": "In planning a project, need to assign priorities to each user story and Condition of Satisfaction. Priorities tell us the order in which COS and their associated engineering tasks should be addressed, and how much effort should be devoted to each of them. There are many ways to describe priorities. For example, a user story might be described as Essential, Desirable, or Extension: . | Essential means the project is useless without it. | Desirable means the project is less usable without it, but is still usable. | Extension describes a User story or COS that is desirable, but may not be achievable within the scope of the project. | . ",
    "url": "/CS4530-Fall-2023/tutorials/week1-user-stories#user-stories-and-project-planning",
    
    "relUrl": "/tutorials/week1-user-stories#user-stories-and-project-planning"
  },"229": {
    "doc": "User Stories and Conditions of Satisfaction",
    "title": "Minimum Viable Product (MVP)",
    "content": "An MVP is a product that consists of all essential user stories. Developers should prioritize those above others. ",
    "url": "/CS4530-Fall-2023/tutorials/week1-user-stories#minimum-viable-product-mvp",
    
    "relUrl": "/tutorials/week1-user-stories#minimum-viable-product-mvp"
  },"230": {
    "doc": "User Stories and Conditions of Satisfaction",
    "title": "User Stories and Test-Driven Development",
    "content": "We model the development process as a cycle of refinements: . | User Stories | Conditions of Satisfaction | Testable behaviors | Executable Tests | Engineering Tasks (Code) | . As we proceed down these refinements, we will likely go back and revisit design decisions that we made at earlier stages. This is the topic of Module 02. ",
    "url": "/CS4530-Fall-2023/tutorials/week1-user-stories#user-stories-and-test-driven-development",
    
    "relUrl": "/tutorials/week1-user-stories#user-stories-and-test-driven-development"
  },"231": {
    "doc": "User Stories and Conditions of Satisfaction",
    "title": "Examples",
    "content": " ",
    "url": "/CS4530-Fall-2023/tutorials/week1-user-stories#examples",
    
    "relUrl": "/tutorials/week1-user-stories#examples"
  },"232": {
    "doc": "User Stories and Conditions of Satisfaction",
    "title": "User Stories:",
    "content": "User Story #1: . As a manager, I want to track my subordinates’ progress, so that the organization’s business goals are met. [Probably too general; in the agile terminology, this might be an “epic”, which is then refined into a set of user stories] . User Story #2: . As a player in covey.town, I want to be able to play a game of connect4 with another player, so that I can pass the time enjoyably. (Essential) . User Story #3: . As a player in covey.town, I want to see how well I’m doing at connect4 compared to other players, so I can feel superior to them. (Desirable) . User Story #4: . As a player in covey.town, I want to learn different strategies for connect4, so I can win more games. (Extension) . User Story #5: . As a user of Covey.Town, I want to be able to interact with other users in different activities like private chat, playing games, etc. while providing ability to customize user avatars to make the town more fun. (Essential but too general. Best to split it in 3 different stories one for private chat, one for games and one for customization.) . ",
    "url": "/CS4530-Fall-2023/tutorials/week1-user-stories#user-stories",
    
    "relUrl": "/tutorials/week1-user-stories#user-stories"
  },"233": {
    "doc": "User Stories and Conditions of Satisfaction",
    "title": "Conditions of Satisfaction:",
    "content": "For User Story #2: . | There should be a Conncect4 area in the town, where players can play Connect4. (Essential) | Whenever there are two players in the same Connect4 area, a Connect4 game is started between them. (Essential) | The status of the Connect4 game is presented in graphical form on the screen (Essential). | When one player wins (or there is a draw), both players are notified of the result. (Essential) | When a player makes a move in the Connect4 game, the tile visibly drops onto the game board, and a suitable sound effect is emitted (Extension) | If other players enter a Connect4 area while a game is going on, they can see the status of the game also (Desirable) | . [Note: these COSs do not describe the game board in detail, though that is pretty standard. They also do not describe what happens to the two players when the game is over. Do they stay in the area and spectate? Do the next two players play? Does the first spectator play the winner of the game? etc. etc.] . | There should be a way for one player to challenge another to play the game of Connect4, no matter where they are in the town. (This might be an Extension, or it might be a different user story). | . For User Story #3: . | There should be a leaderboard showing the Connect4 ranking of all the players in the town. (Essential). | The leaderboard should show the current score of all the Connect4 games currently in progress. (Desirable) | The leaderboard should show the current score of all the Connect4 games currently in progress, and any player can click on the entry for a game and spectate that game. (Desirable; might be Extension, depending on the expertise of the team). | The leaderboard should show the lifetime standings of all the players who have ever logged in to this town. (Extension) | . For User Story #5: . | User will be able to join an interactable area which includes leaderboards for all activities (This is too general and should be split in several conditions of satisfactions. For example, joining an area itself can be independent of being able to view leaderboard. Also each activity’s leaderboard should have its own condition of satisfaction. There could be several conditions for leaderboard alone to describe how data is organized) | User is able interact with an instance of interactable area created by another player (This COS is vague. What does interact mean? Does it mean enter an area or do something else?) | User is allowed to join an interactable area of another player in a town if the user was not invited (this sounds wrong, opposite to what the system should be doing) | User is allowed to join an interactable area (Desirable, The priority is wrong. For a user story that requires joining an interable area before anything else, this condition should be considered essential, instead of desirable) | . Reference . ",
    "url": "/CS4530-Fall-2023/tutorials/week1-user-stories#conditions-of-satisfaction",
    
    "relUrl": "/tutorials/week1-user-stories#conditions-of-satisfaction"
  },"234": {
    "doc": "User Stories and Conditions of Satisfaction",
    "title": "User Stories and Conditions of Satisfaction",
    "content": "This tutorial provides examples for user stories, consitions of satisafation and how a minimum viable product can be defined. Contents: . | User Stories and Conditions of Satisfaction | User Stories and Project Planning | User Stories and Test-Driven Development | Examples | . ",
    "url": "/CS4530-Fall-2023/tutorials/week1-user-stories",
    
    "relUrl": "/tutorials/week1-user-stories"
  },"235": {
    "doc": "React Tutorial",
    "title": "React Basics",
    "content": "This tutorial covers the basic concepts of react. By the end of this tutorial, you will be able to create a new react app, understand the basic concepts of react such as states and props, understand React hooks and handling events. | React Basics | Creating a new NextJs App | Understanding a React App . | Components | Template For Structure of Function Component | Props | State | Communicating between Components . | Parent to Child | Child to Parent | . | Handling Events | . | React Hooks . | UseState . | Updating Arrays in State | . | UseEffect . | Object Dependencies in UseEffect | . | . | . ",
    "url": "/CS4530-Fall-2023/tutorials/week4-react-basics#react-basics",
    
    "relUrl": "/tutorials/week4-react-basics#react-basics"
  },"236": {
    "doc": "React Tutorial",
    "title": "Creating a New Next Js App",
    "content": "Let’s use npx and create-next-app to create a new Next.Js project . | npx stands for Node Package Execute. It is a runner that can execute any package that you want from the npm registry without even installing that package. In this case npx tool temporarily installs the create-next-app npm package and uses it to create our project. | Please check the following reference to the Next.Js boiler plate and getting started with framework Next.Js official documentation . | . | We use the create-next-app npx package to create an application that creates a fully-featured TS package. npx create-next-app my-app . | Note 1: This will create a new project directory called my-app under the current directory. | Note 2: This will create a git repo in my-app, so you probably shouldn’t do this inside a pre-existing git repository. | Note 3: Create the project with the following details after executing the command | . | Navigate to the project directory using the command: cd my-app . | To start the development server for React, run the command: npm run dev . | Navigate to http://localhost:3000/ to see the default react page. | After a few seconds, a browser window opens, with our app running: | . | Chakra UI components can be reused and the library can be installed for Next.js with following command: npm i --save @chakra-ui/react @chakra-ui/next-js . | . ",
    "url": "/CS4530-Fall-2023/tutorials/week4-react-basics#creating-a-new-next-js-app",
    
    "relUrl": "/tutorials/week4-react-basics#creating-a-new-next-js-app"
  },"237": {
    "doc": "React Tutorial",
    "title": "React Component",
    "content": "React follows a Component based architecture. A component is a repeatable html element with built-in state, business logic, and a lifecycle. The component may be something as simple as a single html element such as an input box, or a button, or a complex entity made up of other components. Components are the basic building blocks of a React application and they allow the developer to split the UI into independent and reusable pieces where each piece can be used in isolation. Creating A Function Component in React . view in sandbox . The simplest method to define a component is to write a function in Javascript. These components are also widely referred as functional stateless components but in the recent versions of React, they have the capabilities to contain state as well. import * as React from \"react\"; interface Props = {name?: string}; function App (props: Props) { return ( &lt;div className=\"App\"&gt; &lt;h1&gt;Welcome to React with Typescript Tutorial.&lt;/h1&gt; &lt;/div&gt; ); } export default App; . A Few Things to Note About React Components: . | The root (App) component is the entry point for the React App and all other components are nested in it. | We define a function component using a javascript function, passing the props type in as a generic parameter. | The import statement is used to import the public classes/functions from the react library. | A function can return a single top level element. | div is the top level element in this case and other elements can be nested in it. | The attribute className is used to specify a CSS class name if CSS properties have been defined seperately for a class. | className attribute is used to set the value of an element’s class attribute. Using this property, the user can set the class of an element to the desired class. | . | . | The round brackets (()) after return are used to span a JSX/TSX element across multiple lines. | At last , the component needs to be exported from the current file, so that it can be imported somewhere else and can be used either in isolation or combination with other components for rendering on the UI. | Elements on one line can be returned directly. | Each instance of a component creates a new element independent of other instances of the component. | Each component has it’s own state, props, and lifecycle (which will be explored later in the tutorial). | . ",
    "url": "/CS4530-Fall-2023/tutorials/week4-react-basics#react-component",
    
    "relUrl": "/tutorials/week4-react-basics#react-component"
  },"238": {
    "doc": "React Tutorial",
    "title": "Template For Structure of Function Component",
    "content": "view in sandbox . import * as React from \"react\"; interface Props = {property1?: value1, property2?: value2} function ComponentName (props: Props) { const handler = () =&gt; { ... }; return ( &lt;div&gt;Our TSX&lt;/div&gt; ); }; ComponentName.defaultProps = { ... }; export default ComponentName; . ",
    "url": "/CS4530-Fall-2023/tutorials/week4-react-basics#template-for-structure-of-function-component",
    
    "relUrl": "/tutorials/week4-react-basics#template-for-structure-of-function-component"
  },"239": {
    "doc": "React Tutorial",
    "title": "Props",
    "content": "view in sandbox . React components are similar to JavaScript functions and can accept arbitrary arguments called props. Since components are reusable, props are especially useful to display different content in each instance of the component. Let us extract the header elements from the previous code snippet into a new component called Header. We can then use props to say “hello” to different users. | Create a new file in src/ directory called Header.tsx | Create and export a function called Header in the file as below: ```ts import React from “react”; | . interface IProps { name?: string; } . const Header = (props: IProps) =&gt; { return &lt;h1&gt;Hello, {props.name}&lt;/h1&gt;; }; . Header.defaultProps = { name: “World” }; . export default Header; . - The above code snippet creates a new function component `Header` and prints the value of the `name` passed in the props. - It defines a defaultProps for the component `Header` where the default value for `name` is used in case the value for props for `name` is not passed in any instance of the component. - In App.tsx: - Remove the code in h1 tags. - Import the Header component as below: - ```ts import Header from './Header'; ``` - Update the contents of return as below: - ```ts &lt;div className=\"App-header\"&gt; &lt;Header /&gt; &lt;Header name=\"John\" /&gt; &lt;Header name=\"Jane\" /&gt; &lt;/div&gt; ``` - Save all files and run npm start A few things to note from the above example: - Component.defaultProps can be used to specify default values for props. - Components are rendered to the user interface and the component’s logic contains the data to be displayed in the view(UI). - Curly braces ({}) in JSX/TSX are used as a connection between the data to be displayed in the view and the component’s logic for displaying the data in the view. - In our example, `{props.name}` will reflect the value of the property `name` in the view(html) for the cases when the values \"John\" and \"Jane\" are passed as props for the `name` property. - If no props are passed for an instance of the component, then it will display the default value of props. ## State State management is just a means of facilitating data sharing and communication among components. It creates a concrete data structure that you can read and write to reflect the state of your program. ```ts const [counter, setCounter] = useState(0) . The above snippet shows creation of counter state with an intial value of 0. Using the array destructuring syntax we extract out the state variable and the function to update the counter value. In its most basic form, a State object is a JavaScript object that represents the part of a component that can change as a result of a user’s action. States can also be thought of as a component’s memory. State update calls are asynchronous. As one cannot expect to call the update state function on one line and expect the state to be updated on the next. The reason for this is because update state methods are more of a request than an immediate order to update state. So React schedules an update to a component’s state object. When state changes, the component responds by re-rendering. Also multiple update request may be batched into one for performance reasons. Changes in state and/or props will both cause our React component to re-render. Changes in state, on the other hand, can only occur internally as a result of components modifying their own state.  . ",
    "url": "/CS4530-Fall-2023/tutorials/week4-react-basics#props",
    
    "relUrl": "/tutorials/week4-react-basics#props"
  },"240": {
    "doc": "React Tutorial",
    "title": "Communication Between Components:",
    "content": "Parent To Child Component Communication: . view in sandbox . Passing values from a parent component to a child component is simple. We only have to pass the values as props of the child component. The child component can then use the props object to output results. In the example code you will see that CounterContent component accepts a counter prop which is then used to display the value inside div element. import { useState } from \"react\"; interface CounterContentProps { counter: Number; } function CounterContent({ counter }: CounterContentProps) { return &lt;div&gt;Counter: {counter}&lt;/div&gt;; } function Counter() { const [counter, setCounter] = useState&lt;number&gt;(0); return ( &lt;&gt; &lt;CounterContent counter={counter} /&gt; &lt;button onClick={() =&gt; setCounter(counter + 1)}&gt;Increment Count&lt;/button&gt; &lt;/&gt; ); } . Child to Parent Component Communication . view in sandbox . For passing data from child component to parent component do the following steps: . | Declare a callback function inside the parent component. This function will get data from the child component. | Pass the callback function to the child component as props. | Child then sends the update to the parent through the use of the callback function. | . In the example below we have four children components: . | CounterContent: Displays the counter value | IncrementCounterButton: Increments the counter value | DecrementCounterButton: Decrements the counter value | CustomCounterButton: Sets the counter to a particular value. | . All callback functions passed to the children component are declared in Counter function which is the parent component that maintains the state value for counter. import { useState } from \"react\"; interface CounterContentProps { counter: Number; } interface IncrementCounterButtonProps { incrementCount(): void; } interface DecrementCounterButtonProps { decrementCount(): void; } interface SetCounterButtonProps { setCount(value: number): void; } function CounterContent({ counter }: CounterContentProps) { return &lt;div&gt;Counter: {counter}&lt;/div&gt;; } /** * Child component accepts a incrementCount callback function as a props. * The callback which is declared inside the parent component triggers a state update. */ function IncrementCounterButton({ incrementCount }: IncrementCounterButtonProps) { return &lt;button onClick={() =&gt; incrementCount()}&gt;increment Count&lt;/button&gt;; } /** * Child component accepts a decrementCount callback function as a props. * The callback which is declared inside the parent component triggers a state update. */ function DecrementCounterButton({ decrementCount }: DecrementCounterButtonProps) { return &lt;button onClick={() =&gt; decrementCount()}&gt;Decrement Count&lt;/button&gt;; } function CustomCounterButton({ setCount }: SetCounterButtonProps) { // change this value to see how child passes count value data to parent through // the use of callback function const dummyValue = 100; return ( &lt;button onClick={() =&gt; setCount(dummyValue)}&gt; Set Count to {dummyValue} &lt;/button&gt; ); } /** * Parent Component where state and callbacks are maintained. **/ function Counter() { const [counter, setCounter] = useState(0); const decrementCount = () =&gt; { if (counter === 0) return; setCounter(counter - 1); }; const incrementCount = () =&gt; { setCounter(counter + 1); }; const setCount = (value: number) =&gt; { setCounter(value); }; return ( &lt;&gt; &lt;CounterContent counter={counter} /&gt; &lt;IncrementCounterButton incrementCount={incrementCount} /&gt; &lt;DecrementCounterButton decrementCount={decrementCount} /&gt; &lt;CustomCounterButton setCount={setCount} /&gt; &lt;/&gt; ); } . ",
    "url": "/CS4530-Fall-2023/tutorials/week4-react-basics#communication-between-components",
    
    "relUrl": "/tutorials/week4-react-basics#communication-between-components"
  },"241": {
    "doc": "React Tutorial",
    "title": "Handling Events",
    "content": "view in sandbox . | React impelemnts its own system of handling events that is very similar to handling events on DOM elements. There are some syntax differences: . | React events are named using camelCase, rather than lower case. | With JSX a function can be passed as an event handler instead of a string. | . | . For example, the HTML . &lt;button onclick=\"incrementCounter()\"&gt;Increment Counter&lt;/button&gt; . is slightly different in React: . &lt;button onclick=\"{incrementCounter}\"&gt;Increment Counter&lt;/button&gt; . | React provides an equivalent of each event that you might be familiar with from standard HTML DOM. Events typing can be imported directly from react as shown in the example below: | . import { MouseEvent } from \"react\"; function HelloWorld() { const sayHello = (event: MouseEvent) =&gt; { event.preventDefault(); console.log(`${event.currentTarget.tagName}: says hello, world.`); }; return ( &lt;div&gt; &lt;button onClick={sayHello}&gt;Submit&lt;/button&gt; &lt;/div&gt; ); } export default HelloWorld; . For the list of all the supported events refer https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/forms_and_events/#list-of-event-types . Please check the list of commom events and instances in which they are used https://react.dev/reference/react-dom/components/common . ",
    "url": "/CS4530-Fall-2023/tutorials/week4-react-basics#handling-events",
    
    "relUrl": "/tutorials/week4-react-basics#handling-events"
  },"242": {
    "doc": "React Tutorial",
    "title": "React Hooks",
    "content": "React hooks are built-in functions which allows us to use state and other lifecycle features. The most basic hooks used by react are useState() which adds a state variable to a react component and useEffect() which is the lifecycle hook for a component. State of component referes to the data it is holding at a particular moment in time. useState(): . view in sandbox . In this section we will see how we can add state to a React Component using the useState() hook provided by React. The useState hook takes the initial value of the state variable as an argument, the initial state can be any type you want (a string, a number, an array, an object) or a function. Only on the first render will the initial value be assigned. Each useState call returns a two-element array. The state variable is the first element of the array, followed by a function to change the variable’s value. | We’ll start by defining and initializing state for the number of times the button is clicked, by adding the a state variable as follows: | . import {useState} from 'react'; function Counter() { const [count, setCount] = useState(0); ... } . This line of code looks a little strange, so let’s break it down: . | When the hook useState() is invoked, it returns an array. Where the first item is the state value, and the second item is a function that updates the state. | First, we import the useState from react library. | useState is a React function that lets us create state, passing in a default value as a parameter. In our case, we pass it a default value of 0. | The useState function returns an array containing two elements: | . | The first array element contains the current value of state. | . | . | The second array element contains a function to set state to a different value. | . | We destructure the array and store the first array element (the state value) in count, and the second array element (the function to set state) in setCount. | The rest of the function now has access to the count, via the count variable. The function is also able to increment the count, via the setCount variable. | . | Let’s add a function to update the state of the variable: | . function incrementCount() { setCount(count + 1); } . | Now, functions to set the piece of state take in the new state as their parameter. | . | Next we’ll make the component return the count along with a button to increment the count when clicked. Final function code will be as follows: | . import { useState } from \"react\"; function Counter() { const [count, setCount] = useState(0); function incrementCount() { setCount(count + 1); } return ( &lt;div&gt; &lt;h1&gt;Count: {count}&lt;/h1&gt; &lt;button onClick={incrementCount}&gt;Click me!&lt;/button&gt; &lt;/div&gt; ); } export default Counter; . If we give this a try in the running app, we should find the count variable’s value to keep incrementing by one every time the button is clicked. After we’ve got our heads around the code needed to define state, accessing and setting state is fairly simple and elegant. Updating Arrays in State . Suppose we want to maintain an array in our state object. const [list, setList] = useState([]); . Now suppose we want to add an element to this list and have the component re-render to reflect the changes. We might try pushing an item to the list like so: . list.push(element); // doesn't work . However, React will not re-render the component as it does not detect a change in the state. This is because the object referenced in the state is the same before and after pushing the element, and so to React, the object looks the same because the reference is the same. To get around this, we must invoke the setList function to create a new reference so that React will detect the change and re-render the component. The easiest way in this case would be to use the spread operator (...) to make a copy of the existing list and push a new element to the new list: . const newList = [...list]; // copy the current list newList.push(element); setList(newList) . useEffect(): . view in sandbox . Now let’s have a look at how to invoke the code to execute at a certain point in the component’s lifecycle. Older versions of React consisted of different Lifecycle hooks that allowed a user to hook into various phases of component rendering such as componentDidMount, ComponentDidUpdate, etc. which have all been condensed into a single function called useEffect(). Let us observe how this hook behaves by printing out the count in browser console. | As always, we will start by importing the function from the react library: | . import { useEffect } from \"react\"; . | Next we will add the function to our existing counter component: | . useEffect(() =&gt; { console.log(`The current count is ${count}`); }, []); . Let’s break down this code to understand what is happening: . | We use React’s useEffect function to hook into the component life cycle. | The function takes in an arrow function, which executes when the component is first rendered. | The function takes in a second parameter, which determines when our arrow function is called. This parameter is an array of values that, when changed, will cause the arrow function to be invoked. In our case, we pass in an empty array, so our arrow function will never be called after the first render. | If we now try the running app and open the console, we’ll see Counter first rendering only appears once. | . | Let’s remove the second parameter into useEffect now: | . | If no second parameter is provided, will cause the arrow function to be invoked first on mount and then on every re-render. | . useEffect(() =&gt; { console.log(`The current count is ${count}`); }); . | Additionally we can also pass the variable in the array to observe only changes related to a particular value (as below). | Now we can see that the componenet will render everytime the value of count is changed. | . useEffect(() =&gt; { console.log(`The current count is ${count}`); }, [count]); . | Finally, our component counter will look like: | . import { useState } from \"react\"; import { useEffect } from \"react\"; function Counter() { const [count, setCount] = useState(0); function incrementCount() { setCount(count + 1); } useEffect(() =&gt; { console.log(`The current count is ${count}`); }, [count]); return ( &lt;div&gt; &lt;h1&gt;Count: {count}&lt;/h1&gt; &lt;button onClick={incrementCount}&gt;Click me!&lt;/button&gt; &lt;/div&gt; ); } export default Counter; . Object Dependencies in UseEffect . Consider a case where useEffect depends on an object: . import { useState } from \"react\"; import { useEffect } from \"react\"; function Counter() { const [counter, setCounter] = useState({ count: 0, increment: 1 }); function incrementCount() { counter.count += counter.increment; setCounter(counter); // will not cause component to rerender } // Will not get called when incrementCount is called useEffect(() =&gt; { console.log(`The current count is ${counter.count}`); }, [counter]); return ( &lt;div&gt; &lt;h1&gt;Count: {count}&lt;/h1&gt; &lt;button onClick={incrementCount}&gt;Click me!&lt;/button&gt; &lt;/div&gt; ); } export default Counter; . In the example above, we’ve modified the counter to be an object containing both the current count and the amount to increment the counter by when the button is clicked. Similar to the list case for useState, updating an attribute of an object and setting the state variable to that same object reference will not cause a re-render, and useEffect will not detect a change in its dependencies, even though we have changed one of the attributes. To properly invoke a useEffect call, we must change the object reference itself: . function Counter() { const [counter, setCounter] = useState({ count: 0, increment: 1 }); function incrementCount() { // we use the spread operator (...) to make a copy of the object setCounter({...counter, count: counter.count + counter.increment}); } useEffect(() =&gt; { console.log(`The current count is ${counter.count}`); }, [counter]); return ( &lt;div&gt; &lt;h1&gt;Count: {count}&lt;/h1&gt; &lt;button onClick={incrementCount}&gt;Click me!&lt;/button&gt; &lt;/div&gt; ); } export default Counter; . The useEffect hook will now be invoked with each button click. However, our useEffect is dependent on the entire counter object, meaning that a change to any of its attributes will cause the useEffect hook to be called, which is not always a desired behavior. We can get around this by being more specific in our dependency list: . function Counter() { const [counter, setCounter] = useState({ count: 0, increment: 1 }); function incrementCount() { // we use the spread operator (...) to make a copy of the object setCounter({...counter, count: counter.count + counter.increment}); } function incrementIncrement() { // we use the spread operator (...) to make a copy of the object setCounter({...counter, count: counter.increment + 1}); } useEffect(() =&gt; { console.log(`The current count is ${counter.count}`); }, [counter.count]); // Now that we only depend on count, this function will not be called if the incrementIncrement function is called return ( &lt;div&gt; &lt;h1&gt;Count: {count}&lt;/h1&gt; &lt;button onClick={incrementCount}&gt;Click me to increment the count!&lt;/button&gt; &lt;button onClick={incrementIncrement}&gt;Click me to increase the increment amount!&lt;/button&gt; &lt;/div&gt; ); } export default Counter; . ",
    "url": "/CS4530-Fall-2023/tutorials/week4-react-basics#react-hooks",
    
    "relUrl": "/tutorials/week4-react-basics#react-hooks"
  },"243": {
    "doc": "React Tutorial",
    "title": "React Tutorial",
    "content": " ",
    "url": "/CS4530-Fall-2023/tutorials/week4-react-basics",
    
    "relUrl": "/tutorials/week4-react-basics"
  }
}
